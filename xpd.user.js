// ==UserScript==
// @name           xpd
// @namespace      gengar.hatenadiary.org
// @description    GLCのパーティ構築システムの一括変更を使いやすくするスクリプト
// @include        http://psense.lib.net/_/PDINPUT.cgi*
// @grant          unsafeWindow
// @grant          GM.xmlHttpRequest
// @grant          GM.getValue
// @grant          GM.setValue
// ==/UserScript==

/*
 *   Copyright (C) 2009-2023, kaki
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions
 *   are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 *   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

'use strict';

if (!document.forms[0]?.S2) {
  throw new Error("一括変更のページでないため実行を中断");
}

const xpd = {
  version: "2.1.0-alpha"
};

function exportUnsafe(f) {
  return (typeof exportFunction === "undefined")
    ? f
    : exportFunction(f, unsafeWindow, { defineAs: f.name });
}

function getWrappedJSObject(obj) {
  return obj.wrappedJSObject ?? obj;
}

const $w = getWrappedJSObject(window);
const $d = getWrappedJSObject(document);
const $f = getWrappedJSObject(document.forms[0]);

$d.title += "/xpd";

xpd.platforms = ["Mac OS X", "Windows"];
xpd.platform = xpd.platforms.find(s => navigator.userAgent.indexOf(s) >= 0);
xpd.browsers = ["Firefox", "Chrome"];
xpd.browser = xpd.browsers.find(s => navigator.userAgent.indexOf(s) >= 0);

xpd.pref = {};

// --- Data ---
class Data {
  static normalizeName(str) {
    return str?.replace(/−|－/g, "ー").replace(/10/g, "１０");
  }
  static makeIndex(ary, ref) {
    const index = {};
    ary.forEach(e => {
      index[ref(e)] = e;
    });
    return index;
  }
  toString() {
    return `[${this.constructor.name} ${this.name}]`;
  }
}

class MoveData extends Data {
  constructor(name, id, pp) {
    super();
    this.name = name;
    this.id = id;
    this.pp = pp;
  }
  static raw = [
    new MoveData("", 0, 0),
    ,
    new MoveData("はたく", 2, 35),
    new MoveData("からてチョップ", 3, 25),
    new MoveData("おうふくビンタ", 4, 20),
    new MoveData("れんぞくパンチ", 5, 15),
    new MoveData("メガトンパンチ", 6, 20),
    new MoveData("ネコにこばん", 7, 20),
    new MoveData("ほのおのパンチ", 8, 15),
    new MoveData("れいとうパンチ", 9, 15),
    new MoveData("かみなりパンチ", 10, 15),
    new MoveData("ひっかく", 11, 35),
    new MoveData("はさむ", 12, 30),
    new MoveData("ハサミギロチン", 13, 5),
    new MoveData("かまいたち", 14, 10),
    new MoveData("つるぎのまい", 15, 30),
    new MoveData("いあいぎり", 16, 30),
    new MoveData("かぜおこし", 17, 35),
    new MoveData("つばさでうつ", 18, 35),
    new MoveData("ふきとばし", 19, 20),
    new MoveData("そらをとぶ", 20, 15),
    new MoveData("しめつける", 21, 20),
    new MoveData("たたきつける", 22, 20),
    new MoveData("つるのムチ", 23, 10),
    new MoveData("ふみつけ", 24, 20),
    new MoveData("にどげり", 25, 30),
    new MoveData("メガトンキック", 26, 5),
    new MoveData("とびげり", 27, 25),
    new MoveData("まわしげり", 28, 15),
    new MoveData("すなかけ", 29, 15),
    new MoveData("ずつき", 30, 15),
    new MoveData("つのでつく", 31, 25),
    new MoveData("みだれづき", 32, 20),
    new MoveData("つのドリル", 33, 5),
    new MoveData("たいあたり", 34, 35),
    new MoveData("のしかかり", 35, 15),
    new MoveData("まきつく", 36, 20),
    new MoveData("とっしん", 37, 20),
    new MoveData("あばれる", 38, 20),
    new MoveData("すてみタックル", 39, 15),
    new MoveData("しっぽをふる", 40, 30),
    new MoveData("どくばり", 41, 35),
    new MoveData("ダブルニードル", 42, 20),
    new MoveData("ミサイルばり", 43, 20),
    new MoveData("にらみつける", 44, 30),
    new MoveData("かみつく", 45, 25),
    new MoveData("なきごえ", 46, 40),
    new MoveData("ほえる", 47, 20),
    new MoveData("うたう", 48, 15),
    new MoveData("ちょうおんぱ", 49, 20),
    new MoveData("ソニックブーム", 50, 20),
    new MoveData("かなしばり", 51, 20),
    new MoveData("ようかいえき", 52, 30),
    new MoveData("ひのこ", 53, 25),
    new MoveData("かえんほうしゃ", 54, 15),
    new MoveData("しろいきり", 55, 30),
    new MoveData("みずでっぽう", 56, 25),
    new MoveData("ハイドロポンプ", 57, 5),
    new MoveData("なみのり", 58, 15),
    new MoveData("れいとうビーム", 59, 10),
    new MoveData("ふぶき", 60, 5),
    new MoveData("サイケこうせん", 61, 20),
    new MoveData("バブルこうせん", 62, 20),
    new MoveData("オーロラビーム", 63, 20),
    new MoveData("はかいこうせん", 64, 5),
    new MoveData("つつく", 65, 35),
    new MoveData("ドリルくちばし", 66, 20),
    new MoveData("じごくぐるま", 67, 25),
    new MoveData("けたぐり", 68, 20),
    new MoveData("カウンター", 69, 20),
    new MoveData("ちきゅうなげ", 70, 20),
    new MoveData("かいりき", 71, 15),
    new MoveData("すいとる", 72, 20),
    new MoveData("メガドレイン", 73, 10),
    new MoveData("やどりぎのタネ", 74, 10),
    new MoveData("せいちょう", 75, 40),
    new MoveData("はっぱカッター", 76, 25),
    new MoveData("ソーラービーム", 77, 10),
    new MoveData("どくのこな", 78, 35),
    new MoveData("しびれごな", 79, 30),
    new MoveData("ねむりごな", 80, 15),
    new MoveData("はなびらのまい", 81, 20),
    new MoveData("いとをはく", 82, 40),
    new MoveData("りゅうのいかり", 83, 10),
    new MoveData("ほのおのうず", 84, 15),
    new MoveData("でんきショック", 85, 30),
    new MoveData("１０まんボルト", 86, 15),
    new MoveData("でんじは", 87, 20),
    new MoveData("かみなり", 88, 10),
    new MoveData("いわおとし", 89, 15),
    new MoveData("じしん", 90, 10),
    new MoveData("じわれ", 91, 5),
    new MoveData("あなをほる", 92, 10),
    new MoveData("どくどく", 93, 10),
    new MoveData("ねんりき", 94, 25),
    new MoveData("サイコキネシス", 95, 10),
    new MoveData("さいみんじゅつ", 96, 20),
    new MoveData("ヨガのポーズ", 97, 40),
    new MoveData("こうそくいどう", 98, 30),
    new MoveData("でんこうせっか", 99, 30),
    new MoveData("いかり", 100, 20),
    new MoveData("テレポート", 101, 20),
    new MoveData("ナイトヘッド", 102, 15),
    new MoveData("ものまね", 103, 10),
    new MoveData("いやなおと", 104, 40),
    new MoveData("かげぶんしん", 105, 15),
    new MoveData("じこさいせい", 106, 20),
    new MoveData("かたくなる", 107, 30),
    new MoveData("ちいさくなる", 108, 20),
    new MoveData("えんまく", 109, 20),
    new MoveData("あやしいひかり", 110, 16),
    new MoveData("からにこもる", 111, 40),
    new MoveData("まるくなる", 112, 40),
    new MoveData("バリアー", 113, 30),
    new MoveData("ひかりのかべ", 114, 30),
    new MoveData("くろいきり", 115, 30),
    new MoveData("リフレクター", 116, 20),
    new MoveData("きあいだめ", 117, 30),
    new MoveData("がまん", 118, 10),
    new MoveData("ゆびをふる", 119, 10),
    new MoveData("オウムがえし", 120, 20),
    new MoveData("じばく", 121, 5),
    new MoveData("タマゴばくだん", 122, 10),
    new MoveData("したでなめる", 123, 30),
    new MoveData("スモッグ", 124, 20),
    new MoveData("ヘドロこうげき", 125, 20),
    new MoveData("ホネこんぼう", 126, 20),
    new MoveData("だいもんじ", 127, 5),
    new MoveData("たきのぼり", 128, 15),
    new MoveData("からではさむ", 129, 10),
    new MoveData("スピードスター", 130, 20),
    new MoveData("ロケットずつき", 131, 15),
    new MoveData("とげキャノン", 132, 15),
    new MoveData("からみつく", 133, 35),
    new MoveData("ドわすれ", 134, 20),
    new MoveData("スプーンまげ", 135, 15),
    new MoveData("タマゴうみ", 136, 10),
    new MoveData("とびひざげり", 137, 20),
    new MoveData("へびにらみ", 138, 30),
    new MoveData("ゆめくい", 139, 15),
    new MoveData("どくガス", 140, 40),
    new MoveData("たまなげ", 141, 20),
    new MoveData("きゅうけつ", 142, 15),
    new MoveData("あくまのキッス", 143, 10),
    new MoveData("ゴッドバード", 144, 5),
    new MoveData("へんしん", 145, 10),
    new MoveData("あわ", 146, 30),
    new MoveData("ピヨピヨパンチ", 147, 10),
    new MoveData("キノコのほうし", 148, 15),
    new MoveData("フラッシュ", 149, 20),
    new MoveData("サイコウェーブ", 150, 15),
    new MoveData("はねる", 151, 40),
    new MoveData("とける", 152, 40),
    new MoveData("クラブハンマー", 153, 10),
    new MoveData("だいばくはつ", 154, 5),
    new MoveData("みだれひっかき", 155, 15),
    new MoveData("ホネブーメラン", 156, 10),
    new MoveData("ねむる", 157, 10),
    new MoveData("いわなだれ", 158, 10),
    new MoveData("ひっさつまえば", 159, 15),
    new MoveData("かくばる", 160, 30),
    new MoveData("テクスチャー", 161, 30),
    new MoveData("トライアタック", 162, 10),
    new MoveData("いかりのまえば", 163, 10),
    new MoveData("きりさく", 164, 20),
    new MoveData("みがわり", 165, 10),
    new MoveData("わるあがき", 166, -1),
    new MoveData("スケッチ", 167, 1),
    new MoveData("トリプルキック", 168, 10),
    new MoveData("どろぼう", 169, 10),
    new MoveData("クモのす", 170, 15),
    new MoveData("こころのめ", 171, 5),
    new MoveData("あくむ", 172, 15),
    new MoveData("かえんぐるま", 173, 25),
    new MoveData("いびき", 174, 15),
    new MoveData("のろい", 175, 10),
    new MoveData("じたばた", 176, 15),
    new MoveData("テクスチャー２", 177, 30),
    new MoveData("エアロブラスト", 178, 5),
    new MoveData("わたほうし", 179, 40),
    new MoveData("きしかいせい", 180, 15),
    new MoveData("うらみ", 181, 10),
    new MoveData("こなゆき", 182, 25),
    new MoveData("まもる", 183, 10),
    new MoveData("マッハパンチ", 184, 30),
    new MoveData("こわいかお", 185, 10),
    new MoveData("だましうち", 186, 20),
    new MoveData("てんしのキッス", 187, 10),
    new MoveData("はらだいこ", 188, 10),
    new MoveData("ヘドロばくだん", 189, 10),
    new MoveData("どろかけ", 190, 10),
    new MoveData("オクタンほう", 191, 10),
    new MoveData("まきびし", 192, 20),
    new MoveData("でんじほう", 193, 5),
    new MoveData("みやぶる", 194, 40),
    new MoveData("みちづれ", 195, 5),
    new MoveData("ほろびのうた", 196, 5),
    new MoveData("こごえるかぜ", 197, 15),
    new MoveData("みきり", 198, 5),
    new MoveData("ボーンラッシュ", 199, 10),
    new MoveData("ロックオン", 200, 5),
    new MoveData("げきりん", 201, 15),
    new MoveData("すなあらし", 202, 10),
    new MoveData("ギガドレイン", 203, 5),
    new MoveData("こらえる", 204, 10),
    new MoveData("あまえる", 205, 20),
    new MoveData("ころがる", 206, 10),
    new MoveData("みねうち", 207, 40),
    new MoveData("いばる", 208, 10),
    new MoveData("ミルクのみ", 209, 10),
    new MoveData("スパーク", 210, 20),
    new MoveData("れんぞくぎり", 211, 20),
    new MoveData("はがねのつばさ", 212, 25),
    new MoveData("くろいまなざし", 213, 5),
    new MoveData("メロメロ", 214, 15),
    new MoveData("ねごと", 215, 10),
    new MoveData("いやしのすず", 216, 5),
    new MoveData("おんがえし", 217, 20),
    new MoveData("プレゼント", 218, 15),
    new MoveData("やつあたり", 219, 20),
    new MoveData("しんぴのまもり", 220, 25),
    new MoveData("いたみわけ", 221, 20),
    new MoveData("せいなるほのお", 222, 5),
    new MoveData("マグニチュード", 223, 30),
    new MoveData("ばくれつパンチ", 224, 5),
    new MoveData("メガホーン", 225, 10),
    new MoveData("りゅうのいぶき", 226, 20),
    new MoveData("バトンタッチ", 227, 40),
    new MoveData("アンコール", 228, 5),
    new MoveData("おいうち", 229, 20),
    new MoveData("こうそくスピン", 230, 40),
    new MoveData("あまいかおり", 231, 20),
    new MoveData("アイアンテール", 232, 15),
    new MoveData("メタルクロー", 233, 30),
    new MoveData("あてみなげ", 234, 10),
    new MoveData("あさのひざし", 235, 5),
    new MoveData("こうごうせい", 236, 5),
    new MoveData("つきのひかり", 237, 5),
    new MoveData("めざめるパワー", 238, 15),
    new MoveData("クロスチョップ", 239, 5),
    new MoveData("たつまき", 240, 20),
    new MoveData("あまごい", 241, 5),
    new MoveData("にほんばれ", 242, 5),
    new MoveData("かみくだく", 243, 15),
    new MoveData("ミラーコート", 244, 20),
    new MoveData("じこあんじ", 245, 10),
    new MoveData("しんそく", 246, 5),
    new MoveData("げんしのちから", 247, 5),
    new MoveData("シャドーボール", 248, 15),
    new MoveData("みらいよち", 249, 15),
    new MoveData("いわくだき", 250, 15),
    new MoveData("うずしお", 251, 15),
    new MoveData("ふくろだたき", 252, 10)];

  static fromID(id) {
    return MoveData.raw[id];
  }

  static index = Data.makeIndex(MoveData.raw, d => d.name);
  static fromName(name) {
    return MoveData.index[Data.normalizeName(name)];
  }

  static isOld(id) {
    return id < 167;
  }
  isOld() {
    return MoveData.isOld(this.id);
  }

  static TMRaw = [166, 224, 30, 175, 206, 47, 93, 193, 250, 245, 238, 242, 231, 174, 60, 64, 197, 183, 241, 203, 204, 219, 77, 232, 226, 88, 90, 217, 92, 95, 248, 190, 105, 9, 208, 215, 189, 202, 127, 130, 112, 10, 139, 198, 157, 214, 169, 212, 8, 211, 172, 16, 20, 58, 71, 149, 251, 128, 54, 86, 59];
  static TM = this.TMRaw.map(MoveData.fromID);
  static oldTMRaw = [166, 6, 14, 15, 19, 26, 93, 33, 35, 37, 39, 62, 56, 59, 60, 64, 7, 67, 69, 70, 100, 73, 77, 83, 86, 88, 90, 91, 92, 95, 101, 103, 105, 116, 118, 119, 121, 122, 127, 130, 131, 136, 139, 144, 157, 87, 150, 154, 158, 162, 165, 16, 20, 58, 71, 149,,, 58];
  static oldTM = this.oldTMRaw.map(MoveData.fromID);

  static cantSketch = [120, 215, 145, 103, 119, 166];
}

class PokeData extends Data {
  constructor(name, id, h, a, b, c, d, s,
              t1, t2, cap, exp, female, ev, rev,
              crystal, pika, tm, oldtm, egg, eggg) {
    super();
    this.name = name;
    this.id = id;
    this.h = h;
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
    this.s = s;
    this.type1 = t1;
    this.type2 = t2; // nullable
    this.captured = cap;
    this.exp = exp;
    this.female = female; // nullable
    this.evList = ev; // [(to, type, value?)]
    this.evFrom = rev; // nullable
    this.crystalLearnings = crystal;
    this.pikaLearnings = pika;
    this.TMs = tm;
    this.oldTMs = oldtm;
    this.eggMoves = egg;
    this.eggGroup = eggg;

    this.TMMoves = this.TMs.map(i => MoveData.TMRaw[i]);
    this.oldTMMoves = this.oldTMs.map(i => MoveData.oldTMRaw[i]);
  }
  static type = ["ノーマル", "かくとう", "ひこう", "どく", "じめん", "いわ", "むし", "ゴースト", "はがね", "ほのお", "みず", "くさ", "でんき", "エスパー", "こおり", "ドラゴン", "あく"];
  static eggGroup = ["怪獣", "水中1", "虫", "飛行", "陸上", "妖精", "植物", "人型", "水中3", "鉱物", "不定形", "水中2", "ドラゴン", "性別不明", "メタモン", "タマゴ未発見"];
  static raw = [
    new PokeData("フシギダネ", 1, 45, 49, 49, 65, 65, 45, 11, 3, 45, 64, 2, [[2, 1, 16]], null, [[1, 34], [4, 46], [7, 74], [10, 23], [15, 78], [15, 80], [20, 76], [25, 231], [32, 75], [39, 236], [46, 77]], [[1, 34], [1, 46], [7, 74], [13, 23], [20, 78], [27, 76], [34, 75], [41, 80], [48, 77]], [2, 3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 31, 32, 34, 35, 40, 44, 45, 49, 51, 55], [3, 6, 8, 9, 10, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [14, 81, 114, 131, 220], [0, 6]),
    new PokeData("フシギソウ", 2, 60, 62, 63, 80, 80, 60, 11, 3, 45, 141, 2, [[3, 1, 32]], 1, [[1, 34], [1, 46], [1, 74], [4, 46], [7, 74], [10, 23], [15, 78], [15, 80], [22, 76], [29, 231], [38, 75], [47, 236], [56, 77]], [[1, 34], [1, 46], [1, 74], [7, 74], [13, 23], [22, 78], [30, 76], [38, 75], [46, 80], [54, 77]], [2, 3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 31, 32, 34, 35, 40, 44, 45, 49, 51, 55], [3, 6, 8, 9, 10, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [], [0, 6]),
    new PokeData("フシギバナ", 3, 80, 82, 83, 100, 100, 80, 11, 3, 45, 208, 2, [], 2, [[1, 34], [1, 46], [1, 74], [1, 23], [4, 46], [7, 74], [10, 23], [15, 78], [15, 80], [22, 76], [29, 231], [41, 75], [53, 236], [65, 77]], [[1, 34], [1, 46], [1, 74], [1, 23], [7, 74], [13, 23], [22, 78], [30, 76], [43, 75], [55, 80], [65, 77]], [2, 3, 5, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 31, 32, 34, 35, 40, 44, 45, 49, 51, 55], [3, 6, 8, 9, 10, 15, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [], [0, 6]),
    new PokeData("ヒトカゲ", 4, 39, 52, 43, 60, 50, 65, 9, null, 45, 65, 2, [[5, 1, 16]], null, [[1, 11], [1, 46], [7, 53], [13, 109], [19, 100], [25, 185], [31, 54], [37, 164], [43, 83], [49, 84]], [[1, 11], [1, 46], [9, 53], [15, 44], [22, 100], [30, 164], [38, 54], [46, 84]], [1, 2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 23, 24, 27, 28, 31, 32, 34, 35, 38, 39, 40, 44, 45, 48, 49, 51, 54, 58], [1, 3, 5, 6, 8, 9, 10, 17, 18, 19, 20, 23, 28, 31, 32, 33, 34, 38, 39, 40, 44, 50, 51, 54], [45, 158, 188, 201, 247, 252], [0, 12]),
    new PokeData("リザード", 5, 58, 64, 58, 80, 65, 80, 9, null, 45, 142, 2, [[6, 1, 36]], 4, [[1, 11], [1, 46], [1, 53], [7, 53], [13, 109], [20, 100], [27, 185], [34, 54], [41, 164], [48, 83], [55, 84]], [[1, 11], [1, 46], [1, 53], [9, 53], [15, 44], [24, 100], [33, 164], [42, 54], [56, 84]], [1, 2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 23, 24, 27, 28, 31, 32, 34, 35, 38, 39, 40, 44, 45, 48, 49, 51, 54, 58], [1, 3, 5, 6, 8, 9, 10, 17, 18, 19, 20, 23, 28, 31, 32, 33, 34, 38, 39, 40, 44, 50, 51, 54], [], [0, 12]),
    new PokeData("リザードン", 6, 78, 84, 78, 109, 85, 100, 9, 2, 45, 209, 2, [], 5, [[1, 11], [1, 46], [1, 53], [1, 109], [7, 53], [13, 109], [20, 100], [27, 185], [34, 54], [36, 18], [44, 164], [54, 83], [64, 84]], [[1, 11], [1, 46], [1, 53], [1, 44], [9, 53], [15, 44], [24, 100], [36, 164], [46, 54], [55, 84]], [1, 2, 3, 5, 6, 8, 10, 11, 13, 15, 17, 20, 21, 23, 24, 26, 27, 28, 31, 32, 34, 35, 37, 38, 39, 40, 44, 45, 47, 48, 49, 51, 52, 54, 58], [1, 3, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 23, 26, 27, 28, 31, 32, 33, 34, 38, 39, 40, 44, 50, 51, 52, 54], [], [0, 12]),
    new PokeData("ゼニガメ", 7, 44, 48, 65, 50, 64, 43, 10, null, 45, 66, 2, [[8, 1, 16]], null, [[1, 34], [4, 40], [7, 146], [10, 111], [13, 56], [18, 45], [23, 230], [28, 183], [33, 241], [40, 131], [47, 57]], [[1, 34], [1, 40], [8, 146], [15, 56], [22, 45], [28, 111], [35, 131], [42, 57]], [1, 2, 3, 4, 6, 8, 10, 13, 14, 16, 17, 18, 20, 21, 23, 27, 28, 31, 32, 33, 34, 35, 40, 44, 45, 53, 54, 56, 57, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 28, 31, 32, 33, 34, 40, 44, 50, 53, 54], [55, 94, 115, 176, 194, 244], [0, 1]),
    new PokeData("カメール", 8, 59, 63, 80, 65, 80, 58, 10, null, 45, 143, 2, [[9, 1, 36]], 7, [[1, 34], [1, 40], [1, 146], [4, 40], [7, 146], [10, 111], [13, 56], [19, 45], [25, 230], [31, 183], [37, 241], [45, 131], [53, 57]], [[1, 34], [1, 40], [1, 146], [8, 146], [15, 56], [24, 45], [31, 111], [39, 131], [47, 57]], [1, 2, 3, 4, 6, 8, 10, 13, 14, 16, 17, 18, 20, 21, 23, 27, 28, 31, 32, 33, 34, 35, 40, 44, 45, 53, 54, 56, 57, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 28, 31, 32, 33, 34, 40, 44, 50, 53, 54], [], [0, 1]),
    new PokeData("カメックス", 9, 79, 83, 100, 85, 105, 78, 10, null, 45, 210, 2, [], 8, [[1, 34], [1, 40], [1, 146], [1, 111], [4, 40], [7, 146], [10, 111], [13, 56], [19, 45], [25, 230], [31, 183], [42, 241], [55, 131], [68, 57]], [[1, 34], [1, 40], [1, 146], [1, 56], [8, 146], [15, 56], [24, 45], [31, 111], [42, 131], [52, 57]], [1, 2, 3, 4, 5, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 31, 32, 33, 34, 35, 40, 44, 45, 53, 54, 56, 57, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 26, 27, 28, 31, 32, 33, 34, 40, 44, 50, 53, 54], [], [0, 1]),
    new PokeData("キャタピー", 10, 45, 30, 35, 20, 20, 45, 6, null, 255, 53, 8, [[11, 1, 7]], null, [[1, 34], [1, 82]], [[1, 34], [1, 82]], [], [], [], [2]),
    new PokeData("トランセル", 11, 50, 20, 55, 25, 25, 30, 6, null, 120, 72, 8, [[12, 1, 10]], 10, [[1, 107], [7, 107]], [[1, 107], [7, 107]], [], [], [], [2]),
    new PokeData("バタフリー", 12, 60, 45, 50, 80, 80, 70, 6, 2, 45, 160, 8, [], 11, [[1, 94], [10, 94], [13, 78], [14, 79], [15, 80], [18, 49], [23, 19], [28, 17], [34, 61], [40, 220]], [[1, 94], [10, 94], [13, 78], [14, 79], [15, 80], [18, 49], [23, 19], [28, 17], [34, 61]], [3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 29, 32, 34, 35, 39, 44, 45, 50, 55], [2, 4, 6, 9, 10, 15, 20, 21, 22, 29, 30, 31, 32, 33, 34, 39, 44, 46, 50, 55], [], [2]),
    new PokeData("ビードル", 13, 40, 35, 30, 20, 20, 50, 6, 3, 255, 52, 8, [[14, 1, 7]], null, [[1, 41], [1, 82]], [[1, 41], [1, 82]], [], [], [], [2]),
    new PokeData("コクーン", 14, 45, 25, 50, 25, 25, 35, 6, 3, 120, 71, 8, [[15, 1, 10]], 13, [[1, 107], [7, 107]], [[1, 107]], [], [], [], [2]),
    new PokeData("スピアー", 15, 65, 80, 40, 45, 80, 75, 6, 3, 45, 159, 8, [], 14, [[1, 32], [10, 32], [15, 117], [20, 42], [25, 100], [30, 229], [35, 43], [40, 98]], [[1, 32], [12, 32], [16, 117], [20, 42], [25, 100], [30, 43], [35, 98]], [3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 27, 32, 34, 35, 36, 39, 44, 45, 49, 51], [3, 6, 9, 10, 15, 20, 21, 31, 32, 33, 34, 39, 40, 44, 50, 51], [], [2]),
    new PokeData("ポッポ", 16, 40, 45, 40, 35, 35, 56, 0, 2, 255, 55, 8, [[17, 1, 18]], null, [[1, 34], [5, 29], [9, 17], [15, 99], [21, 19], [29, 18], [37, 98], [47, 120]], [[1, 17], [5, 29], [12, 99], [19, 19], [28, 18], [36, 98], [44, 120]], [3, 6, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 47, 52], [2, 4, 6, 9, 10, 20, 31, 32, 33, 34, 39, 43, 44, 50, 52], [186, 194, 229], [3]),
    new PokeData("ピジョン", 17, 63, 60, 55, 50, 50, 71, 0, 2, 120, 113, 8, [[18, 1, 36]], 16, [[1, 34], [1, 29], [1, 17], [5, 29], [9, 17], [15, 99], [23, 19], [33, 18], [43, 98], [55, 120]], [[1, 17], [1, 29], [5, 29], [12, 99], [21, 19], [31, 18], [40, 98], [49, 120]], [3, 6, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 47, 52], [2, 4, 6, 9, 10, 20, 31, 32, 33, 34, 39, 43, 44, 50, 52], [], [3]),
    new PokeData("ピジョット", 18, 83, 80, 75, 70, 70, 91, 0, 2, 45, 172, 8, [], 17, [[1, 34], [1, 29], [1, 17], [1, 99], [5, 29], [9, 17], [15, 99], [23, 19], [33, 18], [46, 98], [61, 120]], [[1, 17], [1, 29], [1, 99], [5, 29], [12, 99], [21, 19], [31, 18], [44, 98], [54, 120]], [3, 6, 10, 11, 13, 15, 17, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 47, 52], [2, 4, 6, 9, 10, 15, 20, 31, 32, 33, 34, 39, 43, 44, 50, 52], [], [3]),
    new PokeData("コラッタ", 19, 30, 56, 35, 25, 35, 72, 0, null, 255, 57, 8, [[20, 1, 20]], null, [[1, 34], [1, 40], [7, 99], [13, 159], [20, 117], [27, 229], [34, 163]], [[1, 34], [1, 40], [7, 99], [14, 159], [23, 117], [34, 163]], [2, 3, 6, 8, 10, 11, 13, 14, 16, 17, 20, 21, 23, 25, 27, 28, 30, 31, 32, 34, 35, 39, 40, 44, 45, 46], [6, 8, 9, 10, 11, 12, 14, 20, 24, 25, 28, 31, 32, 34, 39, 40, 44, 50], [45, 69, 104, 155, 173, 180], [4]),
    new PokeData("ラッタ", 20, 55, 81, 60, 50, 70, 97, 0, null, 90, 116, 8, [], 19, [[1, 34], [1, 40], [1, 99], [7, 99], [13, 159], [20, 185], [30, 229], [40, 163]], [[1, 34], [1, 40], [1, 99], [7, 99], [14, 159], [27, 117], [41, 163]], [2, 3, 5, 6, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 23, 25, 27, 28, 30, 31, 32, 34, 35, 39, 40, 44, 45, 46, 51, 54, 59, 60], [6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 24, 25, 28, 31, 32, 34, 39, 40, 44, 50], [], [4]),
    new PokeData("オニスズメ", 21, 40, 60, 30, 31, 31, 70, 0, 2, 255, 58, 8, [[22, 1, 20]], null, [[1, 65], [1, 46], [7, 44], [13, 32], [25, 229], [31, 120], [37, 66], [43, 98]], [[1, 65], [1, 46], [9, 44], [15, 32], [22, 120], [29, 66], [36, 98]], [3, 6, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 47, 52], [2, 4, 6, 9, 10, 20, 31, 32, 34, 39, 43, 44, 50, 52], [99, 162, 185, 186, 207], [3]),
    new PokeData("オニドリル", 22, 65, 90, 65, 61, 61, 100, 0, 2, 90, 162, 8, [], 21, [[1, 65], [1, 46], [1, 44], [1, 32], [7, 44], [13, 32], [26, 229], [32, 120], [40, 66], [47, 98]], [[1, 65], [1, 46], [1, 44], [9, 44], [15, 32], [25, 120], [34, 66], [43, 98]], [3, 6, 10, 11, 13, 15, 17, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 47, 52], [2, 4, 6, 9, 10, 15, 20, 31, 32, 34, 39, 43, 44, 50, 52], [], [3]),
    new PokeData("アーボ", 23, 35, 60, 44, 40, 54, 55, 3, null, 255, 62, 8, [[24, 1, 22]], null, [[1, 36], [1, 44], [9, 41], [15, 45], [23, 138], [29, 104], [37, 52], [43, 115]], [[1, 36], [1, 44], [10, 41], [17, 45], [24, 138], [31, 104], [38, 52]], [2, 3, 6, 10, 11, 13, 17, 19, 20, 21, 26, 27, 28, 32, 34, 35, 36, 44, 45, 46, 54], [6, 8, 9, 10, 20, 21, 26, 27, 28, 31, 32, 34, 40, 44, 48, 50, 54], [22, 181, 229, 243, 252], [4, 12]),
    new PokeData("アーボック", 24, 60, 85, 69, 65, 79, 80, 3, null, 90, 147, 8, [], 23, [[1, 36], [1, 44], [1, 41], [1, 45], [9, 41], [15, 45], [25, 138], [33, 104], [43, 52], [51, 115]], [[1, 36], [1, 44], [1, 41], [10, 41], [17, 45], [27, 138], [36, 104], [47, 52]], [2, 3, 6, 10, 11, 13, 15, 17, 19, 20, 21, 26, 27, 28, 32, 34, 35, 36, 44, 45, 46, 54], [6, 8, 9, 10, 15, 20, 21, 26, 27, 28, 31, 32, 34, 40, 44, 48, 50, 54], [], [4, 12]),
    new PokeData("ピカチュウ", 25, 35, 55, 30, 50, 40, 90, 12, null, 190, 82, 8, [[26, 2, 23]], 172, [[1, 85], [1, 46], [6, 40], [8, 87], [11, 99], [15, 105], [20, 22], [26, 86], [33, 98], [41, 88], [50, 114]], [[1, 85], [1, 46], [6, 40], [8, 87], [11, 99], [15, 105], [20, 22], [26, 86], [33, 98], [41, 88], [50, 114]], [1, 2, 3, 4, 6, 7, 10, 13, 17, 18, 20, 21, 23, 25, 27, 31, 32, 34, 35, 39, 40, 41, 43, 44, 45, 54, 55, 59], [1, 5, 6, 8, 9, 10, 16, 17, 19, 20, 24, 25, 31, 32, 33, 34, 39, 40, 44, 45, 50, 55, 58], [], [4, 5]),
    new PokeData("ライチュウ", 26, 60, 90, 55, 90, 80, 100, 12, null, 75, 122, 8, [], 25, [[1, 85], [1, 40], [1, 99], [1, 86]], [[1, 85], [1, 46], [1, 87]], [1, 2, 3, 4, 6, 7, 10, 13, 15, 17, 18, 20, 21, 23, 25, 27, 31, 32, 34, 35, 39, 40, 41, 43, 44, 45, 46, 54, 55, 59], [1, 5, 6, 8, 9, 10, 15, 16, 17, 19, 20, 24, 25, 31, 32, 33, 34, 39, 40, 44, 45, 50, 55], [], [4, 5]),
    new PokeData("サンド", 27, 50, 75, 85, 20, 30, 40, 4, null, 255, 93, 8, [[28, 1, 22]], null, [[1, 11], [6, 112], [11, 29], [17, 41], [23, 164], [30, 130], [37, 155], [45, 202]], [[1, 11], [10, 29], [17, 164], [24, 41], [31, 130], [38, 155]], [1, 2, 3, 4, 6, 8, 10, 11, 13, 17, 20, 21, 23, 26, 27, 28, 31, 32, 34, 35, 37, 39, 40, 43, 44, 45, 46, 49, 51, 54], [3, 6, 8, 9, 10, 17, 19, 20, 26, 27, 28, 31, 32, 34, 39, 40, 44, 48, 50, 51, 54], [69, 176, 220, 230, 233], [4]),
    new PokeData("サンドパン", 28, 75, 100, 110, 45, 55, 65, 4, null, 90, 163, 8, [], 27, [[1, 11], [1, 112], [1, 29], [6, 112], [11, 29], [17, 41], [24, 164], [33, 130], [42, 155], [52, 202]], [[1, 11], [1, 29], [10, 29], [17, 164], [27, 41], [36, 130], [47, 155]], [1, 2, 3, 4, 6, 8, 10, 11, 13, 15, 17, 20, 21, 23, 26, 27, 28, 31, 32, 34, 35, 37, 39, 40, 43, 44, 45, 46, 49, 51, 54], [3, 6, 8, 9, 10, 15, 17, 19, 20, 26, 27, 28, 31, 32, 34, 39, 40, 44, 48, 50, 51, 54], [], [4]),
    new PokeData("ニドラン♀", 29, 55, 47, 52, 40, 40, 41, 3, null, 235, 59, 16, [[30, 1, 16]], null, [[1, 46], [1, 34], [8, 11], [12, 25], [17, 41], [23, 40], [30, 45], [38, 155]], [[1, 46], [1, 34], [8, 11], [12, 25], [17, 41], [23, 40], [30, 45], [38, 155]], [2, 3, 6, 10, 11, 13, 14, 17, 18, 20, 21, 23, 25, 27, 31, 32, 34, 35, 40, 43, 44, 45, 46, 59], [6, 8, 9, 10, 14, 20, 24, 25, 31, 32, 33, 34, 40, 44, 50], [37, 49, 51, 69, 117, 205, 252], [0, 4]),
    new PokeData("ニドリーナ", 30, 70, 62, 67, 55, 55, 56, 3, null, 120, 117, 16, [[31, 2, 8]], 29, [[1, 46], [1, 34], [8, 11], [12, 25], [19, 41], [27, 40], [36, 45], [46, 155]], [[1, 46], [1, 34], [1, 11], [8, 11], [12, 25], [19, 41], [27, 40], [36, 45], [46, 155]], [2, 3, 6, 8, 10, 11, 13, 14, 17, 18, 20, 21, 23, 25, 27, 31, 32, 34, 35, 40, 43, 44, 45, 46, 54, 59, 60], [6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 24, 25, 31, 32, 33, 34, 40, 44, 50], [], [15]),
    new PokeData("ニドクイン", 31, 90, 82, 87, 75, 85, 76, 3, 4, 45, 194, 16, [], 30, [[1, 34], [1, 11], [1, 25], [1, 40], [23, 35]], [[1, 34], [1, 11], [1, 40], [1, 35], [8, 11], [12, 25], [23, 35]], [1, 2, 3, 5, 6, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 43, 44, 45, 46, 48, 49, 53, 54, 58, 59, 60], [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 31, 32, 33, 34, 38, 40, 44, 48, 50, 53, 54], [], [15]),
    new PokeData("ニドラン♂", 32, 46, 57, 40, 40, 40, 50, 3, null, 235, 60, 0, [[33, 1, 16]], null, [[1, 44], [1, 34], [8, 31], [12, 25], [17, 41], [23, 117], [30, 32], [38, 33]], [[1, 44], [1, 34], [8, 31], [12, 25], [17, 41], [23, 117], [30, 32], [38, 33]], [2, 3, 6, 10, 11, 13, 14, 17, 18, 20, 21, 23, 25, 27, 31, 32, 34, 35, 40, 43, 44, 45, 46, 59], [6, 7, 8, 9, 10, 14, 20, 24, 25, 31, 32, 33, 34, 40, 44, 50], [37, 49, 51, 69, 94, 134, 252], [0, 4]),
    new PokeData("ニドリーノ", 33, 61, 72, 57, 55, 55, 65, 3, null, 120, 118, 0, [[34, 2, 8]], 32, [[1, 44], [1, 34], [8, 31], [12, 25], [19, 41], [27, 117], [36, 32], [46, 33]], [[1, 44], [1, 34], [1, 31], [8, 31], [12, 25], [19, 41], [27, 117], [36, 32], [46, 33]], [2, 3, 6, 8, 10, 11, 13, 14, 17, 18, 20, 21, 23, 25, 27, 31, 32, 34, 35, 40, 43, 44, 45, 46, 54, 59, 60], [6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 24, 25, 31, 32, 33, 34, 40, 44, 50], [], [0, 4]),
    new PokeData("ニドキング", 34, 81, 92, 77, 85, 75, 85, 3, 4, 45, 195, 0, [], 33, [[1, 34], [1, 31], [1, 25], [1, 41], [23, 38]], [[1, 34], [1, 31], [1, 41], [1, 38], [8, 31], [12, 25], [23, 38]], [1, 2, 3, 5, 6, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 43, 44, 45, 46, 48, 49, 53, 54, 58, 59, 60], [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 31, 32, 33, 34, 38, 40, 44, 48, 50, 53, 54], [], [0, 4]),
    new PokeData("ピッピ", 35, 70, 45, 48, 60, 65, 35, 0, null, 150, 68, 12, [[36, 2, 8]], 173, [[1, 2], [1, 46], [4, 228], [8, 48], [13, 4], [19, 108], [26, 112], [34, 119], [43, 237], [53, 114]], [[1, 2], [1, 46], [13, 48], [18, 4], [24, 108], [31, 119], [39, 112], [48, 114]], [1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 48, 50, 54, 55, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 24, 25, 29, 30, 31, 32, 33, 34, 35, 38, 40, 44, 45, 46, 49, 50, 54, 55], [], [5]),
    new PokeData("ピクシー", 36, 95, 70, 73, 85, 90, 60, 0, null, 25, 129, 12, [], 35, [[1, 48], [1, 4], [1, 119], [1, 237]], [[1, 48], [1, 4], [1, 108], [1, 119]], [1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 48, 50, 54, 55, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 24, 25, 29, 30, 31, 32, 33, 34, 35, 38, 40, 44, 45, 46, 49, 50, 54, 55], [], [5]),
    new PokeData("ロコン", 37, 38, 41, 40, 50, 65, 65, 9, null, 190, 63, 12, [[38, 2, 22]], null, [[1, 53], [1, 40], [7, 99], [13, 47], [19, 110], [25, 220], [31, 54], [37, 84]], [[1, 53], [1, 40], [16, 99], [21, 47], [28, 110], [35, 54], [42, 84]], [2, 3, 6, 10, 11, 13, 17, 20, 21, 23, 27, 28, 32, 34, 35, 38, 39, 44, 45, 58], [6, 8, 9, 10, 20, 28, 31, 32, 33, 34, 38, 39, 40, 44, 50], [51, 96, 176, 181, 186], [4]),
    new PokeData("キュウコン", 38, 73, 76, 75, 81, 100, 100, 9, null, 75, 178, 12, [], 37, [[1, 53], [1, 99], [1, 110], [1, 220], [43, 84]], [[1, 53], [1, 40], [1, 99], [1, 47]], [2, 3, 5, 6, 10, 11, 13, 15, 17, 20, 21, 23, 27, 28, 32, 34, 35, 38, 39, 44, 45, 58], [6, 8, 9, 10, 15, 20, 28, 31, 32, 33, 34, 38, 39, 40, 44, 50], [], [4]),
    new PokeData("プリン", 39, 115, 45, 20, 45, 25, 20, 0, null, 170, 76, 12, [[40, 2, 8]], 174, [[1, 48], [4, 112], [9, 2], [14, 51], [19, 206], [24, 4], [29, 157], [34, 35], [39, 39]], [[1, 48], [9, 2], [14, 51], [19, 112], [24, 4], [29, 157], [34, 35], [39, 39]], [1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 17, 18, 20, 21, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 48, 50, 54, 55, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 24, 25, 29, 30, 31, 32, 33, 34, 38, 40, 44, 45, 46, 49, 50, 54, 55], [], [5]),
    new PokeData("プクリン", 40, 140, 70, 45, 75, 50, 45, 0, null, 50, 109, 12, [], 39, [[1, 48], [1, 51], [1, 112], [1, 4]], [[1, 48], [1, 51], [1, 112], [1, 4]], [1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 21, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 38, 40, 41, 42, 43, 44, 45, 48, 50, 54, 55, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 24, 25, 29, 30, 31, 32, 33, 34, 38, 40, 44, 45, 46, 49, 50, 54, 55], [], [5]),
    new PokeData("ズバット", 41, 40, 45, 35, 30, 40, 55, 3, 2, 255, 54, 8, [[42, 1, 22]], null, [[1, 142], [6, 49], [12, 45], [19, 110], [27, 18], [36, 213], [46, 115]], [[1, 142], [10, 49], [15, 45], [21, 110], [28, 18], [36, 115]], [3, 6, 10, 11, 13, 17, 19, 20, 21, 27, 32, 34, 35, 39, 43, 44, 45, 46, 47], [2, 4, 6, 9, 10, 20, 21, 31, 32, 34, 39, 44, 50], [17, 19, 99, 186, 229], [3]),
    new PokeData("ゴルバット", 42, 75, 80, 70, 65, 75, 90, 3, 2, 90, 171, 8, [[169, 4, 1]], 41, [[1, 104], [1, 142], [1, 49], [6, 49], [12, 45], [19, 110], [30, 18], [42, 213], [55, 115]], [[1, 142], [1, 104], [1, 45], [10, 49], [15, 45], [21, 110], [32, 18], [43, 115]], [3, 6, 10, 11, 13, 15, 17, 19, 20, 21, 27, 32, 34, 35, 39, 43, 44, 45, 46, 47], [2, 4, 6, 9, 10, 15, 20, 21, 31, 32, 34, 39, 44, 50], [], [3]),
    new PokeData("ナゾノクサ", 43, 45, 50, 55, 75, 65, 30, 11, 3, 255, 78, 8, [[44, 1, 21]], null, [[1, 72], [7, 231], [14, 78], [16, 79], [18, 80], [23, 52], [32, 237], [39, 81]], [[1, 72], [15, 78], [17, 79], [19, 80], [24, 52], [33, 81], [46, 77]], [3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [3, 6, 9, 10, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [15, 76, 176, 236], [6]),
    new PokeData("クサイハナ", 44, 60, 65, 70, 85, 75, 40, 11, 3, 120, 132, 8, [[45, 2, 34], [182, 2, 169]], 43, [[1, 72], [1, 231], [1, 78], [7, 231], [14, 78], [16, 79], [18, 80], [24, 52], [35, 237], [44, 81]], [[1, 72], [1, 78], [1, 79], [15, 78], [17, 79], [19, 80], [28, 52], [38, 81], [52, 77]], [3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [3, 6, 9, 10, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [], [6]),
    new PokeData("ラフレシア", 45, 75, 80, 85, 100, 90, 50, 11, 3, 45, 184, 8, [], 44, [[1, 72], [1, 231], [1, 79], [1, 81]], [[1, 79], [1, 80], [1, 52], [1, 81], [15, 78], [17, 79], [19, 80]], [3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [3, 6, 8, 9, 10, 15, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [], [6]),
    new PokeData("パラス", 46, 35, 70, 55, 45, 55, 25, 6, 11, 190, 70, 8, [[47, 1, 24]], null, [[1, 11], [7, 79], [13, 78], [19, 142], [25, 148], [31, 164], [37, 75], [43, 203]], [[1, 11], [13, 79], [20, 142], [27, 148], [34, 164], [41, 75]], [3, 6, 8, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 28, 32, 34, 35, 36, 44, 45, 46, 49, 51, 55], [3, 6, 8, 9, 10, 20, 21, 22, 28, 31, 32, 33, 34, 40, 44, 50, 51], [61, 69, 104, 114, 176, 207, 229], [2, 6]),
    new PokeData("パラセクト", 47, 60, 95, 80, 60, 80, 30, 6, 11, 75, 128, 8, [], 46, [[1, 11], [1, 79], [1, 78], [7, 79], [13, 78], [19, 142], [28, 148], [37, 164], [46, 75], [55, 203]], [[1, 11], [1, 79], [1, 142], [13, 79], [20, 142], [30, 148], [39, 164], [48, 75]], [3, 6, 8, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 28, 32, 34, 35, 36, 44, 45, 46, 49, 51, 55], [3, 6, 8, 9, 10, 15, 20, 21, 22, 28, 31, 32, 33, 34, 40, 44, 50, 51], [], [2, 6]),
    new PokeData("コンパン", 48, 60, 55, 50, 40, 55, 45, 6, 3, 190, 75, 8, [[49, 1, 31]], null, [[1, 34], [1, 51], [1, 194], [9, 49], [17, 94], [20, 78], [25, 142], [28, 79], [33, 61], [36, 80], [41, 95]], [[1, 34], [1, 51], [11, 49], [19, 94], [22, 78], [27, 142], [30, 79], [35, 61], [38, 80], [43, 95]], [3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 29, 32, 34, 35, 36, 39, 44, 45, 46], [6, 9, 10, 20, 21, 22, 29, 31, 32, 33, 34, 44, 46, 50, 55], [104, 227], [2]),
    new PokeData("モルフォン", 49, 70, 65, 60, 90, 75, 90, 6, 3, 75, 138, 8, [], 48, [[1, 34], [1, 51], [1, 194], [1, 49], [9, 49], [17, 94], [20, 78], [25, 142], [28, 79], [31, 17], [36, 61], [42, 80], [52, 95]], [[1, 34], [1, 51], [1, 49], [1, 94], [22, 78], [27, 142], [30, 79], [38, 61], [43, 80], [50, 95]], [3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 29, 32, 34, 35, 36, 39, 44, 45, 46, 55], [2, 4, 6, 9, 10, 15, 20, 21, 22, 29, 30, 31, 32, 33, 34, 39, 44, 46, 50, 55], [], [2]),
    new PokeData("ディグダ", 50, 10, 55, 25, 35, 45, 95, 4, null, 255, 81, 8, [[51, 1, 26]], null, [[1, 11], [5, 46], [9, 223], [17, 92], [25, 29], [33, 164], [41, 90], [49, 91]], [[1, 11], [15, 46], [19, 92], [24, 29], [31, 164], [40, 90]], [3, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 34, 35, 36, 44, 45, 46, 51], [6, 8, 9, 10, 20, 26, 27, 28, 31, 32, 34, 44, 48, 50, 51], [104, 186, 229, 247, 252], [4]),
    new PokeData("ダグトリオ", 51, 35, 80, 50, 50, 70, 120, 4, null, 50, 153, 8, [], 50, [[1, 162], [1, 11], [1, 46], [1, 223], [5, 46], [9, 223], [17, 92], [25, 29], [37, 164], [49, 90], [61, 91]], [[1, 11], [1, 46], [1, 92], [15, 46], [19, 92], [24, 29], [35, 164], [47, 90]], [3, 6, 8, 10, 11, 13, 15, 17, 20, 21, 26, 27, 28, 31, 32, 34, 35, 36, 44, 45, 46, 51], [6, 8, 9, 10, 15, 20, 26, 27, 28, 31, 32, 34, 44, 48, 50, 51], [], [4]),
    new PokeData("ニャース", 52, 40, 45, 35, 40, 40, 90, 0, null, 255, 69, 8, [[53, 1, 28]], null, [[1, 11], [1, 46], [11, 45], [20, 7], [28, 186], [35, 104], [41, 155], [46, 164]], [[1, 11], [1, 46], [12, 45], [17, 7], [24, 104], [33, 155], [44, 164]], [2, 3, 6, 7, 9, 10, 11, 13, 16, 17, 20, 21, 23, 25, 27, 30, 31, 32, 34, 35, 39, 40, 42, 43, 44, 45, 46, 50, 59], [6, 8, 9, 10, 11, 12, 16, 20, 24, 25, 31, 32, 34, 39, 40, 44, 50], [96, 134, 181, 205], [4]),
    new PokeData("ペルシアン", 53, 65, 70, 60, 65, 65, 115, 0, null, 90, 148, 8, [], 52, [[1, 11], [1, 46], [1, 45], [11, 45], [20, 7], [29, 186], [38, 104], [46, 155], [53, 164]], [[1, 11], [1, 46], [1, 45], [1, 104], [12, 45], [17, 7], [24, 104], [37, 155], [51, 164]], [2, 3, 5, 6, 7, 9, 10, 11, 13, 15, 16, 17, 20, 21, 23, 25, 27, 30, 31, 32, 34, 35, 39, 40, 42, 43, 44, 45, 46, 50, 59], [6, 8, 9, 10, 11, 12, 15, 16, 20, 24, 25, 31, 32, 34, 39, 40, 44, 50], [], [4]),
    new PokeData("コダック", 54, 50, 52, 48, 65, 50, 55, 10, null, 190, 80, 8, [[55, 1, 33]], null, [[1, 11], [5, 40], [10, 51], [16, 94], [23, 104], [31, 245], [40, 155], [50, 57]], [[1, 11], [28, 40], [31, 51], [36, 94], [43, 155], [52, 57]], [1, 2, 3, 6, 8, 9, 10, 13, 14, 16, 17, 18, 20, 21, 23, 27, 28, 31, 32, 33, 34, 35, 39, 44, 45, 53, 54, 55, 56, 57, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 28, 31, 32, 34, 39, 40, 44, 50, 53, 54], [59, 61, 95, 96, 114, 194, 239, 249], [1, 4]),
    new PokeData("ゴルダック", 55, 80, 82, 78, 95, 80, 85, 10, null, 75, 174, 8, [], 54, [[1, 11], [1, 40], [1, 51], [1, 94], [5, 40], [10, 51], [16, 94], [23, 104], [31, 245], [44, 155], [58, 57]], [[1, 11], [1, 40], [1, 51], [28, 40], [31, 51], [39, 94], [48, 155], [59, 57]], [1, 2, 3, 6, 8, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 23, 27, 28, 31, 32, 33, 34, 35, 39, 44, 45, 49, 53, 54, 55, 56, 57, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 31, 32, 34, 39, 40, 44, 50, 53, 54], [], [1, 4]),
    new PokeData("マンキー", 56, 40, 80, 35, 35, 45, 70, 1, null, 190, 74, 8, [[57, 1, 28]], null, [[1, 11], [1, 44], [9, 68], [15, 3], [21, 155], [27, 117], [33, 70], [39, 239], [45, 104], [51, 38]], [[1, 11], [1, 44], [9, 68], [15, 3], [21, 155], [27, 117], [33, 70], [39, 38], [45, 104]], [1, 2, 3, 6, 8, 9, 10, 11, 13, 17, 20, 21, 23, 25, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 48, 54, 59], [1, 5, 6, 8, 9, 10, 16, 17, 18, 19, 20, 24, 25, 28, 31, 32, 34, 35, 39, 40, 44, 48, 50, 54], [69, 97, 158, 180, 194, 252], [4]),
    new PokeData("オコリザル", 57, 65, 105, 60, 60, 70, 95, 1, null, 75, 149, 8, [], 56, [[1, 11], [1, 44], [1, 68], [1, 100], [9, 68], [15, 3], [21, 155], [27, 117], [28, 100], [36, 70], [45, 239], [54, 104], [63, 38]], [[1, 11], [1, 44], [1, 68], [1, 3], [9, 68], [15, 3], [21, 155], [27, 117], [28, 100], [37, 70], [46, 38], [45, 104]], [1, 2, 3, 6, 8, 9, 10, 11, 13, 15, 17, 20, 21, 23, 25, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 48, 54, 59], [1, 5, 6, 8, 9, 10, 15, 16, 17, 18, 19, 20, 24, 25, 28, 31, 32, 34, 35, 39, 40, 44, 48, 50, 54], [], [4]),
    new PokeData("ガーディ", 58, 55, 70, 45, 70, 50, 60, 9, null, 190, 91, 4, [[59, 2, 22]], null, [[1, 45], [1, 47], [9, 53], [18, 44], [26, 37], [34, 173], [42, 98], [50, 54]], [[1, 45], [1, 47], [18, 53], [23, 44], [30, 37], [39, 98], [50, 54]], [2, 3, 5, 6, 8, 10, 11, 13, 17, 20, 21, 23, 24, 27, 28, 32, 34, 35, 38, 39, 44, 45, 58], [6, 8, 9, 10, 20, 23, 28, 31, 32, 33, 34, 38, 39, 40, 44, 50], [35, 38, 84, 220, 243], [4]),
    new PokeData("ウインディ", 59, 90, 110, 80, 100, 80, 95, 9, null, 75, 213, 4, [], 58, [[1, 47], [1, 44], [1, 37], [1, 173], [50, 246]], [[1, 47], [1, 53], [1, 44], [1, 37]], [2, 3, 5, 6, 8, 10, 11, 13, 15, 17, 20, 21, 23, 24, 27, 28, 32, 34, 35, 38, 39, 44, 45, 58], [6, 8, 9, 10, 15, 20, 23, 28, 30, 31, 32, 33, 34, 38, 39, 40, 44, 50], [], [4]),
    new PokeData("ニョロモ", 60, 40, 50, 40, 40, 40, 90, 10, null, 255, 77, 8, [[61, 1, 25]], null, [[1, 146], [7, 96], [13, 56], [19, 4], [25, 241], [31, 35], [37, 188], [43, 57]], [[1, 146], [16, 96], [19, 56], [25, 4], [31, 35], [38, 134], [45, 57]], [2, 3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 27, 29, 32, 34, 35, 40, 44, 45, 46, 53, 56, 57, 60], [6, 8, 9, 10, 11, 12, 13, 14, 20, 29, 31, 32, 34, 40, 44, 46, 50, 53], [55, 62, 115, 151, 171], [1]),
    new PokeData("ニョロゾ", 61, 65, 65, 65, 50, 50, 90, 10, null, 120, 131, 8, [[62, 2, 24], [186, 3, 82]], 60, [[1, 146], [1, 96], [1, 56], [7, 96], [13, 56], [19, 4], [27, 241], [35, 35], [43, 188], [51, 57]], [[1, 146], [1, 96], [1, 56], [16, 96], [19, 56], [26, 4], [33, 35], [41, 134], [49, 57]], [2, 3, 6, 8, 10, 13, 14, 16, 17, 18, 20, 21, 26, 27, 29, 31, 32, 33, 34, 35, 40, 43, 44, 45, 46, 53, 54, 56, 57, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 26, 27, 29, 31, 32, 34, 35, 40, 44, 46, 50, 53, 54], [], [1]),
    new PokeData("ニョロボン", 62, 90, 85, 95, 70, 90, 70, 10, 1, 45, 185, 8, [], 61, [[1, 56], [1, 96], [1, 4], [1, 67], [35, 67], [51, 171]], [[1, 96], [1, 56], [1, 4], [1, 35], [16, 96], [19, 56]], [1, 2, 3, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 26, 27, 29, 31, 32, 33, 34, 35, 40, 43, 44, 45, 46, 53, 54, 56, 57, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 26, 27, 29, 31, 32, 34, 35, 40, 44, 46, 50, 53, 54], [], [1]),
    new PokeData("ケーシィ", 63, 25, 20, 15, 105, 55, 90, 13, null, 200, 73, 4, [[64, 1, 16]], null, [[1, 101]], [[1, 101]], [1, 2, 3, 6, 7, 9, 10, 11, 13, 17, 18, 20, 21, 27, 29, 30, 32, 33, 34, 35, 41, 42, 44, 45, 46, 48, 50, 55], [1, 5, 6, 8, 9, 10, 17, 18, 19, 20, 29, 30, 31, 32, 33, 34, 35, 40, 44, 45, 46, 49, 50, 55], [113, 114, 228], [7]),
    new PokeData("ユンゲラー", 64, 40, 35, 30, 120, 70, 105, 13, null, 100, 145, 4, [[65, 3, 255]], 63, [[1, 101], [1, 135], [1, 94], [16, 94], [18, 51], [21, 61], [26, 106], [31, 249], [38, 95], [45, 116]], [[1, 101], [1, 135], [16, 94], [20, 51], [27, 61], [31, 106], [38, 95], [42, 116]], [1, 2, 3, 6, 7, 9, 10, 11, 13, 17, 18, 20, 21, 27, 28, 29, 30, 32, 33, 34, 35, 41, 42, 44, 45, 46, 48, 50, 55], [1, 5, 6, 8, 9, 10, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 40, 44, 45, 46, 49, 50, 55], [], [7]),
    new PokeData("フーディン", 65, 55, 50, 45, 135, 85, 120, 13, null, 50, 186, 4, [], 64, [[1, 101], [1, 135], [1, 94], [16, 94], [18, 51], [21, 61], [26, 106], [31, 249], [38, 95], [45, 116]], [[1, 101], [1, 135], [16, 94], [20, 51], [27, 61], [31, 106], [38, 95], [42, 116]], [1, 2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 18, 20, 21, 27, 28, 29, 30, 32, 33, 34, 35, 41, 42, 44, 45, 46, 48, 50, 55], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 40, 44, 45, 46, 49, 50, 55], [], [7]),
    new PokeData("ワンリキー", 66, 70, 80, 50, 35, 35, 35, 1, null, 180, 88, 4, [[67, 1, 28]], null, [[1, 68], [1, 44], [7, 117], [13, 3], [19, 70], [25, 194], [31, 234], [37, 239], [43, 185], [49, 67]], [[1, 3], [20, 68], [25, 44], [32, 117], [39, 70], [46, 67]], [1, 2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 33, 34, 35, 38, 41, 43, 44, 45, 46, 48, 54, 58], [1, 5, 6, 8, 9, 10, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 35, 38, 40, 44, 48, 50, 54], [28, 97, 114, 228], [7]),
    new PokeData("ゴーリキー", 67, 80, 100, 70, 50, 60, 45, 1, null, 90, 146, 4, [[68, 3, 255]], 66, [[1, 68], [1, 44], [1, 117], [8, 117], [15, 3], [19, 70], [25, 194], [34, 234], [43, 239], [52, 185], [61, 67]], [[1, 3], [1, 68], [1, 44], [20, 68], [25, 44], [36, 117], [44, 70], [52, 67]], [1, 2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 33, 34, 35, 38, 41, 43, 44, 45, 46, 48, 54, 58], [1, 5, 6, 8, 9, 10, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 35, 38, 40, 44, 48, 50, 54], [], [7]),
    new PokeData("カイリキー", 68, 90, 130, 80, 65, 85, 55, 1, null, 45, 193, 4, [], 67, [[1, 68], [1, 44], [1, 117], [8, 117], [15, 3], [19, 70], [25, 194], [34, 234], [43, 239], [52, 185], [61, 67]], [[1, 3], [1, 68], [1, 44], [20, 68], [25, 44], [36, 117], [44, 70], [52, 67]], [1, 2, 3, 6, 8, 10, 11, 13, 15, 17, 20, 21, 26, 27, 28, 31, 32, 33, 34, 35, 38, 41, 43, 44, 45, 46, 48, 54, 58], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 35, 38, 40, 44, 48, 50, 54], [], [7]),
    new PokeData("マダツボミ", 69, 50, 75, 35, 70, 30, 40, 11, 3, 255, 84, 8, [[70, 1, 21]], null, [[1, 23], [6, 75], [11, 36], [15, 80], [17, 78], [19, 79], [23, 52], [30, 231], [37, 76], [45, 22]], [[1, 23], [1, 75], [13, 36], [15, 78], [18, 80], [21, 79], [26, 52], [33, 76], [42, 22]], [3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [3, 6, 9, 10, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [15, 116, 142, 228, 236], [6]),
    new PokeData("ウツドン", 70, 65, 90, 50, 85, 45, 55, 11, 3, 120, 151, 8, [[71, 2, 34]], 69, [[1, 23], [1, 75], [1, 36], [6, 75], [11, 36], [15, 80], [17, 78], [19, 79], [24, 52], [33, 231], [42, 76], [54, 22]], [[1, 23], [1, 75], [1, 36], [13, 36], [15, 78], [18, 80], [23, 79], [29, 52], [38, 76], [49, 22]], [3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [3, 6, 9, 10, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [], [6]),
    new PokeData("ウツボット", 71, 80, 105, 65, 100, 60, 70, 11, 3, 45, 191, 8, [], 70, [[1, 23], [1, 80], [1, 231], [1, 76]], [[1, 80], [1, 79], [1, 52], [1, 76], [13, 36], [15, 78], [18, 80]], [3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [3, 6, 8, 9, 10, 15, 20, 21, 22, 31, 32, 33, 34, 44, 50, 51], [], [6]),
    new PokeData("メノクラゲ", 72, 40, 40, 35, 50, 100, 70, 10, 3, 190, 105, 8, [[73, 1, 30]], null, [[1, 41], [6, 49], [12, 133], [19, 52], [25, 62], [30, 36], [36, 113], [43, 104], [49, 57]], [[1, 52], [7, 49], [13, 36], [18, 41], [22, 56], [27, 133], [33, 113], [40, 104], [48, 57]], [3, 6, 10, 13, 14, 16, 17, 18, 19, 20, 21, 27, 32, 34, 35, 36, 44, 45, 51, 53, 56, 60], [3, 6, 9, 10, 11, 12, 13, 14, 20, 21, 31, 32, 33, 34, 40, 44, 50, 51, 53], [63, 115, 220, 230, 244], [8]),
    new PokeData("ドククラゲ", 73, 80, 70, 65, 80, 120, 100, 10, 3, 60, 205, 8, [], 72, [[1, 41], [1, 49], [1, 133], [6, 49], [12, 133], [19, 52], [25, 62], [30, 36], [38, 113], [47, 104], [55, 57]], [[1, 52], [1, 49], [1, 36], [7, 49], [13, 36], [18, 41], [22, 56], [27, 133], [35, 113], [43, 104], [50, 57]], [3, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 32, 34, 35, 36, 44, 45, 51, 53, 56, 60], [3, 6, 9, 10, 11, 12, 13, 14, 15, 20, 21, 31, 32, 33, 34, 40, 44, 50, 51, 53], [], [8]),
    new PokeData("イシツブテ", 74, 40, 80, 100, 30, 30, 20, 5, 4, 255, 86, 8, [[75, 1, 25]], null, [[1, 34], [6, 112], [11, 89], [16, 223], [21, 121], [26, 107], [31, 206], [36, 90], [41, 154]], [[1, 34], [11, 112], [16, 89], [21, 121], [26, 107], [31, 90], [36, 154]], [1, 2, 3, 4, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 34, 35, 37, 38, 40, 44, 45, 48, 54, 58], [1, 6, 8, 9, 10, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 35, 36, 38, 44, 47, 48, 50, 54], [6, 158], [9]),
    new PokeData("ゴローン", 75, 55, 95, 115, 45, 45, 35, 5, 4, 120, 134, 8, [[76, 3, 255]], 74, [[1, 34], [1, 112], [1, 89], [6, 112], [11, 89], [16, 223], [21, 121], [27, 107], [34, 206], [41, 90], [48, 154]], [[1, 34], [1, 112], [11, 112], [16, 89], [21, 121], [29, 107], [36, 90], [43, 154]], [1, 2, 3, 4, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 34, 35, 37, 38, 40, 44, 45, 48, 54, 58], [1, 6, 8, 9, 10, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 35, 36, 38, 44, 47, 48, 50, 54], [], [9]),
    new PokeData("ゴローニャ", 76, 80, 110, 130, 55, 65, 45, 5, 4, 45, 177, 8, [], 75, [[1, 34], [1, 112], [1, 89], [1, 223], [6, 112], [11, 89], [16, 223], [21, 121], [27, 107], [34, 206], [41, 90], [48, 154]], [[1, 34], [1, 112], [11, 112], [16, 89], [21, 121], [29, 107], [36, 90], [43, 154]], [1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 15, 17, 20, 21, 26, 27, 28, 31, 32, 34, 35, 37, 38, 40, 44, 45, 48, 49, 54, 58], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 35, 36, 38, 44, 47, 48, 50, 54], [], [9]),
    new PokeData("ポニータ", 77, 50, 85, 55, 65, 65, 90, 9, null, 190, 152, 8, [[78, 1, 40]], null, [[1, 34], [4, 46], [8, 40], [13, 53], [19, 24], [26, 84], [34, 37], [43, 98], [53, 127]], [[1, 53], [30, 40], [32, 24], [35, 46], [39, 84], [43, 37], [48, 98]], [2, 3, 6, 10, 11, 13, 17, 20, 21, 23, 27, 32, 34, 35, 38, 39, 44, 45, 58], [6, 7, 8, 9, 10, 20, 31, 32, 33, 34, 38, 39, 40, 44, 50], [25, 38, 96, 99, 173, 205], [4]),
    new PokeData("ギャロップ", 78, 65, 100, 70, 80, 80, 105, 9, null, 60, 192, 8, [], 77, [[1, 34], [1, 46], [1, 40], [1, 53], [4, 46], [8, 40], [13, 53], [19, 24], [26, 84], [34, 37], [40, 32], [47, 98], [61, 127]], [[1, 53], [1, 40], [1, 24], [1, 46], [30, 40], [32, 24], [35, 46], [39, 84], [47, 37], [55, 98]], [2, 3, 6, 10, 11, 13, 15, 17, 20, 21, 23, 27, 32, 34, 35, 38, 39, 44, 45, 58], [6, 7, 8, 9, 10, 15, 20, 31, 32, 33, 34, 38, 39, 40, 44, 50], [], [4]),
    new PokeData("ヤドン", 79, 90, 65, 65, 40, 40, 15, 10, 13, 190, 99, 8, [[80, 1, 37], [199, 3, 82]], null, [[1, 175], [1, 34], [6, 46], [15, 56], [20, 94], [29, 51], [34, 30], [43, 134], [48, 95]], [[1, 94], [18, 51], [22, 30], [27, 46], [33, 56], [40, 134], [48, 95]], [2, 3, 6, 7, 9, 10, 11, 13, 14, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 34, 35, 38, 39, 42, 44, 45, 50, 53, 54, 55, 58, 60], [6, 8, 9, 10, 11, 12, 13, 14, 16, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 44, 45, 46, 49, 50, 53, 54, 55], [24, 188, 220, 249], [0, 1]),
    new PokeData("ヤドラン", 80, 95, 75, 110, 100, 80, 30, 10, 13, 75, 164, 8, [], 79, [[1, 175], [1, 34], [1, 46], [1, 56], [6, 46], [15, 56], [20, 94], [29, 51], [34, 30], [37, 111], [46, 134], [54, 95]], [[1, 94], [1, 51], [1, 30], [18, 51], [22, 30], [27, 46], [33, 56], [37, 111], [44, 134], [55, 95]], [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 42, 44, 45, 49, 50, 53, 54, 55, 58, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 44, 45, 46, 49, 50, 53, 54, 55], [], [0, 1]),
    new PokeData("コイル", 81, 25, 35, 70, 95, 55, 45, 12, 8, 190, 89, null, [[82, 1, 30]], null, [[1, 34], [6, 85], [11, 49], [16, 50], [21, 87], [27, 200], [33, 130], [39, 104], [45, 193]], [[1, 34], [21, 50], [25, 85], [29, 49], [35, 87], [41, 130], [47, 104]], [3, 4, 6, 7, 10, 13, 17, 18, 20, 21, 25, 27, 32, 34, 35, 39, 44, 55, 59], [6, 9, 10, 20, 24, 25, 30, 31, 32, 33, 34, 39, 44, 45, 50, 55], [], [13]),
    new PokeData("レアコイル", 82, 50, 60, 95, 120, 70, 70, 12, 8, 60, 161, null, [], 81, [[1, 34], [1, 85], [1, 49], [1, 50], [6, 85], [11, 49], [16, 50], [21, 87], [27, 200], [35, 162], [43, 104], [53, 193]], [[1, 34], [1, 50], [1, 85], [21, 50], [25, 85], [29, 49], [38, 87], [46, 130], [54, 104]], [3, 4, 6, 7, 10, 13, 15, 17, 18, 20, 21, 25, 27, 32, 34, 35, 39, 44, 55, 59], [6, 9, 10, 15, 20, 24, 25, 30, 31, 32, 33, 34, 39, 44, 45, 50, 55], [], [13]),
    new PokeData("カモネギ", 83, 52, 65, 55, 58, 62, 60, 0, 2, 45, 94, 8, [], null, [[1, 65], [7, 29], [13, 44], [19, 32], [25, 15], [31, 98], [37, 164], [44, 207]], [[1, 65], [1, 29], [7, 44], [15, 32], [23, 15], [31, 98], [39, 164]], [2, 3, 6, 9, 10, 11, 13, 17, 20, 21, 23, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 47, 51, 52], [2, 3, 4, 6, 8, 9, 10, 20, 31, 32, 33, 34, 39, 40, 44, 50, 51, 52], [17, 99, 120, 176, 194], [3, 4]),
    new PokeData("ドードー", 84, 35, 85, 45, 35, 35, 75, 0, 2, 190, 96, 8, [[85, 1, 31]], null, [[1, 65], [1, 46], [9, 229], [13, 32], [21, 162], [25, 100], [33, 66], [37, 98]], [[1, 65], [20, 46], [24, 32], [30, 66], [36, 100], [40, 162], [44, 98]], [3, 6, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 39, 44, 45, 46, 47, 52], [4, 6, 8, 9, 10, 20, 31, 32, 33, 34, 40, 43, 44, 49, 50, 52], [49, 99, 115, 176, 186], [3]),
    new PokeData("ドードリオ", 85, 60, 110, 70, 60, 60, 100, 0, 2, 45, 158, 8, [], 84, [[1, 65], [1, 46], [1, 229], [1, 32], [9, 229], [13, 32], [21, 162], [25, 100], [38, 66], [47, 98]], [[1, 65], [1, 46], [1, 32], [20, 46], [24, 32], [30, 66], [39, 100], [45, 162], [51, 98]], [3, 6, 10, 11, 13, 15, 17, 20, 21, 27, 31, 32, 34, 35, 39, 44, 45, 46, 47, 52], [4, 6, 8, 9, 10, 15, 20, 31, 32, 33, 34, 40, 43, 44, 49, 50, 52], [], [3]),
    new PokeData("パウワウ", 86, 65, 45, 55, 45, 70, 45, 10, null, 190, 100, 8, [[87, 1, 34]], null, [[1, 30], [5, 46], [16, 63], [21, 157], [32, 37], [37, 59], [48, 220]], [[1, 30], [30, 46], [35, 63], [40, 157], [45, 37], [50, 59]], [2, 3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 27, 32, 34, 35, 44, 45, 53, 56, 57, 60], [6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 20, 31, 32, 34, 40, 44, 50, 53, 54], [22, 51, 65, 123, 196, 228], [1, 4]),
    new PokeData("ジュゴン", 87, 90, 70, 80, 70, 95, 70, 10, 14, 75, 176, 8, [], 86, [[1, 30], [1, 46], [1, 63], [5, 46], [16, 63], [21, 157], [32, 37], [43, 59], [60, 220]], [[1, 30], [1, 46], [1, 63], [30, 46], [35, 63], [44, 157], [50, 37], [56, 59]], [2, 3, 6, 10, 13, 14, 15, 16, 17, 18, 20, 21, 27, 32, 34, 35, 44, 45, 53, 56, 57, 60], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 31, 32, 34, 40, 44, 50, 53, 54], [], [1, 4]),
    new PokeData("ベトベター", 88, 80, 80, 50, 40, 50, 25, 3, null, 190, 90, 8, [[89, 1, 38]], null, [[1, 140], [1, 2], [5, 107], [10, 51], [16, 125], [23, 108], [31, 104], [40, 152], [50, 189]], [[1, 2], [1, 51], [30, 140], [33, 108], [37, 125], [42, 107], [48, 104], [55, 152]], [1, 3, 6, 7, 10, 11, 13, 17, 19, 20, 21, 25, 27, 31, 32, 33, 34, 35, 36, 38, 41, 44, 45, 46, 48, 58, 59], [6, 8, 20, 21, 24, 25, 31, 32, 34, 36, 38, 44, 47, 50], [115, 123, 213], [10]),
    new PokeData("ベトベトン", 89, 105, 105, 75, 65, 100, 50, 3, null, 75, 157, 8, [], 88, [[1, 140], [1, 2], [1, 107], [33, 107], [37, 51], [45, 125], [23, 108], [31, 104], [45, 152], [60, 189]], [[1, 2], [1, 51], [1, 140], [30, 140], [33, 108], [37, 125], [45, 107], [53, 104], [60, 152]], [1, 3, 6, 7, 10, 11, 13, 15, 17, 19, 20, 21, 25, 27, 31, 32, 33, 34, 35, 36, 38, 41, 44, 45, 46, 48, 58, 59], [6, 8, 15, 20, 21, 24, 25, 31, 32, 34, 36, 38, 44, 47, 50], [], [10]),
    new PokeData("シェルダー", 90, 30, 65, 100, 45, 25, 40, 10, null, 190, 97, 8, [[91, 2, 24]], null, [[1, 34], [1, 111], [9, 49], [17, 63], [25, 183], [33, 44], [41, 129], [49, 59]], [[1, 34], [1, 111], [18, 49], [23, 129], [30, 63], [39, 44], [50, 59]], [3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 27, 32, 34, 35, 39, 44, 45, 53, 56, 60], [6, 9, 10, 11, 12, 13, 14, 20, 30, 31, 32, 33, 34, 36, 39, 44, 47, 49, 50, 53], [37, 62, 104, 113, 230], [8]),
    new PokeData("パルシェン", 91, 50, 95, 180, 85, 45, 70, 10, 14, 60, 203, 8, [], 90, [[1, 111], [1, 49], [1, 63], [1, 183], [33, 192], [41, 132]], [[1, 111], [1, 49], [1, 129], [1, 63], [50, 132]], [3, 6, 10, 13, 14, 15, 16, 17, 18, 20, 21, 27, 32, 34, 35, 39, 44, 45, 53, 56, 60], [6, 9, 10, 11, 12, 13, 14, 15, 20, 30, 31, 32, 33, 34, 36, 39, 44, 47, 49, 50, 53], [], [8]),
    new PokeData("ゴース", 92, 30, 35, 30, 100, 35, 80, 7, 3, 190, 95, 8, [[93, 1, 25]], null, [[1, 96], [1, 123], [8, 181], [13, 213], [16, 175], [21, 102], [28, 110], [33, 139], [36, 195]], [[1, 123], [1, 110], [1, 102], [27, 96], [35, 139]], [3, 6, 7, 9, 10, 11, 13, 17, 18, 19, 20, 21, 25, 27, 29, 30, 32, 34, 35, 42, 44, 45, 46, 50, 59], [6, 20, 21, 24, 25, 29, 31, 32, 34, 36, 42, 44, 46, 47, 50], [115, 150, 196], [10]),
    new PokeData("ゴースト", 93, 45, 50, 45, 115, 55, 95, 7, 3, 90, 126, 8, [[94, 3, 255]], 92, [[1, 96], [1, 123], [1, 181], [8, 181], [13, 213], [16, 175], [21, 102], [31, 110], [39, 139], [48, 195]], [[1, 123], [1, 110], [1, 102], [29, 96], [38, 139]], [3, 6, 7, 9, 10, 11, 13, 17, 18, 19, 20, 21, 25, 27, 29, 30, 32, 34, 35, 42, 44, 45, 46, 50, 59], [6, 20, 21, 24, 25, 29, 31, 32, 34, 36, 42, 44, 46, 47, 50], [], [10]),
    new PokeData("ゲンガー", 94, 60, 65, 60, 130, 75, 110, 7, 3, 45, 190, 8, [], 93, [[1, 96], [1, 123], [1, 181], [8, 181], [13, 213], [16, 175], [21, 102], [31, 110], [39, 139], [48, 195]], [[1, 123], [1, 110], [1, 102], [29, 96], [38, 139]], [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 25, 27, 29, 30, 32, 33, 34, 35, 41, 42, 44, 45, 46, 48, 50, 54, 59], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 21, 24, 25, 29, 31, 32, 34, 35, 36, 40, 42, 44, 46, 47, 50, 54], [], [10]),
    new PokeData("イワーク", 95, 35, 45, 160, 30, 45, 70, 5, 4, 45, 108, 8, [[208, 3, 143]], null, [[1, 34], [1, 104], [10, 21], [14, 89], [23, 107], [27, 100], [36, 202], [40, 22]], [[1, 34], [1, 104], [15, 21], [19, 89], [25, 100], [33, 22], [43, 107]], [2, 3, 5, 6, 8, 10, 11, 13, 17, 20, 21, 23, 26, 27, 28, 31, 32, 34, 35, 37, 44, 45, 54], [6, 8, 9, 10, 20, 26, 27, 28, 31, 32, 34, 36, 40, 44, 47, 48, 50, 54], [158, 176], [9]),
    new PokeData("スリープ", 96, 60, 48, 45, 43, 90, 42, 13, null, 190, 102, 8, [[97, 1, 26]], null, [[1, 2], [1, 96], [10, 51], [18, 94], [25, 30], [31, 140], [36, 97], [40, 95], [43, 245], [45, 249]], [[1, 2], [1, 96], [12, 51], [17, 94], [24, 30], [29, 140], [32, 95], [37, 97]], [1, 2, 3, 6, 7, 9, 10, 11, 13, 17, 18, 20, 21, 27, 29, 30, 32, 33, 34, 35, 41, 42, 44, 45, 48, 50, 55], [1, 5, 6, 8, 9, 10, 17, 18, 19, 20, 29, 30, 31, 32, 33, 34, 35, 40, 42, 44, 45, 46, 49, 50, 55], [113, 114], [7]),
    new PokeData("スリーパー", 97, 85, 73, 70, 73, 115, 67, 13, null, 75, 165, 8, [], 96, [[1, 2], [1, 96], [1, 51], [1, 94], [10, 51], [18, 94], [25, 30], [33, 140], [40, 97], [49, 95], [55, 245], [60, 249]], [[1, 2], [1, 96], [1, 51], [1, 94], [12, 51], [17, 94], [24, 30], [33, 140], [37, 95], [43, 97]], [1, 2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 18, 20, 21, 27, 29, 30, 32, 33, 34, 35, 41, 42, 44, 45, 48, 50, 55], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 29, 30, 31, 32, 33, 34, 35, 40, 42, 44, 45, 46, 49, 50, 55], [], [7]),
    new PokeData("クラブ", 98, 30, 105, 90, 25, 25, 50, 10, null, 225, 115, 8, [[99, 1, 28]], null, [[1, 146], [5, 44], [12, 12], [16, 107], [23, 24], [27, 13], [34, 183], [41, 153]], [[1, 146], [1, 44], [20, 12], [25, 13], [30, 24], [35, 153], [40, 107]], [3, 6, 8, 10, 13, 14, 16, 17, 18, 20, 21, 27, 31, 32, 34, 35, 44, 45, 46, 49, 51, 53, 54, 56, 60], [3, 6, 8, 9, 10, 11, 12, 13, 14, 20, 31, 32, 34, 44, 50, 51, 53, 54], [22, 92, 115, 134, 176], [8]),
    new PokeData("キングラー", 99, 55, 130, 115, 50, 50, 75, 10, null, 60, 206, 8, [], 98, [[1, 146], [1, 44], [1, 12], [5, 44], [12, 12], [16, 107], [23, 24], [27, 13], [38, 183], [49, 153]], [[1, 146], [1, 44], [1, 12], [20, 12], [25, 13], [34, 24], [42, 153], [49, 107]], [3, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 27, 31, 32, 34, 35, 44, 45, 46, 49, 51, 53, 54, 56, 60], [3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 31, 32, 34, 44, 50, 51, 53, 54], [], [8]),
    new PokeData("ビリリダマ", 100, 40, 30, 50, 55, 55, 100, 12, null, 190, 103, null, [[101, 1, 30]], null, [[1, 34], [9, 104], [17, 50], [23, 121], [29, 206], [33, 114], [37, 130], [39, 154], [41, 244]], [[1, 34], [1, 104], [17, 50], [22, 121], [29, 114], [36, 130], [43, 154]], [2, 3, 4, 6, 7, 10, 13, 17, 18, 20, 21, 25, 27, 32, 34, 35, 39, 44, 55, 59], [6, 9, 20, 24, 25, 30, 31, 32, 33, 34, 36, 39, 44, 45, 47, 50, 55], [], [13]),
    new PokeData("マルマイン", 101, 60, 50, 70, 80, 80, 140, 12, null, 60, 150, null, [], 100, [[1, 34], [1, 104], [1, 50], [1, 121], [9, 104], [17, 50], [23, 121], [29, 206], [34, 114], [40, 130], [44, 154], [48, 244]], [[1, 34], [1, 104], [1, 50], [17, 50], [22, 121], [29, 114], [40, 130], [50, 154]], [2, 3, 4, 6, 7, 10, 13, 15, 17, 18, 20, 21, 25, 27, 32, 34, 35, 39, 44, 55, 59], [6, 9, 15, 20, 24, 25, 30, 31, 32, 33, 34, 36, 39, 40, 44, 45, 47, 50, 55], [], [13]),
    new PokeData("タマタマ", 102, 60, 40, 80, 60, 45, 40, 11, 13, 90, 98, 8, [[103, 2, 34]], null, [[1, 141], [1, 96], [7, 116], [13, 74], [19, 94], [25, 79], [31, 78], [37, 80], [43, 77]], [[1, 141], [1, 96], [25, 116], [28, 74], [32, 79], [37, 78], [42, 77], [48, 80]], [3, 4, 6, 9, 10, 11, 13, 17, 19, 20, 21, 22, 27, 29, 32, 34, 35, 36, 42, 44, 45, 46, 50, 54, 55], [6, 9, 10, 20, 29, 30, 31, 32, 33, 34, 36, 37, 44, 46, 47, 50], [73, 116, 236, 237, 247], [6]),
    new PokeData("ナッシー", 103, 95, 95, 85, 125, 65, 55, 11, 13, 45, 212, 8, [], 102, [[1, 141], [1, 96], [1, 94], [19, 24], [31, 122]], [[1, 141], [1, 96], [28, 24]], [2, 3, 4, 6, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 27, 29, 32, 34, 35, 36, 42, 44, 45, 46, 50, 54, 55], [6, 9, 10, 15, 20, 21, 22, 29, 30, 31, 32, 33, 34, 36, 37, 44, 46, 47, 50, 54], [], [6]),
    new PokeData("カラカラ", 104, 50, 50, 95, 40, 50, 35, 4, null, 190, 87, 8, [[105, 1, 28]], null, [[1, 46], [5, 40], [9, 126], [13, 30], [17, 44], [21, 117], [25, 156], [29, 100], [33, 207], [37, 38], [41, 199]], [[1, 46], [10, 126], [13, 40], [18, 30], [25, 44], [31, 117], [38, 38], [43, 156], [46, 100]], [1, 2, 3, 6, 8, 10, 11, 13, 14, 16, 17, 20, 21, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 41, 43, 44, 45, 46, 48, 54, 58, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 38, 40, 44, 50, 54], [15, 104, 131, 158, 188, 196, 247], [0]),
    new PokeData("ガラガラ", 105, 60, 80, 110, 50, 80, 45, 4, null, 75, 124, 8, [], 104, [[1, 46], [1, 40], [1, 126], [1, 30], [5, 40], [9, 126], [13, 30], [17, 44], [21, 117], [25, 156], [32, 100], [39, 207], [46, 38], [53, 199]], [[1, 126], [1, 40], [10, 126], [13, 40], [18, 30], [25, 44], [33, 117], [41, 38], [48, 156], [55, 100]], [1, 2, 3, 6, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 23, 26, 27, 28, 31, 32, 34, 35, 37, 38, 41, 43, 44, 45, 46, 48, 54, 58, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 26, 27, 28, 31, 32, 34, 38, 40, 44, 50, 54], [], [0]),
    new PokeData("サワムラー", 106, 50, 120, 53, 35, 110, 87, 1, null, 45, 139, 0, [], 236, [[1, 25], [6, 97], [11, 28], [16, 27], [21, 117], [26, 137], [31, 171], [36, 194], [41, 204], [46, 26], [51, 180]], [[1, 25], [1, 97], [33, 28], [38, 27], [43, 117], [48, 137], [53, 26]], [1, 2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 54], [1, 5, 6, 8, 9, 10, 17, 18, 19, 20, 31, 32, 34, 35, 39, 40, 44, 50, 54], [], [7]),
    new PokeData("エビワラー", 107, 50, 105, 79, 35, 110, 76, 1, null, 45, 140, 0, [], 236, [[1, 5], [7, 98], [13, 229], [26, 10], [26, 9], [26, 8], [32, 184], [38, 6], [44, 198], [50, 69]], [[1, 5], [1, 98], [33, 8], [38, 9], [43, 10], [48, 6], [53, 69]], [1, 2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 27, 31, 32, 33, 34, 35, 39, 41, 43, 44, 45, 46, 48, 54], [1, 5, 6, 8, 9, 10, 17, 18, 19, 20, 31, 32, 34, 35, 39, 40, 44, 50, 54], [], [7]),
    new PokeData("ベロリンガ", 108, 90, 55, 75, 60, 75, 30, 0, null, 45, 127, 8, [], null, [[1, 123], [7, 49], [13, 112], [19, 24], [25, 36], [31, 51], [37, 22], [43, 104]], [[1, 36], [1, 49], [7, 24], [15, 51], [23, 112], [31, 22], [39, 104]], [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 44, 45, 46, 48, 50, 51, 53, 54, 58, 59, 60], [1, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 24, 25, 26, 27, 31, 32, 34, 38, 40, 44, 50, 51, 53, 54], [35, 188, 223], [0]),
    new PokeData("ドガース", 109, 40, 65, 95, 60, 45, 35, 3, null, 190, 114, 8, [[110, 1, 35]], null, [[1, 140], [1, 34], [9, 124], [17, 121], [21, 125], [25, 109], [33, 115], [41, 154], [45, 195]], [[1, 34], [1, 124], [32, 125], [37, 109], [40, 121], [45, 115], [48, 154]], [3, 4, 6, 7, 10, 11, 13, 17, 20, 21, 25, 27, 32, 34, 35, 36, 38, 44, 45, 46, 58, 59], [6, 20, 24, 25, 31, 32, 34, 36, 38, 44, 47, 50], [61, 104, 150, 195, 221], [10]),
    new PokeData("マタドガス", 110, 65, 90, 120, 85, 70, 60, 3, null, 60, 173, 8, [], 109, [[1, 140], [1, 34], [1, 124], [1, 121], [9, 124], [17, 121], [21, 125], [25, 109], [33, 115], [44, 154], [51, 195]], [[1, 34], [1, 124], [1, 125], [32, 125], [39, 109], [43, 121], [49, 115], [53, 154]], [3, 4, 6, 7, 10, 11, 13, 15, 17, 20, 21, 25, 27, 32, 34, 35, 36, 38, 44, 45, 46, 58, 59], [6, 15, 20, 24, 25, 31, 32, 34, 36, 38, 44, 47, 50], [], [10]),
    new PokeData("サイホーン", 111, 80, 85, 95, 30, 30, 25, 4, 5, 120, 135, 8, [[112, 1, 42]], null, [[1, 31], [1, 40], [13, 24], [19, 32], [31, 185], [37, 33], [49, 37], [55, 90]], [[1, 31], [30, 24], [35, 40], [40, 32], [45, 33], [50, 44], [55, 37]], [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 20, 21, 23, 25, 26, 27, 28, 31, 32, 34, 35, 37, 38, 44, 45, 54, 58, 59, 60], [6, 7, 8, 9, 10, 20, 24, 25, 26, 27, 28, 31, 32, 34, 38, 40, 44, 48, 50, 54], [38, 69, 158, 180, 223, 229, 243], [0, 4]),
    new PokeData("サイドン", 112, 105, 130, 120, 45, 45, 40, 4, 5, 60, 204, 8, [], 111, [[1, 31], [1, 40], [1, 24], [1, 32], [13, 24], [19, 32], [31, 185], [37, 33], [54, 37], [65, 90]], [[1, 31], [1, 24], [1, 40], [1, 32], [30, 24], [35, 40], [40, 32], [48, 33], [55, 44], [64, 37]], [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 23, 25, 26, 27, 28, 31, 32, 34, 35, 37, 38, 41, 44, 45, 48, 49, 53, 54, 58, 59, 60], [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 31, 32, 34, 38, 40, 44, 48, 50, 53, 54], [], [0, 4]),
    new PokeData("ラッキー", 113, 250, 5, 5, 35, 105, 50, 0, null, 30, 255, 16, [[242, 4, 1]], null, [[1, 2], [5, 46], [9, 40], [13, 136], [17, 4], [23, 108], [29, 48], [35, 122], [41, 112], [49, 114], [57, 39]], [[1, 2], [1, 40], [12, 4], [24, 48], [30, 46], [38, 108], [44, 112], [48, 114], [54, 39]], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 34, 35, 37, 38, 40, 42, 44, 45, 54, 55, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 24, 25, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 44, 45, 46, 49, 50, 54, 55], [119, 216, 218], [5]),
    new PokeData("モンジャラ", 114, 65, 55, 115, 100, 40, 60, 11, null, 45, 166, 8, [], null, [[1, 133], [4, 80], [10, 72], [13, 78], [19, 23], [25, 21], [31, 73], [34, 79], [40, 22], [46, 75]], [[1, 133], [24, 21], [27, 72], [29, 23], [32, 78], [36, 79], [39, 80], [45, 22], [48, 75]], [2, 3, 6, 9, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 46, 51, 55], [3, 6, 8, 9, 10, 15, 20, 21, 22, 31, 32, 34, 40, 44, 50, 51], [73, 94, 116, 134, 176], [6]),
    new PokeData("ガルーラ", 115, 105, 95, 80, 40, 80, 90, 0, null, 45, 175, 16, [], null, [[1, 5], [7, 44], [13, 45], [19, 40], [25, 6], [31, 100], [37, 204], [43, 147], [49, 180]], [[1, 5], [1, 100], [26, 45], [31, 40], [36, 6], [41, 44], [46, 147]], [1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 41, 44, 45, 48, 49, 53, 54, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 24, 25, 26, 27, 31, 32, 34, 38, 40, 44, 48, 50, 53, 54], [24, 51, 117, 194, 220], [0]),
    new PokeData("タッツー", 116, 30, 40, 70, 70, 25, 60, 10, null, 225, 83, 8, [[117, 1, 32]], null, [[1, 146], [8, 109], [15, 44], [22, 56], [29, 240], [36, 98], [43, 57]], [[1, 146], [19, 109], [24, 44], [30, 56], [37, 98], [45, 57]], [2, 3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 24, 27, 32, 34, 35, 39, 44, 45, 53, 56, 57, 60], [6, 9, 10, 11, 12, 13, 14, 20, 31, 32, 34, 39, 40, 44, 50, 53], [51, 63, 83, 151, 176, 191], [1, 12]),
    new PokeData("シードラ", 117, 55, 65, 95, 95, 45, 85, 10, null, 75, 155, 8, [[230, 3, 151]], 116, [[1, 146], [1, 109], [1, 44], [1, 56], [8, 109], [15, 44], [22, 56], [29, 240], [40, 98], [51, 57]], [[1, 146], [1, 109], [19, 109], [24, 44], [30, 56], [41, 98], [52, 57]], [2, 3, 6, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 27, 32, 34, 35, 39, 44, 45, 53, 56, 57, 60], [6, 9, 10, 11, 12, 13, 14, 15, 20, 31, 32, 34, 39, 40, 44, 50, 53], [], [1, 12]),
    new PokeData("トサキント", 118, 45, 67, 60, 35, 50, 63, 10, null, 225, 111, 8, [[119, 1, 33]], null, [[1, 65], [1, 40], [10, 49], [15, 31], [24, 176], [29, 32], [38, 128], [43, 33], [52, 98]], [[1, 65], [1, 40], [19, 49], [24, 31], [30, 32], [37, 128], [45, 33], [54, 98]], [3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 27, 32, 34, 35, 39, 44, 45, 53, 57, 60], [6, 7, 9, 10, 11, 12, 13, 14, 20, 31, 32, 34, 39, 40, 44, 50, 53], [57, 61, 115], [11]),
    new PokeData("アズマオウ", 119, 80, 92, 65, 65, 80, 68, 10, null, 60, 170, 8, [], 118, [[1, 65], [1, 40], [1, 40], [10, 49], [15, 31], [24, 176], [29, 32], [41, 128], [49, 33], [61, 98]], [[1, 65], [1, 40], [1, 49], [19, 49], [24, 31], [30, 32], [39, 128], [48, 33], [54, 98]], [3, 6, 10, 13, 14, 15, 16, 17, 18, 20, 21, 27, 32, 34, 35, 39, 44, 45, 53, 57, 60], [6, 7, 9, 10, 11, 12, 13, 14, 15, 20, 31, 32, 34, 39, 40, 44, 50, 53], [], [11]),
    new PokeData("ヒトデマン", 120, 30, 45, 55, 70, 55, 85, 10, null, 225, 106, null, [[121, 2, 24]], null, [[1, 34], [1, 107], [7, 56], [13, 230], [19, 106], [25, 130], [31, 62], [37, 108], [43, 114], [50, 57]], [[1, 34], [17, 56], [22, 107], [27, 106], [32, 130], [37, 108], [42, 114], [47, 57]], [3, 6, 7, 9, 10, 13, 14, 16, 17, 18, 20, 21, 25, 27, 29, 32, 34, 35, 39, 44, 45, 53, 55, 56, 57, 59, 60], [6, 9, 10, 11, 12, 13, 14, 20, 24, 25, 29, 30, 31, 32, 33, 34, 39, 40, 44, 45, 46, 49, 50, 53, 55], [], [13]),
    new PokeData("スターミー", 121, 60, 75, 85, 100, 85, 115, 10, 13, 60, 207, null, [], 120, [[1, 34], [1, 230], [1, 106], [1, 62], [37, 110]], [[1, 34], [1, 56], [1, 107]], [3, 6, 7, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 25, 27, 29, 32, 34, 35, 39, 42, 44, 45, 50, 53, 55, 56, 57, 59, 60], [6, 9, 10, 11, 12, 13, 14, 15, 20, 24, 25, 29, 30, 31, 32, 33, 34, 39, 40, 44, 45, 46, 49, 50, 53, 55], [], [13]),
    new PokeData("バリヤード", 122, 40, 45, 65, 100, 120, 90, 13, null, 45, 136, 8, [], null, [[1, 113], [6, 94], [11, 165], [16, 97], [21, 4], [26, 114], [26, 116], [31, 228], [36, 61], [41, 227], [46, 220]], [[1, 94], [1, 113], [15, 94], [23, 114], [31, 4], [39, 97], [47, 165]], [1, 2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 20, 21, 22, 25, 27, 29, 30, 31, 32, 33, 34, 35, 41, 42, 44, 45, 46, 48, 50, 55, 59], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 22, 24, 25, 29, 30, 31, 32, 33, 34, 35, 40, 44, 45, 46, 50, 55], [96, 103, 249], [7]),
    new PokeData("ストライク", 123, 70, 110, 80, 55, 80, 105, 6, 2, 45, 187, 8, [[212, 3, 143]], null, [[1, 99], [1, 44], [6, 117], [12, 229], [18, 207], [24, 98], [30, 18], [36, 164], [42, 15], [48, 105]], [[1, 99], [17, 44], [20, 117], [24, 105], [29, 164], [35, 15], [42, 98], [50, 18]], [2, 3, 6, 8, 10, 11, 13, 15, 17, 20, 21, 27, 32, 34, 35, 39, 43, 44, 45, 46, 47, 49, 51], [3, 6, 9, 10, 15, 20, 31, 32, 34, 39, 40, 44, 50, 51], [14, 69, 114, 180, 220, 227], [2]),
    new PokeData("ルージュラ", 124, 65, 50, 35, 115, 95, 95, 14, 13, 45, 137, 16, [], 238, [[1, 2], [1, 123], [1, 143], [1, 182], [9, 143], [13, 182], [21, 4], [25, 9], [35, 213], [41, 35], [51, 196], [57, 60]], [[1, 2], [1, 143], [18, 123], [23, 4], [31, 9], [39, 35], [47, 38], [58, 60]], [1, 2, 3, 6, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 27, 29, 30, 31, 32, 33, 34, 35, 42, 44, 45, 46, 50, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 29, 30, 31, 32, 33, 34, 35, 40, 44, 46, 50], [], [7]),
    new PokeData("エレブー", 125, 65, 83, 57, 95, 85, 105, 12, null, 45, 156, 4, [], 239, [[1, 99], [1, 44], [1, 10], [9, 10], [17, 114], [25, 130], [36, 104], [47, 86], [58, 88]], [[1, 99], [1, 44], [34, 85], [37, 104], [42, 10], [49, 114], [54, 88]], [1, 2, 3, 6, 7, 8, 10, 13, 15, 17, 18, 20, 21, 23, 25, 27, 29, 31, 32, 33, 34, 35, 39, 41, 43, 44, 45, 46, 48, 54, 55, 59], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 24, 25, 29, 30, 31, 32, 33, 34, 35, 39, 40, 44, 45, 46, 50, 54, 55], [], [7]),
    new PokeData("ブーバー", 126, 65, 95, 57, 100, 85, 93, 9, null, 45, 167, 4, [], 240, [[1, 53], [1, 44], [1, 124], [1, 8], [7, 44], [13, 124], [19, 8], [25, 109], [33, 242], [41, 54], [49, 110], [57, 127]], [[1, 53], [36, 44], [39, 110], [43, 8], [48, 109], [52, 124], [55, 54]], [1, 2, 3, 6, 8, 10, 11, 13, 15, 17, 20, 21, 23, 27, 29, 31, 32, 34, 35, 38, 41, 43, 44, 45, 46, 48, 54, 58], [1, 5, 6, 8, 9, 10, 15, 17, 18, 19, 20, 29, 30, 31, 32, 34, 35, 38, 40, 44, 46, 50, 54], [], [7]),
    new PokeData("カイロス", 127, 65, 125, 100, 55, 70, 85, 6, null, 45, 200, 8, [], null, [[1, 12], [7, 117], [13, 21], [19, 70], [25, 107], [31, 13], [37, 67], [43, 15]], [[1, 12], [21, 21], [25, 70], [30, 13], [36, 117], [43, 107], [49, 164], [54, 15]], [2, 3, 6, 8, 10, 11, 13, 15, 17, 20, 21, 27, 32, 34, 35, 44, 45, 46, 49, 51, 54], [3, 6, 8, 9, 10, 15, 17, 19, 20, 31, 32, 34, 44, 50, 51, 54], [32, 176], [2]),
    new PokeData("ケンタロス", 128, 75, 100, 95, 40, 70, 110, 0, null, 45, 211, 0, [], null, [[1, 34], [4, 40], [8, 100], [13, 31], [19, 185], [26, 229], [34, 157], [43, 38], [53, 37]], [[1, 34], [21, 24], [28, 40], [35, 44], [44, 100], [51, 37]], [2, 3, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 23, 25, 26, 27, 32, 34, 35, 38, 44, 45, 53, 54, 58, 59, 60], [6, 7, 8, 9, 10, 13, 14, 15, 20, 24, 25, 26, 27, 31, 32, 34, 38, 40, 44, 50, 54], [], [4]),
    new PokeData("コイキング", 129, 20, 10, 55, 15, 20, 80, 10, null, 255, 20, 8, [[130, 1, 20]], null, [[1, 151], [15, 34], [30, 176]], [[1, 151], [15, 34]], [], [], [], [11, 12]),
    new PokeData("ギャラドス", 130, 95, 125, 79, 60, 100, 81, 10, 2, 45, 214, 8, [], 129, [[1, 38], [20, 45], [25, 83], [30, 44], [35, 240], [40, 57], [45, 241], [50, 64]], [[1, 34], [20, 45], [25, 83], [32, 44], [41, 57], [52, 64]], [2, 3, 5, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 32, 34, 35, 37, 38, 44, 45, 53, 54, 56, 57, 58, 59, 60], [6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 31, 32, 33, 34, 38, 40, 44, 50, 53, 54], [], [11, 12]),
    new PokeData("ラプラス", 131, 130, 85, 80, 85, 95, 60, 10, 14, 45, 219, 8, [], null, [[1, 56], [1, 46], [1, 48], [8, 55], [15, 35], [22, 110], [29, 196], [36, 59], [43, 241], [50, 220], [57, 57]], [[1, 56], [1, 46], [16, 48], [20, 55], [25, 35], [31, 110], [38, 59], [46, 57]], [2, 3, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 27, 29, 32, 34, 35, 42, 44, 45, 50, 53, 54, 56, 59, 60], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 22, 23, 24, 25, 29, 31, 32, 33, 34, 40, 44, 46, 50, 53, 54], [63, 194], [0, 1]),
    new PokeData("メタモン", 132, 48, 48, 48, 48, 48, 48, 0, null, 35, 61, null, [], null, [[1, 145]], [[1, 145]], [], [], [], [14]),
    new PokeData("イーブイ", 133, 55, 55, 50, 45, 65, 55, 0, null, 45, 92, 2, [[135, 2, 23], [134, 2, 24], [136, 2, 22], [196, 4, 2], [197, 4, 3]], null, [[1, 34], [1, 40], [8, 29], [16, 46], [23, 99], [30, 45], [36, 227], [42, 37]], [[1, 34], [1, 40], [8, 29], [16, 46], [23, 99], [30, 45], [36, 117], [42, 37]], [2, 3, 6, 10, 11, 13, 17, 18, 20, 21, 23, 27, 30, 31, 32, 34, 35, 39, 43, 44, 45], [6, 8, 9, 10, 20, 31, 32, 33, 34, 39, 40, 44, 50], [176, 205], [4]),
    new PokeData("シャワーズ", 134, 130, 65, 60, 110, 95, 65, 10, null, 45, 196, 2, [], 133, [[1, 34], [1, 40], [8, 29], [16, 56], [23, 99], [30, 45], [36, 63], [42, 115], [47, 152], [52, 57]], [[1, 34], [1, 40], [1, 99], [1, 56], [8, 29], [16, 56], [23, 99], [30, 45], [36, 63], [42, 115], [42, 55], [47, 152], [52, 57]], [2, 3, 5, 6, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 27, 30, 31, 32, 34, 35, 39, 43, 44, 45, 53, 56, 57, 60], [6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 31, 32, 33, 34, 39, 40, 44, 50, 53], [], [4]),
    new PokeData("サンダース", 135, 65, 65, 60, 110, 95, 130, 12, null, 45, 197, 2, [], 133, [[1, 34], [1, 40], [8, 29], [16, 85], [23, 99], [30, 25], [36, 43], [42, 87], [47, 98], [52, 88]], [[1, 34], [1, 40], [1, 99], [1, 85], [8, 29], [16, 85], [23, 99], [30, 25], [36, 43], [42, 87], [47, 98], [52, 88]], [2, 3, 5, 6, 7, 10, 11, 13, 15, 17, 18, 20, 21, 23, 25, 27, 30, 31, 32, 34, 35, 39, 43, 44, 45, 55, 59], [6, 8, 9, 10, 15, 20, 24, 25, 31, 32, 33, 34, 39, 40, 44, 45, 50, 55], [], [4]),
    new PokeData("ブースター", 136, 65, 130, 60, 95, 110, 65, 9, null, 45, 198, 2, [], 133, [[1, 34], [1, 40], [8, 29], [16, 53], [23, 99], [30, 45], [36, 84], [42, 124], [47, 44], [52, 54]], [[1, 34], [1, 40], [1, 99], [1, 53], [8, 29], [16, 53], [23, 99], [30, 45], [36, 84], [42, 124], [47, 44], [52, 54]], [2, 3, 5, 6, 7, 10, 11, 13, 15, 17, 18, 20, 21, 23, 27, 30, 31, 32, 34, 35, 38, 39, 43, 44, 45, 58], [6, 8, 9, 10, 15, 20, 31, 32, 33, 34, 38, 39, 40, 44, 50], [], [4]),
    new PokeData("ポリゴン", 137, 65, 60, 70, 85, 75, 40, 0, null, 45, 130, null, [[233, 3, 172]], null, [[1, 177], [1, 34], [1, 161], [9, 98], [12, 61], [20, 106], [24, 160], [32, 200], [36, 162], [44, 193]], [[1, 34], [1, 160], [1, 161], [23, 61], [28, 106], [35, 98], [42, 162]], [3, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 27, 29, 32, 34, 35, 39, 42, 44, 46, 50, 55, 59, 60], [6, 9, 10, 13, 14, 15, 20, 24, 25, 29, 30, 31, 32, 33, 34, 39, 40, 44, 45, 46, 49, 50, 55], [], [13]),
    new PokeData("オムナイト", 138, 35, 40, 100, 90, 55, 35, 5, 10, 45, 120, 2, [[139, 1, 40]], null, [[1, 133], [1, 111], [13, 45], [19, 56], [31, 44], [37, 183], [49, 247], [55, 57]], [[1, 56], [1, 111], [34, 31], [39, 44], [44, 132], [49, 57]], [2, 3, 4, 6, 8, 10, 13, 14, 16, 17, 18, 20, 21, 27, 32, 34, 35, 37, 44, 45, 46, 53, 56, 60], [6, 8, 9, 10, 11, 12, 13, 14, 20, 31, 32, 33, 34, 44, 50, 53], [22, 49, 62, 63, 115], [1, 8]),
    new PokeData("オムスター", 139, 70, 60, 125, 115, 70, 55, 5, 10, 45, 199, 2, [], 138, [[1, 133], [1, 111], [1, 45], [13, 45], [19, 56], [31, 44], [37, 183], [40, 132], [54, 247], [65, 57]], [[1, 56], [1, 111], [1, 31], [34, 31], [39, 44], [46, 132], [53, 57]], [2, 3, 4, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 27, 32, 34, 35, 37, 44, 45, 46, 53, 56, 60], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 31, 32, 33, 34, 40, 44, 50, 53], [], [1, 8]),
    new PokeData("カブト", 140, 30, 80, 90, 55, 45, 55, 5, 10, 45, 119, 2, [[141, 1, 40]], null, [[1, 11], [1, 107], [10, 72], [19, 44], [28, 29], [37, 204], [46, 73], [55, 247]], [[1, 11], [1, 107], [34, 72], [39, 164], [44, 44], [49, 57]], [3, 4, 6, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 27, 32, 34, 35, 37, 44, 45, 46, 60], [6, 8, 9, 10, 11, 12, 13, 14, 20, 31, 32, 33, 34, 44, 50, 53], [62, 63, 92, 176, 230], [1, 8]),
    new PokeData("カブトプス", 141, 60, 115, 105, 65, 70, 80, 5, 10, 45, 201, 2, [], 140, [[1, 11], [1, 107], [1, 72], [10, 72], [19, 44], [28, 29], [37, 204], [40, 164], [51, 73], [65, 247]], [[1, 11], [1, 107], [1, 72], [34, 72], [39, 164], [46, 44], [53, 57]], [2, 3, 4, 6, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27, 32, 34, 35, 37, 44, 45, 46, 49, 51, 53, 56, 60], [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 31, 32, 33, 34, 40, 44, 50, 51, 53], [], [1, 8]),
    new PokeData("プテラ", 142, 80, 105, 65, 60, 75, 130, 5, 2, 45, 202, 2, [], null, [[1, 18], [8, 98], [15, 45], [22, 49], [29, 247], [36, 185], [43, 37], [50, 64]], [[1, 18], [1, 98], [33, 49], [38, 45], [45, 37], [54, 64]], [2, 3, 5, 6, 8, 10, 13, 15, 17, 18, 20, 21, 23, 24, 26, 27, 32, 34, 35, 37, 38, 39, 43, 44, 45, 47, 52, 58], [2, 4, 6, 9, 10, 15, 20, 23, 31, 32, 33, 34, 38, 39, 43, 44, 50, 52], [19, 194, 229], [3]),
    new PokeData("カビゴン", 143, 160, 110, 65, 65, 110, 30, 0, null, 25, 154, 2, [], null, [[1, 34], [8, 134], [15, 112], [22, 188], [29, 30], [36, 174], [36, 157], [43, 35], [50, 206], [57, 64]], [[1, 30], [1, 134], [1, 157], [35, 35], [41, 107], [48, 39], [56, 64]], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 44, 45, 48, 53, 54, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 38, 40, 44, 46, 48, 50, 53, 54], [123], [0]),
    new PokeData("フリーザー", 144, 90, 85, 100, 95, 125, 85, 14, 2, 3, 215, null, [], null, [[1, 17], [1, 182], [13, 55], [25, 98], [37, 171], [49, 59], [61, 116], [73, 60]], [[1, 65], [1, 59], [51, 60], [55, 98], [60, 55]], [3, 5, 6, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 27, 31, 32, 34, 35, 37, 39, 43, 44, 47, 52, 60], [2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 20, 31, 32, 33, 34, 39, 43, 44, 50, 52], [], [15]),
    new PokeData("サンダー", 145, 90, 90, 85, 125, 90, 100, 12, 2, 3, 216, null, [], null, [[1, 65], [1, 85], [13, 87], [25, 98], [37, 198], [49, 66], [61, 114], [73, 88]], [[1, 85], [1, 66], [51, 88], [55, 98], [60, 114]], [3, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 20, 21, 25, 27, 31, 32, 34, 35, 37, 39, 43, 44, 47, 52, 55, 59], [2, 4, 6, 9, 10, 15, 20, 24, 25, 31, 32, 33, 34, 39, 43, 44, 45, 50, 52, 55], [], [15]),
    new PokeData("ファイヤー", 146, 90, 100, 90, 125, 85, 90, 9, 2, 3, 217, null, [], null, [[1, 18], [1, 53], [13, 84], [25, 98], [37, 204], [49, 54], [61, 220], [73, 144]], [[1, 65], [1, 84], [51, 44], [55, 98], [60, 144]], [3, 5, 6, 8, 10, 11, 13, 15, 17, 18, 20, 21, 27, 31, 32, 34, 35, 37, 38, 39, 43, 44, 47, 52, 58], [2, 4, 6, 9, 10, 15, 20, 31, 32, 33, 34, 38, 39, 43, 44, 50, 52], [], [15]),
    new PokeData("ミニリュウ", 147, 41, 64, 45, 50, 50, 50, 15, null, 45, 67, 8, [[148, 1, 30]], null, [[1, 36], [1, 44], [8, 87], [15, 240], [22, 83], [29, 22], [36, 98], [43, 220], [50, 201], [57, 64]], [[1, 36], [1, 44], [10, 87], [20, 98], [30, 22], [40, 83], [50, 64]], [2, 3, 6, 7, 10, 13, 14, 16, 17, 18, 20, 21, 23, 24, 25, 27, 32, 34, 35, 38, 39, 43, 44, 45, 53, 57, 58, 59, 60], [6, 8, 9, 10, 11, 12, 13, 14, 20, 23, 24, 25, 31, 32, 33, 34, 38, 39, 40, 44, 45, 50, 53], [49, 55, 114, 115], [1, 12]),
    new PokeData("ハクリュー", 148, 61, 84, 65, 70, 70, 70, 15, null, 45, 144, 8, [[149, 1, 55]], 147, [[1, 36], [1, 44], [1, 87], [1, 240], [8, 87], [15, 240], [22, 83], [29, 22], [38, 98], [47, 220], [56, 201], [65, 64]], [[1, 36], [1, 44], [1, 87], [10, 87], [20, 98], [35, 22], [45, 83], [55, 64]], [2, 3, 6, 7, 10, 13, 14, 16, 17, 18, 20, 21, 23, 24, 25, 27, 32, 34, 35, 38, 39, 43, 44, 45, 53, 57, 58, 59, 60], [6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 23, 24, 25, 31, 32, 33, 34, 38, 39, 40, 44, 45, 50, 53], [], [1, 12]),
    new PokeData("カイリュー", 149, 91, 134, 95, 100, 100, 80, 15, 2, 45, 218, 8, [], 148, [[1, 36], [1, 44], [1, 87], [1, 240], [8, 87], [15, 240], [22, 83], [29, 22], [38, 98], [47, 220], [55, 18], [61, 201], [75, 64]], [[1, 36], [1, 44], [1, 87], [1, 98], [10, 87], [20, 98], [35, 22], [45, 83], [60, 64]], [1, 2, 3, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 27, 31, 32, 33, 34, 35, 37, 38, 39, 41, 43, 44, 45, 47, 48, 49, 52, 53, 54, 56, 57, 58, 59, 60], [2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 31, 32, 33, 34, 38, 39, 40, 44, 45, 50, 53, 54], [], [1, 12]),
    new PokeData("ミュウツー", 150, 106, 110, 90, 154, 90, 130, 13, null, 3, 220, null, [], null, [[1, 94], [1, 51], [11, 113], [22, 130], [33, 245], [44, 249], [55, 55], [66, 95], [77, 134], [88, 106], [99, 220]], [[1, 94], [1, 51], [1, 130], [1, 95], [63, 113], [66, 95], [70, 106], [75, 55], [81, 134]], [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 48, 50, 54, 55, 58, 59, 60], [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 44, 45, 46, 49, 50, 54, 55], [], [15]),
    new PokeData("ミュウ", 151, 100, 100, 100, 100, 100, 100, 13, null, 45, 64, null, [], null, [[1, 2], [10, 145], [20, 6], [30, 119], [40, 95], [50, 247]], [[1, 2], [10, 145], [20, 6], [30, 119], [40, 95]], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [], [15]),
    new PokeData("チコリータ", 152, 45, 49, 65, 49, 65, 45, 11, null, 45, 64, 2, [[153, 1, 16]], null, [[1, 34], [1, 46], [8, 76], [12, 116], [15, 78], [22, 236], [29, 35], [36, 114], [43, 220], [50, 77]], [], [2, 3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 27, 31, 32, 34, 35, 43, 44, 45, 51, 55], [], [15, 23, 69, 74, 176, 247], [0, 6]),
    new PokeData("ベイリーフ", 153, 60, 62, 80, 63, 80, 60, 11, null, 45, 141, 2, [[154, 1, 32]], 152, [[1, 34], [1, 46], [1, 76], [1, 116], [8, 76], [12, 116], [15, 78], [23, 236], [31, 35], [39, 114], [47, 220], [55, 77]], [], [2, 3, 6, 8, 10, 11, 12, 13, 17, 19, 20, 21, 22, 23, 27, 31, 32, 34, 35, 43, 44, 45, 49, 51, 54, 55], [], [], [0, 6]),
    new PokeData("メガニウム", 154, 80, 82, 100, 83, 100, 80, 11, null, 45, 208, 2, [], 153, [[1, 34], [1, 46], [1, 76], [1, 116], [8, 76], [12, 116], [15, 78], [23, 236], [31, 35], [41, 114], [51, 220], [61, 77]], [], [2, 3, 6, 8, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 23, 26, 27, 31, 32, 34, 35, 43, 44, 45, 49, 51, 54, 55], [], [], [0, 6]),
    new PokeData("ヒノアラシ", 155, 39, 52, 43, 60, 50, 65, 9, null, 45, 65, 2, [[156, 1, 14]], null, [[1, 34], [1, 44], [6, 109], [12, 53], [19, 99], [27, 173], [36, 130], [46, 54]], [], [2, 3, 4, 6, 10, 11, 13, 17, 20, 21, 23, 27, 28, 31, 32, 34, 35, 38, 39, 40, 43, 44, 45, 51, 58], [], [38, 67, 99, 155, 180, 194], [4]),
    new PokeData("マグマラシ", 156, 58, 64, 58, 80, 65, 80, 9, null, 45, 142, 2, [[157, 1, 36]], 155, [[1, 34], [1, 44], [1, 109], [6, 109], [12, 53], [21, 99], [31, 173], [42, 130], [54, 54]], [], [2, 3, 4, 5, 6, 8, 10, 11, 13, 17, 20, 21, 23, 27, 28, 31, 32, 34, 35, 38, 39, 40, 43, 44, 45, 49, 51, 54, 58], [], [], [4]),
    new PokeData("バクフーン", 157, 78, 84, 78, 109, 85, 100, 9, null, 45, 209, 2, [], 156, [[1, 34], [1, 44], [1, 109], [1, 53], [6, 109], [12, 53], [21, 99], [31, 173], [45, 130], [60, 54]], [], [1, 2, 3, 4, 5, 6, 8, 10, 11, 13, 15, 17, 20, 21, 23, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 43, 44, 45, 48, 49, 51, 54, 58], [], [], [4]),
    new PokeData("ワニノコ", 158, 50, 65, 64, 44, 48, 43, 10, null, 45, 66, 2, [[159, 1, 18]], null, [[1, 11], [1, 44], [7, 100], [13, 56], [20, 45], [27, 185], [35, 164], [43, 104], [52, 57]], [], [1, 2, 3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 23, 27, 28, 31, 32, 33, 34, 35, 43, 44, 45, 51, 53, 56, 60], [], [14, 38, 57, 158, 243, 247], [0, 1]),
    new PokeData("アリゲイツ", 159, 65, 80, 80, 59, 63, 58, 10, null, 45, 143, 2, [[160, 1, 30]], 158, [[1, 11], [1, 44], [1, 100], [7, 100], [13, 56], [21, 45], [28, 185], [37, 164], [45, 104], [55, 57]], [], [1, 2, 3, 5, 6, 8, 10, 13, 14, 16, 17, 18, 20, 21, 23, 27, 28, 31, 32, 33, 34, 35, 43, 44, 45, 49, 51, 53, 54, 56, 60], [], [], [0, 1]),
    new PokeData("オーダイル", 160, 85, 105, 100, 79, 83, 78, 10, null, 45, 210, 2, [], 159, [[1, 11], [1, 44], [1, 100], [1, 56], [7, 100], [13, 56], [21, 45], [28, 185], [38, 164], [47, 104], [58, 57]], [], [1, 2, 3, 5, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 31, 32, 33, 34, 35, 43, 44, 45, 49, 51, 53, 54, 56, 60], [], [], [0, 1]),
    new PokeData("オタチ", 161, 35, 46, 34, 35, 45, 20, 0, null, 255, 57, 8, [[162, 1, 15]], null, [[1, 34], [5, 112], [11, 99], [17, 155], [25, 22], [33, 157], [41, 134]], [], [1, 2, 3, 4, 6, 10, 11, 13, 17, 20, 21, 23, 27, 28, 30, 31, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 53], [], [39, 117, 164, 180, 229], [4]),
    new PokeData("オオタチ", 162, 85, 76, 64, 45, 55, 90, 0, null, 90, 116, 8, [], 161, [[1, 11], [1, 112], [1, 99], [5, 112], [11, 99], [18, 155], [28, 22], [38, 157], [48, 134]], [], [1, 2, 3, 4, 6, 10, 11, 13, 15, 17, 20, 21, 23, 27, 28, 30, 31, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 48, 49, 51, 53, 54], [], [], [4]),
    new PokeData("ホーホー", 163, 60, 30, 30, 36, 56, 50, 0, 2, 255, 58, 8, [[164, 1, 20]], null, [[1, 34], [1, 46], [6, 194], [11, 65], [16, 96], [22, 116], [28, 37], [34, 94], [48, 139]], [], [3, 6, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 39, 42, 43, 44, 45, 46, 47, 50, 52, 55], [], [18, 19, 49, 120, 144, 186], [3]),
    new PokeData("ヨルノズク", 164, 100, 50, 50, 76, 96, 70, 0, 2, 90, 162, 8, [], 163, [[1, 34], [1, 46], [1, 194], [1, 65], [6, 194], [11, 65], [16, 96], [25, 116], [33, 37], [41, 94], [57, 139]], [], [3, 6, 10, 11, 13, 15, 17, 20, 21, 27, 31, 32, 34, 35, 39, 42, 43, 44, 45, 46, 47, 50, 52, 55], [], [], [3]),
    new PokeData("レディバ", 165, 40, 20, 30, 40, 80, 55, 6, 2, 255, 54, 8, [[166, 1, 18]], null, [[1, 34], [8, 49], [15, 5], [22, 114], [22, 116], [22, 220], [29, 227], [36, 130], [43, 98], [50, 39]], [], [1, 2, 3, 4, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 28, 32, 33, 34, 35, 39, 41, 44, 45, 46, 55], [], [61, 114, 118], [2]),
    new PokeData("レディアン", 166, 55, 35, 50, 55, 110, 85, 6, 2, 90, 134, 8, [], 165, [[1, 34], [1, 49], [8, 49], [15, 5], [24, 114], [24, 116], [24, 220], [33, 227], [42, 130], [51, 98], [60, 39]], [], [1, 2, 3, 4, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 28, 32, 33, 34, 35, 39, 41, 44, 45, 46, 55], [], [], [2]),
    new PokeData("イトマル", 167, 40, 60, 40, 40, 40, 30, 6, 3, 255, 54, 8, [[168, 1, 22]], null, [[1, 41], [1, 82], [6, 185], [11, 133], [17, 102], [23, 142], [30, 155], [37, 170], [45, 98], [53, 95]], [], [3, 6, 10, 11, 13, 17, 19, 20, 21, 22, 27, 28, 29, 32, 34, 35, 36, 44, 45, 46, 55], [], [50, 51, 61, 227, 229], [2]),
    new PokeData("アリアドス", 168, 70, 90, 70, 60, 60, 40, 6, 3, 90, 134, 8, [], 167, [[1, 41], [1, 82], [1, 185], [1, 133], [6, 185], [11, 133], [17, 102], [25, 142], [34, 155], [43, 170], [53, 98], [63, 95]], [], [3, 6, 10, 11, 13, 15, 17, 19, 20, 21, 22, 27, 28, 29, 32, 34, 35, 36, 44, 45, 46, 55], [], [], [2]),
    new PokeData("クロバット", 169, 85, 90, 80, 70, 80, 130, 3, 2, 90, 204, 8, [], 42, [[1, 104], [1, 142], [1, 49], [6, 49], [12, 45], [19, 110], [30, 18], [42, 213], [55, 115]], [], [3, 6, 10, 11, 13, 15, 17, 19, 20, 21, 27, 32, 34, 35, 39, 43, 44, 45, 46, 47, 52], [], [], [3]),
    new PokeData("チョンチー", 170, 75, 38, 38, 56, 56, 67, 10, 12, 190, 90, 8, [[171, 1, 27]], null, [[1, 146], [1, 87], [5, 49], [13, 176], [17, 56], [25, 210], [29, 110], [37, 37], [41, 57]], [], [3, 6, 7, 10, 13, 17, 18, 20, 21, 25, 27, 32, 34, 35, 44, 45, 53, 55, 56, 57, 59, 60], [], [49, 104, 176], [11]),
    new PokeData("ランターン", 171, 125, 58, 58, 76, 76, 67, 10, 12, 75, 156, 8, [], 170, [[1, 146], [1, 87], [1, 49], [5, 49], [13, 176], [17, 56], [25, 210], [33, 110], [45, 37], [53, 57]], [], [3, 6, 7, 10, 13, 15, 17, 18, 20, 21, 25, 27, 32, 34, 35, 44, 45, 53, 55, 56, 57, 59, 60], [], [], [11]),
    new PokeData("ピチュー", 172, 20, 40, 15, 35, 35, 60, 12, null, 190, 42, 8, [[25, 4, 1]], null, [[1, 85], [1, 205], [6, 40], [8, 87], [11, 187]], [], [2, 3, 4, 6, 7, 10, 13, 17, 18, 20, 21, 23, 25, 27, 31, 32, 34, 35, 39, 40, 43, 44, 45, 55, 59], [], [4, 118, 180, 218, 228], [15]),
    new PokeData("ピィ", 173, 50, 25, 28, 45, 55, 15, 0, null, 150, 37, 12, [[35, 4, 1]], null, [[1, 2], [1, 205], [4, 228], [8, 48], [13, 187]], [], [2, 3, 4, 6, 7, 9, 10, 11, 13, 16, 17, 18, 20, 21, 22, 23, 27, 29, 30, 31, 32, 34, 35, 38, 40, 42, 43, 44, 45, 50, 55, 58], [], [103, 119, 134, 151, 188, 218], [15]),
    new PokeData("ププリン", 174, 90, 30, 15, 40, 20, 15, 0, null, 170, 39, 12, [[39, 4, 1]], null, [[1, 48], [1, 205], [4, 112], [9, 2], [14, 187]], [], [2, 3, 4, 6, 7, 9, 10, 11, 13, 16, 17, 18, 20, 21, 22, 27, 29, 30, 31, 32, 34, 35, 38, 40, 42, 43, 44, 45, 50, 55, 58], [], [186, 196, 218], [15]),
    new PokeData("トゲピー", 175, 35, 20, 65, 40, 65, 20, 0, null, 190, 74, 2, [[176, 4, 1]], null, [[1, 46], [1, 205], [7, 119], [18, 187], [25, 228], [31, 220], [38, 39]], [], [2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 17, 18, 20, 21, 22, 27, 29, 30, 31, 32, 34, 35, 38, 39, 40, 42, 43, 44, 45, 55, 58], [], [65, 120, 194, 218, 249], [15]),
    new PokeData("トゲチック", 176, 55, 40, 85, 80, 105, 40, 0, 2, 75, 114, 2, [], 175, [[1, 46], [1, 205], [7, 119], [18, 187], [25, 228], [31, 220], [38, 39]], [], [2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 20, 21, 22, 27, 29, 30, 31, 32, 34, 35, 38, 39, 40, 42, 43, 44, 45, 47, 52, 55, 58], [], [], [3, 5]),
    new PokeData("ネイティ", 177, 40, 50, 45, 70, 45, 70, 13, 2, 190, 73, 8, [[178, 1, 25]], null, [[1, 65], [1, 44], [10, 102], [20, 101], [30, 249], [40, 110], [50, 95]], [], [3, 6, 9, 10, 11, 13, 17, 19, 20, 21, 22, 27, 29, 32, 34, 35, 39, 42, 43, 44, 45, 46, 50, 55], [], [66, 99, 115, 186, 212], [3]),
    new PokeData("ネイティオ", 178, 65, 75, 70, 95, 70, 95, 13, 2, 75, 171, 8, [], 177, [[1, 65], [1, 44], [1, 102], [10, 102], [20, 101], [35, 249], [50, 110], [65, 95]], [], [3, 6, 9, 10, 11, 13, 15, 17, 19, 20, 21, 22, 27, 29, 32, 34, 35, 39, 42, 43, 44, 45, 46, 50, 52, 55], [], [], [3]),
    new PokeData("メリープ", 179, 55, 40, 40, 65, 45, 35, 12, null, 235, 59, 8, [[180, 1, 15]], null, [[1, 34], [1, 46], [9, 85], [16, 87], [23, 179], [30, 114], [37, 88]], [], [2, 3, 6, 7, 10, 13, 17, 18, 20, 21, 23, 25, 27, 32, 34, 35, 39, 40, 44, 45, 55, 59], [], [35, 37, 86, 104, 116, 220], [0, 4]),
    new PokeData("モココ", 180, 70, 55, 55, 80, 60, 45, 12, null, 120, 117, 8, [[181, 1, 30]], 179, [[1, 34], [1, 46], [1, 85], [9, 85], [18, 87], [27, 179], [36, 114], [45, 88]], [], [1, 2, 3, 6, 7, 8, 10, 13, 17, 18, 20, 21, 23, 25, 27, 32, 34, 35, 39, 40, 41, 44, 45, 48, 54, 55, 59], [], [], [0, 4]),
    new PokeData("デンリュウ", 181, 90, 75, 75, 115, 90, 55, 12, null, 45, 194, 8, [], 180, [[1, 34], [1, 46], [1, 85], [1, 87], [9, 85], [18, 87], [27, 179], [30, 10], [42, 114], [57, 88]], [], [1, 2, 3, 6, 7, 8, 10, 13, 15, 17, 18, 20, 21, 23, 25, 27, 32, 34, 35, 39, 40, 41, 44, 45, 48, 54, 55, 59], [], [], [0, 4]),
    new PokeData("キレイハナ", 182, 75, 80, 85, 90, 100, 50, 11, null, 45, 184, 8, [], 44, [[1, 72], [1, 231], [1, 79], [1, 81], [55, 77]], [], [3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 32, 34, 35, 44, 45, 51, 55], [], [], [6]),
    new PokeData("マリル", 183, 70, 20, 50, 20, 50, 40, 10, null, 190, 58, 8, [[184, 1, 18]], null, [[1, 34], [3, 112], [6, 40], [10, 56], [15, 206], [21, 62], [28, 39], [36, 241]], [], [1, 2, 3, 4, 6, 10, 13, 14, 16, 17, 18, 20, 21, 23, 27, 31, 32, 33, 34, 35, 39, 40, 44, 45, 53, 56, 57, 60], [], [49, 114, 134, 188, 194, 196, 218, 249], [1, 5]),
    new PokeData("マリルリ", 184, 100, 50, 80, 50, 80, 50, 10, null, 75, 153, 8, [], 183, [[1, 34], [1, 112], [1, 40], [1, 56], [3, 112], [6, 40], [10, 56], [15, 206], [25, 62], [36, 39], [48, 241]], [], [1, 2, 3, 4, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 23, 27, 31, 32, 33, 34, 35, 39, 40, 44, 45, 53, 54, 56, 57, 60], [], [], [1, 5]),
    new PokeData("ウソッキー", 185, 70, 100, 115, 30, 65, 30, 5, null, 65, 135, 8, [], null, [[1, 89], [1, 103], [10, 176], [19, 68], [28, 158], [37, 186], [46, 22]], [], [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 33, 34, 35, 37, 40, 41, 44, 45, 46, 48, 54], [], [121], [9]),
    new PokeData("ニョロトノ", 186, 90, 75, 75, 90, 100, 70, 10, null, 45, 185, 8, [], 61, [[1, 56], [1, 96], [1, 4], [1, 196], [35, 196], [51, 208]], [], [1, 2, 3, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 26, 27, 29, 31, 32, 33, 34, 35, 40, 43, 44, 45, 46, 53, 54, 56, 57, 60], [], [], [1]),
    new PokeData("ハネッコ", 187, 35, 35, 40, 35, 55, 50, 11, 2, 255, 74, 8, [[188, 1, 18]], null, [[1, 151], [5, 236], [5, 40], [10, 34], [13, 78], [15, 79], [17, 80], [20, 74], [25, 179], [30, 73]], [], [2, 3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 40, 44, 45, 55], [], [7, 39, 46, 94, 116, 134, 228], [5, 6]),
    new PokeData("ポポッコ", 188, 55, 45, 50, 45, 65, 80, 11, 2, 120, 136, 8, [[189, 1, 27]], 187, [[1, 151], [1, 236], [1, 40], [1, 34], [5, 236], [5, 40], [10, 34], [13, 78], [15, 79], [17, 80], [22, 74], [29, 179], [36, 73]], [], [2, 3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 40, 44, 45, 55], [], [], [5, 6]),
    new PokeData("ワタッコ", 189, 75, 55, 70, 55, 85, 110, 11, 2, 45, 176, 8, [], 188, [[1, 151], [1, 236], [1, 40], [1, 34], [5, 236], [5, 40], [10, 34], [13, 78], [15, 79], [17, 80], [22, 74], [33, 179], [44, 73]], [], [2, 3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 32, 34, 35, 40, 44, 45, 55], [], [], [5, 6]),
    new PokeData("エイパム", 190, 55, 70, 55, 40, 55, 85, 0, null, 45, 94, 8, [], null, [[1, 11], [1, 40], [6, 29], [12, 227], [19, 155], [27, 130], [36, 104], [46, 98]], [], [1, 2, 3, 6, 7, 8, 10, 11, 13, 17, 20, 21, 23, 25, 27, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 54, 59], [], [4, 22, 69, 98, 104, 181, 229, 252], [4]),
    new PokeData("ヒマナッツ", 191, 30, 30, 30, 30, 30, 30, 11, null, 235, 52, 8, [[192, 2, 169]], null, [[1, 72], [4, 75], [10, 73], [19, 242], [31, 236], [46, 203]], [], [3, 6, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [], [], [6]),
    new PokeData("キマワリ", 192, 75, 75, 55, 105, 85, 30, 11, null, 120, 146, 8, [], 191, [[1, 72], [1, 2], [4, 75], [10, 76], [19, 242], [31, 81], [46, 77]], [], [3, 6, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 32, 34, 35, 36, 44, 45, 51, 55], [], [], [6]),
    new PokeData("ヤンヤンマ", 193, 65, 65, 45, 75, 45, 95, 6, 2, 75, 147, 8, [], null, [[1, 34], [1, 194], [7, 99], [13, 105], [19, 50], [25, 198], [31, 49], [37, 18], [43, 104]], [], [2, 3, 6, 10, 11, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 39, 43, 44, 45, 46, 55], [], [19, 142, 180], [2]),
    new PokeData("ウパー", 194, 55, 45, 45, 25, 25, 15, 10, 4, 255, 52, 8, [[195, 1, 20]], null, [[1, 56], [1, 40], [11, 22], [21, 134], [31, 90], [41, 241], [51, 55], [51, 115]], [], [1, 2, 3, 4, 6, 8, 10, 13, 17, 18, 20, 21, 23, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 40, 44, 45, 53, 55, 56, 60], [], [35, 220, 247], [1, 4]),
    new PokeData("ヌオー", 195, 95, 85, 85, 65, 65, 35, 10, 4, 90, 137, 8, [], 194, [[1, 56], [1, 40], [11, 22], [23, 134], [35, 90], [47, 241], [59, 55], [59, 115]], [], [1, 2, 3, 4, 6, 8, 10, 13, 15, 17, 18, 20, 21, 23, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 40, 44, 45, 53, 54, 55, 56, 60], [], [], [1, 4]),
    new PokeData("エーフィ", 196, 65, 65, 60, 130, 95, 110, 13, null, 45, 197, 2, [], 133, [[1, 34], [1, 40], [8, 29], [16, 94], [23, 99], [30, 130], [36, 61], [42, 245], [47, 95], [52, 235]], [], [2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 18, 20, 21, 23, 27, 29, 30, 31, 32, 34, 35, 39, 42, 43, 44, 45, 50, 51, 55], [], [], [4]),
    new PokeData("ブラッキー", 197, 95, 65, 110, 60, 130, 65, 16, null, 45, 197, 2, [], 133, [[1, 34], [1, 40], [8, 29], [16, 229], [23, 99], [30, 110], [36, 186], [42, 213], [47, 104], [52, 237]], [], [2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 18, 20, 21, 23, 27, 29, 30, 31, 32, 34, 35, 39, 42, 43, 44, 45, 50, 51, 55], [], [], [4]),
    new PokeData("ヤミカラス", 198, 60, 85, 42, 85, 42, 91, 16, 2, 30, 107, 8, [], null, [[1, 65], [11, 229], [16, 115], [26, 102], [31, 186], [41, 213]], [], [3, 6, 9, 10, 11, 13, 16, 17, 20, 21, 27, 30, 31, 32, 34, 35, 39, 42, 43, 44, 45, 46, 47, 50, 52], [], [18, 19, 66, 99, 120, 144], [3]),
    new PokeData("ヤドキング", 199, 95, 75, 80, 100, 110, 30, 10, 13, 70, 164, 8, [], 79, [[1, 175], [1, 34], [6, 46], [15, 56], [20, 94], [29, 51], [34, 30], [43, 208], [48, 95]], [], [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 42, 44, 45, 49, 50, 53, 54, 55, 56, 58, 60], [], [], [0, 1]),
    new PokeData("ムウマ", 200, 60, 60, 60, 85, 85, 85, 7, null, 45, 147, 8, [], null, [[1, 46], [1, 150], [6, 181], [12, 110], [19, 213], [27, 61], [36, 221], [46, 196]], [], [2, 3, 6, 7, 9, 10, 11, 13, 17, 18, 20, 21, 25, 27, 29, 30, 32, 34, 35, 39, 40, 42, 44, 45, 46, 50, 55, 59], [], [104, 195], [10]),
    new PokeData("アンノーン", 201, 48, 72, 48, 72, 48, 48, 13, null, 225, 61, null, [], null, [[1, 238]], [], [], [], [], [15]),
    new PokeData("ソーナンス", 202, 190, 33, 58, 33, 58, 33, 13, null, 45, 177, 8, [], null, [[1, 69], [1, 244], [1, 220], [1, 195]], [], [], [], [], [10]),
    new PokeData("キリンリキ", 203, 70, 80, 65, 90, 65, 85, 0, 13, 60, 149, 8, [], null, [[1, 34], [1, 46], [1, 94], [1, 24], [7, 94], [13, 24], [20, 98], [30, 227], [41, 61], [54, 243]], [], [2, 3, 6, 7, 8, 9, 10, 11, 13, 17, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 39, 42, 44, 45, 46, 50, 54, 59], [], [37, 134, 194, 249, 252], [4]),
    new PokeData("クヌギダマ", 204, 50, 65, 90, 35, 35, 15, 6, null, 190, 60, 8, [[205, 1, 31]], null, [[1, 34], [1, 183], [8, 121], [15, 37], [22, 230], [29, 118], [36, 154], [43, 192], [50, 39]], [], [2, 3, 4, 6, 8, 10, 11, 12, 13, 17, 19, 20, 21, 22, 27, 32, 34, 35, 40, 44, 45, 54], [], [43, 116, 130, 176], [2]),
    new PokeData("フォレトス", 205, 75, 90, 140, 60, 60, 40, 6, 8, 75, 118, 8, [], 204, [[1, 34], [1, 183], [1, 121], [8, 121], [15, 37], [22, 230], [29, 118], [39, 154], [49, 192], [59, 39]], [], [2, 3, 4, 6, 8, 10, 11, 12, 13, 15, 17, 19, 20, 21, 22, 27, 32, 34, 35, 37, 40, 44, 45, 54], [], [], [2]),
    new PokeData("ノコッチ", 206, 100, 70, 70, 65, 65, 45, 0, null, 190, 75, 8, [], null, [[1, 100], [5, 112], [13, 138], [18, 181], [26, 229], [30, 104], [38, 37]], [], [2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 17, 18, 20, 21, 22, 23, 25, 27, 28, 31, 32, 34, 35, 40, 42, 44, 45, 46, 50, 54, 58, 59], [], [45, 100, 118, 158, 247], [4]),
    new PokeData("グライガー", 207, 65, 75, 105, 35, 65, 85, 4, 2, 60, 108, 8, [], null, [[1, 41], [6, 29], [13, 107], [20, 99], [28, 186], [36, 164], [44, 104], [52, 13]], [], [2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 23, 27, 32, 34, 35, 36, 37, 39, 43, 44, 45, 46, 49, 51, 54], [], [14, 18, 69, 233], [2]),
    new PokeData("ハガネール", 208, 75, 85, 200, 55, 65, 30, 8, 4, 25, 196, 8, [], 95, [[1, 34], [1, 104], [10, 21], [14, 89], [23, 107], [27, 100], [36, 202], [40, 22], [49, 243]], [], [2, 3, 4, 5, 6, 8, 10, 11, 13, 15, 17, 20, 21, 23, 24, 26, 27, 28, 31, 32, 34, 35, 37, 40, 44, 45, 51, 54], [], [], [9]),
    new PokeData("ブルー", 209, 60, 80, 50, 40, 40, 30, 0, null, 190, 63, 12, [[210, 1, 23]], null, [[1, 34], [1, 185], [4, 40], [8, 205], [13, 45], [19, 123], [26, 47], [34, 100], [43, 37]], [], [1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 17, 18, 20, 21, 25, 27, 30, 31, 32, 33, 34, 35, 36, 40, 41, 43, 44, 45, 46, 48, 54, 59], [], [44, 116, 119, 123, 186, 216, 218, 243], [4, 5]),
    new PokeData("グランブル", 210, 90, 120, 75, 60, 60, 45, 0, null, 75, 178, 12, [], 209, [[1, 34], [1, 185], [4, 40], [8, 205], [13, 45], [19, 123], [28, 47], [38, 100], [51, 37]], [], [1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 20, 21, 25, 27, 30, 31, 32, 33, 34, 35, 36, 40, 41, 43, 44, 45, 46, 48, 54, 59], [], [], [4, 5]),
    new PokeData("ハリーセン", 211, 65, 95, 75, 55, 55, 85, 10, 3, 45, 100, 8, [], null, [[1, 192], [1, 34], [1, 41], [10, 107], [10, 108], [19, 56], [28, 43], [37, 37], [46, 57]], [], [2, 3, 4, 6, 10, 13, 14, 16, 17, 18, 20, 21, 27, 32, 34, 35, 36, 39, 40, 44, 45, 53, 56, 57, 60], [], [49, 62, 115, 176], [11]),
    new PokeData("ハッサム", 212, 70, 130, 100, 55, 80, 65, 6, 8, 25, 200, 8, [], 123, [[1, 99], [1, 44], [6, 117], [12, 229], [18, 207], [24, 98], [30, 233], [36, 164], [42, 15], [48, 105]], [], [2, 3, 6, 8, 10, 11, 13, 15, 17, 20, 21, 27, 32, 34, 35, 37, 39, 43, 44, 45, 46, 47, 49, 51, 54], [], [], [2]),
    new PokeData("ツボツボ", 213, 20, 10, 230, 10, 230, 5, 6, 5, 190, 80, 8, [], null, [[1, 133], [1, 111], [9, 36], [14, 228], [23, 220], [28, 118], [37, 157]], [], [2, 3, 4, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 34, 35, 36, 37, 40, 44, 45, 54, 55], [], [231], [2]),
    new PokeData("ヘラクロス", 214, 80, 125, 75, 40, 95, 85, 6, 1, 45, 200, 8, [], null, [[1, 34], [1, 44], [6, 31], [12, 204], [19, 32], [27, 69], [35, 37], [44, 180], [54, 225]], [], [2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 32, 34, 35, 43, 44, 45, 46, 49, 51, 54], [], [107, 118, 176], [2]),
    new PokeData("ニューラ", 215, 55, 95, 55, 35, 75, 115, 16, 14, 60, 132, 8, [], null, [[1, 11], [1, 44], [9, 99], [17, 104], [25, 186], [33, 155], [41, 98], [49, 164], [57, 252], [65, 233]], [], [1, 2, 3, 6, 8, 9, 10, 13, 14, 16, 17, 18, 20, 21, 23, 27, 28, 30, 31, 32, 33, 34, 35, 39, 40, 42, 43, 44, 45, 46, 49, 50, 51, 53, 54, 60], [], [45, 69, 116, 181, 194], [4]),
    new PokeData("ヒメグマ", 216, 60, 80, 50, 50, 50, 40, 0, null, 120, 124, 8, [[217, 1, 30]], null, [[1, 11], [1, 44], [8, 123], [15, 155], [22, 186], [29, 157], [36, 164], [43, 174], [50, 38]], [], [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 17, 20, 21, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 44, 45, 46, 48, 49, 51, 54], [], [37, 69, 70, 117, 233, 243], [4]),
    new PokeData("リングマ", 217, 90, 130, 75, 75, 75, 55, 0, null, 60, 189, 8, [], 216, [[1, 11], [1, 44], [1, 123], [1, 155], [8, 123], [15, 155], [22, 186], [29, 157], [39, 164], [49, 174], [59, 38]], [], [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 17, 20, 21, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 44, 45, 46, 48, 49, 51, 54], [], [], [4]),
    new PokeData("マグマッグ", 218, 40, 40, 40, 70, 40, 20, 9, null, 190, 78, 8, [[219, 1, 38]], null, [[1, 124], [8, 53], [15, 89], [22, 107], [29, 134], [36, 54], [43, 158], [50, 35]], [], [3, 4, 6, 8, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 38, 40, 44, 45, 58], [], [152], [10]),
    new PokeData("マグカルゴ", 219, 50, 50, 120, 80, 80, 30, 9, 5, 75, 154, 8, [], 218, [[1, 124], [1, 53], [1, 89], [8, 53], [15, 89], [22, 107], [29, 134], [36, 54], [48, 158], [60, 35]], [], [3, 4, 6, 8, 10, 11, 13, 15, 17, 20, 21, 26, 27, 31, 32, 34, 35, 38, 40, 44, 45, 54, 58], [], [], [10]),
    new PokeData("ウリムー", 220, 50, 50, 40, 30, 30, 50, 14, 4, 225, 78, 8, [[221, 1, 33]], null, [[1, 34], [10, 182], [19, 204], [28, 37], [37, 55], [46, 60], [55, 134]], [], [2, 3, 5, 6, 8, 10, 13, 14, 16, 17, 18, 20, 21, 26, 27, 31, 32, 34, 35, 40, 43, 44, 45, 54, 60], [], [35, 37, 45, 158, 247], [4]),
    new PokeData("イノムー", 221, 100, 100, 80, 60, 60, 50, 14, 4, 75, 160, 8, [], 220, [[1, 31], [1, 182], [1, 204], [10, 182], [19, 204], [28, 37], [33, 32], [42, 55], [56, 60], [70, 134]], [], [2, 3, 5, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 26, 27, 31, 32, 34, 35, 40, 43, 44, 45, 54, 60], [], [], [4]),
    new PokeData("サニーゴ", 222, 55, 55, 85, 65, 85, 35, 10, 5, 60, 113, 12, [], null, [[1, 34], [7, 107], [13, 146], [19, 106], [25, 62], [31, 132], [37, 244], [43, 247]], [], [2, 3, 4, 6, 8, 10, 11, 13, 17, 18, 20, 21, 26, 27, 29, 31, 32, 34, 35, 37, 40, 44, 45, 53, 54, 56, 60], [], [55, 104, 134, 158, 220], [1, 8]),
    new PokeData("テッポウオ", 223, 35, 65, 35, 65, 35, 65, 10, null, 190, 78, 8, [[224, 1, 25]], null, [[1, 56], [11, 200], [22, 61], [22, 63], [22, 62], [33, 117], [44, 59], [55, 64]], [], [3, 6, 10, 13, 15, 17, 18, 20, 21, 27, 31, 32, 34, 35, 39, 40, 44, 45, 46, 53, 56, 58, 60], [], [49, 63, 104, 115, 191], [1, 11]),
    new PokeData("オクタン", 224, 75, 105, 75, 105, 75, 45, 10, null, 75, 164, 8, [], 223, [[1, 56], [11, 133], [22, 61], [22, 63], [22, 62], [25, 191], [38, 117], [54, 59], [70, 64]], [], [3, 6, 10, 13, 15, 17, 18, 20, 21, 27, 31, 32, 34, 35, 39, 40, 44, 45, 46, 53, 56, 58, 60], [], [], [1, 11]),
    new PokeData("デリバード", 225, 45, 55, 45, 65, 45, 75, 14, 2, 45, 183, 8, [], null, [[1, 218]], [], [2, 3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 52, 60], [], [63, 99, 151, 230, 249], [1, 4]),
    new PokeData("マンタイン", 226, 65, 40, 70, 80, 140, 70, 10, 2, 25, 168, 8, [], null, [[1, 34], [1, 146], [10, 49], [18, 62], [25, 37], [32, 98], [40, 18], [49, 110]], [], [2, 3, 6, 10, 13, 14, 16, 17, 18, 20, 21, 27, 31, 32, 34, 35, 39, 44, 45, 53, 56, 57, 60], [], [22, 57, 115, 240], [1]),
    new PokeData("エアームド", 227, 65, 80, 140, 40, 70, 70, 8, 2, 25, 168, 8, [], null, [[1, 44], [1, 65], [13, 29], [19, 130], [25, 98], [37, 32], [49, 212]], [], [3, 6, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 37, 39, 43, 44, 45, 46, 47, 51, 52], [], [19, 66, 144, 229], [3]),
    new PokeData("デルビル", 228, 45, 60, 30, 80, 50, 65, 16, 9, 120, 114, 8, [[229, 1, 24]], null, [[1, 44], [1, 53], [7, 47], [13, 124], [20, 45], [27, 186], [35, 54], [43, 243]], [], [2, 3, 5, 6, 8, 10, 11, 13, 17, 20, 21, 22, 23, 27, 30, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 45, 46, 50, 58], [], [69, 84, 100, 180, 181, 229, 252], [4]),
    new PokeData("ヘルガー", 229, 75, 90, 50, 110, 80, 95, 16, 9, 45, 204, 8, [], 228, [[1, 44], [1, 53], [7, 47], [13, 124], [20, 45], [30, 186], [41, 54], [52, 243]], [], [2, 3, 5, 6, 8, 10, 11, 13, 15, 17, 20, 21, 22, 23, 27, 30, 31, 32, 34, 35, 36, 38, 39, 42, 43, 44, 45, 46, 50, 54, 58], [], [], [4]),
    new PokeData("キングドラ", 230, 75, 95, 95, 95, 95, 85, 10, 15, 45, 207, 8, [], 117, [[1, 146], [1, 109], [1, 44], [1, 56], [8, 109], [15, 44], [22, 56], [29, 240], [40, 98], [51, 57]], [], [2, 3, 6, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 27, 32, 34, 35, 39, 44, 45, 53, 56, 57, 60], [], [], [1, 12]),
    new PokeData("ゴマゾウ", 231, 90, 60, 60, 40, 40, 40, 4, null, 120, 124, 8, [[232, 1, 25]], null, [[1, 34], [1, 46], [9, 112], [17, 176], [25, 37], [33, 206], [41, 204], [49, 39]], [], [2, 3, 4, 5, 6, 8, 10, 11, 13, 17, 20, 21, 26, 27, 31, 32, 34, 35, 37, 40, 44, 45, 54], [], [35, 56, 117, 247], [4]),
    new PokeData("ドンファン", 232, 90, 120, 120, 60, 60, 50, 4, null, 60, 189, 8, [], 231, [[1, 31], [1, 46], [9, 112], [17, 176], [25, 32], [33, 206], [41, 230], [49, 90]], [], [2, 3, 4, 5, 6, 8, 10, 11, 13, 15, 17, 20, 21, 26, 27, 31, 32, 34, 35, 37, 40, 44, 45, 54], [], [], [4]),
    new PokeData("ポリゴン２", 233, 85, 80, 90, 105, 95, 60, 0, null, 45, 180, null, [], 137, [[1, 177], [1, 34], [1, 161], [9, 98], [12, 61], [20, 106], [24, 112], [32, 200], [36, 162], [44, 193]], [], [3, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 27, 29, 32, 34, 35, 39, 40, 42, 44, 46, 50, 55, 59, 60], [], [], [13]),
    new PokeData("オドシシ", 234, 73, 95, 62, 85, 65, 85, 0, null, 45, 165, 8, [], null, [[1, 34], [8, 44], [15, 96], [23, 24], [31, 29], [40, 37], [49, 110]], [], [2, 3, 5, 6, 9, 10, 11, 13, 17, 18, 20, 21, 26, 27, 29, 31, 32, 34, 35, 39, 42, 43, 44, 45, 46, 50, 55], [], [45, 51, 114, 116, 181], [4]),
    new PokeData("ドーブル", 235, 55, 20, 35, 20, 45, 75, 0, null, 45, 106, 8, [], null, [[1, 167], [11, 167], [21, 167], [31, 167], [41, 167], [51, 167], [61, 167], [71, 167], [81, 167], [91, 167]], [], [], [], [], [4]),
    new PokeData("バルキー", 236, 35, 35, 35, 35, 35, 35, 1, null, 75, 91, 0, [[106, 5, 1], [107, 5, 2], [237, 5, 3]], null, [[1, 34]], [], [2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 27, 31, 32, 34, 35, 39, 43, 44, 45, 46, 54], [], [137, 171, 184, 230], [15]),
    new PokeData("カポエラー", 237, 50, 95, 95, 35, 110, 70, 1, null, 45, 138, 0, [], 236, [[1, 28], [7, 117], [13, 229], [19, 99], [25, 230], [31, 69], [37, 98], [43, 198], [49, 168]], [], [2, 3, 6, 8, 10, 11, 13, 17, 20, 21, 27, 28, 31, 32, 34, 35, 39, 43, 44, 45, 46, 54], [], [], [7]),
    new PokeData("ムチュール", 238, 45, 30, 15, 85, 65, 65, 14, 13, 45, 87, 16, [[124, 1, 30]], null, [[1, 2], [1, 123], [9, 187], [13, 182], [21, 94], [25, 48], [33, 213], [37, 95], [45, 196], [49, 60]], [], [1, 3, 6, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 27, 29, 30, 31, 32, 33, 34, 35, 42, 44, 45, 46, 50, 60], [], [97], [15]),
    new PokeData("エレキッド", 239, 45, 63, 37, 65, 55, 95, 12, null, 45, 106, 4, [[125, 1, 30]], null, [[1, 99], [1, 44], [9, 10], [17, 114], [25, 130], [33, 104], [41, 86], [49, 88]], [], [1, 2, 3, 6, 7, 10, 13, 17, 18, 20, 21, 25, 27, 29, 31, 32, 33, 34, 35, 39, 41, 43, 44, 45, 46, 48, 55, 59], [], [3, 28, 97, 113, 239], [15]),
    new PokeData("ブビィ", 240, 45, 75, 37, 70, 55, 83, 9, null, 45, 117, 4, [[126, 1, 30]], null, [[1, 53], [7, 44], [13, 124], [19, 8], [25, 109], [31, 242], [37, 54], [43, 110], [49, 127]], [], [1, 2, 3, 6, 10, 11, 13, 17, 20, 21, 23, 27, 29, 31, 32, 34, 35, 38, 41, 43, 44, 45, 46, 48, 58], [], [3, 6, 104, 113, 239], [15]),
    new PokeData("ミルタンク", 241, 95, 80, 105, 40, 70, 100, 0, null, 45, 200, 16, [], null, [[1, 34], [4, 46], [8, 112], [13, 24], [19, 209], [26, 118], [34, 206], [43, 35], [53, 216]], [], [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 40, 41, 44, 45, 48, 53, 54, 59, 60], [], [70, 180, 218], [4]),
    new PokeData("ハピナス", 242, 255, 10, 10, 75, 135, 55, 0, null, 30, 255, 16, [], 113, [[1, 2], [4, 46], [7, 40], [10, 136], [13, 4], [18, 108], [23, 48], [28, 122], [33, 112], [40, 114], [47, 39]], [], [1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 25, 27, 29, 30, 31, 32, 34, 35, 37, 38, 40, 42, 44, 45, 54, 55, 58, 59, 60], [], [], [5]),
    new PokeData("ライコウ", 243, 90, 85, 75, 115, 100, 115, 12, null, 3, 216, null, [], null, [[1, 45], [1, 44], [11, 85], [21, 47], [31, 99], [41, 210], [51, 116], [61, 243], [71, 88]], [], [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 20, 21, 23, 25, 27, 28, 31, 32, 34, 35, 37, 39, 43, 44, 51, 54, 55, 59], [], [], [15]),
    new PokeData("エンテイ", 244, 115, 115, 85, 90, 75, 100, 9, null, 3, 217, null, [], null, [[1, 45], [1, 44], [11, 53], [21, 47], [31, 84], [41, 24], [51, 54], [61, 208], [71, 127]], [], [2, 3, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 20, 21, 22, 23, 27, 28, 31, 32, 34, 35, 37, 38, 39, 43, 44, 51, 54, 55, 58], [], [], [15]),
    new PokeData("スイクン", 245, 100, 75, 115, 90, 115, 85, 10, null, 3, 215, null, [], null, [[1, 45], [1, 44], [11, 62], [21, 241], [31, 17], [41, 63], [51, 55], [61, 244], [71, 57]], [], [2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 21, 23, 27, 28, 31, 32, 34, 35, 37, 39, 43, 44, 51, 53, 56, 57, 60], [], [], [15]),
    new PokeData("ヨーギラス", 246, 50, 64, 50, 45, 50, 41, 5, 4, 45, 67, 8, [[247, 1, 30]], null, [[1, 45], [1, 44], [8, 202], [15, 104], [22, 158], [29, 38], [36, 185], [43, 243], [50, 90], [57, 64]], [], [2, 3, 6, 10, 11, 13, 15, 17, 18, 20, 21, 26, 27, 28, 31, 32, 34, 35, 37, 43, 44, 45], [], [24, 117, 201, 229, 247], [0]),
    new PokeData("サナギラス", 247, 70, 84, 70, 65, 70, 51, 5, 4, 45, 144, 8, [[248, 1, 55]], 246, [[1, 45], [1, 44], [1, 202], [1, 104], [8, 202], [15, 104], [22, 158], [29, 38], [38, 185], [47, 243], [56, 90], [65, 64]], [], [2, 3, 6, 10, 11, 13, 15, 17, 18, 20, 21, 26, 27, 28, 31, 32, 34, 35, 37, 43, 44, 45], [], [], [0]),
    new PokeData("バンギラス", 248, 100, 134, 110, 95, 100, 61, 5, 16, 45, 218, 8, [], 247, [[1, 45], [1, 44], [1, 202], [1, 104], [8, 202], [15, 104], [22, 158], [29, 38], [38, 185], [47, 243], [61, 90], [75, 64]], [], [1, 2, 3, 5, 6, 8, 10, 11, 13, 15, 17, 18, 20, 21, 23, 24, 26, 27, 28, 31, 32, 34, 35, 37, 38, 43, 44, 45, 48, 49, 50, 51, 53, 54, 58, 59, 60], [], [], [0]),
    new PokeData("ルギア", 249, 106, 90, 130, 90, 154, 110, 13, 2, 3, 220, null, [], null, [[1, 178], [11, 220], [22, 17], [33, 106], [44, 57], [55, 241], [66, 130], [77, 19], [88, 247], [99, 249]], [], [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 37, 39, 42, 43, 44, 47, 50, 52, 53, 54, 56, 57, 59, 60], [], [], [15]),
    new PokeData("ホウオウ", 250, 106, 130, 90, 110, 154, 90, 9, 2, 3, 220, null, [], null, [[1, 222], [11, 220], [22, 17], [33, 106], [44, 127], [55, 242], [66, 130], [77, 19], [88, 247], [99, 249]], [], [3, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 37, 38, 39, 42, 43, 44, 47, 50, 52, 54, 55, 58, 59], [], [], [15]),
    new PokeData("セレビィ", 251, 100, 100, 100, 100, 100, 100, 13, 11, 45, 64, null, [], null, [[1, 74], [1, 94], [1, 106], [1, 216], [10, 220], [20, 247], [30, 249], [40, 227], [50, 196]], [], [3, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 34, 35, 37, 39, 40, 42, 43, 44, 50, 55], [], [], [15])];

  sum() {
    return this.h + this.a + this.b + this.c + this.d + this.s;
  }

  static fromID(id) {
    return PokeData.raw[id - 1];
  }

  static index = Data.makeIndex(PokeData.raw, d => d.name);
  static fromName(name) {
    return PokeData.index[Data.normalizeName(name)];
  }

  static isOld(id) {
    return id < 152;
  }
  isOld() {
    return PokeData.isOld(this.id);
  }

  evFromPoke() {
    return PokeData.fromID(this.evFrom);
  }
  origin() {
    const from = this.evFrom;
    return from ? PokeData.fromID(from).origin() : this;
  }
}

[[133, [[1, 34], [1, 40], [8, 29], [16, 46], [23, 99], [30, 45], [36, 117], [42, 37]]],
 [167, [[1, 41], [1, 82], [6, 185], [11, 133], [17, 102], [23, 142], [30, 155], [37, 170], [45, 104], [53, 95]]],
 [168, [[1, 41], [1, 82], [1, 185], [1, 133], [6, 185], [11, 133], [17, 102], [25, 142], [34, 155], [43, 170], [53, 104], [63, 95]]],
 [245, [[1, 45], [1, 44], [11, 56], [21, 47], [31, 17], [41, 62], [51, 55], [61, 244], [71, 57]]]].forEach(pair => {
   const [no, alist] = pair;
   PokeData.fromID(no).gsLearnings = alist;
 });

class ItemData extends Data {
  constructor(name, id, effective) {
    super();
    this.name = name;
    this.id = id;
    this.effective = effective;
  }
  static raw = [
    new ItemData("", 0, false),
    ,
    new ItemData("マスターボール", 2, false),
    new ItemData("ハイパーボール", 3, false),
    new ItemData("ひかりのこな", 4, true),
    new ItemData("スーパーボール", 5, false),
    new ItemData("モンスターボール", 6, false),
    new ItemData("カビチュウ", 7, false),
    new ItemData("じてんしゃ", 8, false),
    new ItemData("つきのいし", 9, false),
    new ItemData("どくけし", 10, false),
    new ItemData("やけどなおし", 11, false),
    new ItemData("こおりなおし", 12, false),
    new ItemData("ねむけざまし", 13, false),
    new ItemData("まひなおし", 14, false),
    new ItemData("かいふくのくすり", 15, false),
    new ItemData("まんたんのくすり", 16, false),
    new ItemData("すごいキズぐすり", 17, false),
    new ItemData("いいキズぐすり", 18, false),
    new ItemData("キズぐすり", 19, false),
    new ItemData("あなぬけのヒモ", 20, false),
    new ItemData("むしよけスプレー", 21, false),
    new ItemData("ピーピーマックス", 22, false),
    new ItemData("ほのおのいし", 23, false),
    new ItemData("かみなりのいし", 24, false),
    new ItemData("みずのいし", 25, false),
    ,
    new ItemData("マックスアップ", 27, false),
    new ItemData("タウリン", 28, false),
    new ItemData("ブロムヘキシン", 29, false),
    new ItemData("インドメタシン", 30, false),
    new ItemData("ラッキーパンチ", 31, true),
    new ItemData("リゾチウム", 32, false),
    new ItemData("ふしぎなアメ", 33, false),
    new ItemData("ヨクアタール", 34, false),
    new ItemData("リーフのいし", 35, false),
    new ItemData("メタルパウダー", 36, true),
    new ItemData("きんのたま", 37, false),
    new ItemData("ピッピにんぎょう", 38, false),
    new ItemData("なんでもなおし", 39, false),
    new ItemData("げんきのかけら", 40, false),
    new ItemData("げんきのかたまり", 41, false),
    new ItemData("エフェクトガード", 42, false),
    new ItemData("シルバースプレー", 43, false),
    new ItemData("ゴールドスプレー", 44, false),
    new ItemData("クリティカッター", 45, false),
    ,
    new ItemData("おいしいみず", 47, false),
    new ItemData("サイコソーダ", 48, false),
    new ItemData("ミックスオレ", 49, false),
    new ItemData("プラスパワー", 50, false),
    ,
    new ItemData("ディフェンダー", 52, false),
    new ItemData("スピーダー", 53, false),
    new ItemData("スペシャルアップ", 54, false),
    new ItemData("コインケース", 55, false),
    new ItemData("ダウジングマシン", 56, false),
    ,
    new ItemData("がくしゅうそうち", 58, false),
    new ItemData("ぼろのつりざお", 59, false),
    new ItemData("いいつりざお", 60, false),
    new ItemData("ぎんのはっぱ", 61, false),
    new ItemData("すごいつりざお", 62, false),
    new ItemData("ポイントアップ", 63, false),
    new ItemData("ピーピーエイド", 64, false),
    new ItemData("ピーピーリカバー", 65, false),
    new ItemData("ピーピーエイダー", 66, false),
    new ItemData("あかいウロコ", 67, false),
    new ItemData("ひでんのくすり", 68, false),
    new ItemData("ふねのチケット", 69, false),
    new ItemData("ふしぎなタマゴ", 70, false),
    ,
    new ItemData("ぎんいろのはね", 72, false),
    new ItemData("モーモーミルク", 73, false),
    new ItemData("せんせいのツメ", 74, true),
    new ItemData("どくけしのみ", 75, true),
    new ItemData("きんのはっぱ", 76, false),
    new ItemData("やわらかいすな", 77, true),
    new ItemData("するどいくちばし", 78, true),
    new ItemData("まひなおしのみ", 79, true),
    new ItemData("やけたきのみ", 80, true),
    new ItemData("こおったきのみ", 81, true),
    new ItemData("どくバリ", 82, true),
    new ItemData("おうじゃのしるし", 83, true),
    new ItemData("にがいきのみ", 84, true),
    new ItemData("はっかのみ", 85, true),
    new ItemData("あかぼんぐり", 86, false),
    new ItemData("ちいさなキノコ", 87, false),
    new ItemData("おおきなキノコ", 88, false),
    new ItemData("ぎんのこな", 89, true),
    new ItemData("あおぼんぐり", 90, false),
    ,
    new ItemData("おまもりこばん", 92, false),
    new ItemData("きぼんぐり", 93, false),
    new ItemData("みどぼんぐり", 94, false),
    new ItemData("きよめのおふだ", 95, false),
    new ItemData("しんぴのしずく", 96, true),
    new ItemData("まがったスプーン", 97, true),
    new ItemData("しろぼんぐり", 98, false),
    new ItemData("くろおび", 99, true),
    new ItemData("くろぼんぐり", 100, false),
    ,
    new ItemData("ももぼんぐり", 102, false),
    new ItemData("くろいめがね", 103, true),
    new ItemData("おいしいシッポ", 104, false),
    new ItemData("ピンクのリボン", 105, true),
    new ItemData("ながねぎ", 106, true),
    new ItemData("けむりだま", 107, false),
    new ItemData("とけないこおり", 108, true),
    new ItemData("じしゃく", 109, true),
    new ItemData("きせきのみ", 110, true),
    new ItemData("しんじゅ", 111, false),
    new ItemData("おおきなしんじゅ", 112, false),
    new ItemData("かわらずのいし", 113, false),
    new ItemData("のろいのおふだ", 114, true),
    new ItemData("いかりまんじゅう", 115, false),
    ,
    ,
    new ItemData("きせきのタネ", 118, true),
    new ItemData("ふといホネ", 119, true),
    new ItemData("きあいのハチマキ", 120, true),
    ,
    new ItemData("ちからのこな", 122, false),
    new ItemData("ちからねっこ", 123, false),
    new ItemData("ばんのうごな", 124, false),
    new ItemData("ふっかつそう", 125, false),
    new ItemData("かたいいし", 126, true),
    new ItemData("しあわせタマゴ", 127, false),
    new ItemData("カードキー", 128, false),
    new ItemData("きかいのぶひん", 129, false),
    ,
    new ItemData("おとしもの", 131, false),
    new ItemData("ほしのすな", 132, false),
    new ItemData("ほしのかけら", 133, false),
    new ItemData("ちかのカギ", 134, false),
    new ItemData("ていきけん", 135, false),
    ,
    ,
    ,
    new ItemData("もくたん", 139, true),
    new ItemData("きのみジュース", 140, true),
    new ItemData("ピントレンズ", 141, true),
    ,
    ,
    new ItemData("メタルコート", 144, true),
    new ItemData("りゅうのキバ", 145, false),
    ,
    new ItemData("たべのこし", 147, true),
    ,
    ,
    ,
    new ItemData("ふしぎなきのみ", 151, true),
    new ItemData("りゅうのウロコ", 152, true),
    new ItemData("はかいのいでんし", 153, true),
    ,
    ,
    ,
    new ItemData("せいなるはい", 157, false),
    new ItemData("ヘビーボール", 158, false),
    new ItemData("はながらメール", 159, false),
    new ItemData("レベルボール", 160, false),
    new ItemData("ルアーボール", 161, false),
    new ItemData("スピードボール", 162, false),
    ,
    new ItemData("でんきだま", 164, true),
    new ItemData("フレンドボール", 165, false),
    new ItemData("ムーンボール", 166, false),
    new ItemData("ラブラブボール", 167, false),
    new ItemData("きのはこ", 168, false),
    new ItemData("きりのはこ", 169, false),
    new ItemData("たいようのいし", 170, false),
    new ItemData("みずたまリボン", 171, true),
    ,
    new ItemData("アップグレード", 173, false),
    new ItemData("きのみ", 174, true),
    new ItemData("おうごんのみ", 175, true),
    new ItemData("ゼニガメじょうろ", 176, false),
    ,
    new ItemData("パークボール", 178, false),
    new ItemData("にじいろのはね", 179, false),
    ,
    new ItemData("かわらのかけら", 181, false),
    new ItemData("なみのりメール", 182, false),
    new ItemData("みずいろメール", 183, false),
    new ItemData("にがおえメール", 184, false),
    new ItemData("ラブリーメール", 185, false),
    new ItemData("ブイブイメール", 186, false),
    new ItemData("へんしんメール", 187, false),
    new ItemData("あおぞらメール", 188, false),
    new ItemData("おんぷメール", 189, false),
    new ItemData("まぼろしメール", 190, false),
    ,
    new ItemData("わざましん01", 192, false),
    new ItemData("わざましん02", 193, false),
    new ItemData("わざましん03", 194, false),
    new ItemData("わざましん04", 195, false),
    ,
    new ItemData("わざましん05", 197, false),
    new ItemData("わざましん06", 198, false),
    new ItemData("わざましん07", 199, false),
    new ItemData("わざましん08", 200, false),
    new ItemData("わざましん09", 201, false),
    new ItemData("わざましん10", 202, false),
    new ItemData("わざましん11", 203, false),
    new ItemData("わざましん12", 204, false),
    new ItemData("わざましん13", 205, false),
    new ItemData("わざましん14", 206, false),
    new ItemData("わざましん15", 207, false),
    new ItemData("わざましん16", 208, false),
    new ItemData("わざましん17", 209, false),
    new ItemData("わざましん18", 210, false),
    new ItemData("わざましん19", 211, false),
    new ItemData("わざましん20", 212, false),
    new ItemData("わざましん21", 213, false),
    new ItemData("わざましん22", 214, false),
    new ItemData("わざましん23", 215, false),
    new ItemData("わざましん24", 216, false),
    new ItemData("わざましん25", 217, false),
    new ItemData("わざましん26", 218, false),
    new ItemData("わざましん27", 219, false),
    new ItemData("わざましん28", 220, false),
    ,
    new ItemData("わざましん29", 222, false),
    new ItemData("わざましん30", 223, false),
    new ItemData("わざましん31", 224, false),
    new ItemData("わざましん48", 225, false),
    new ItemData("わざましん49", 226, false),
    new ItemData("わざましん50", 227, false),
    new ItemData("ひでんましん01", 228, false),
    new ItemData("ひでんましん02", 229, false),
    new ItemData("ひでんましん03", 230, false),
    new ItemData("ひでんましん04", 231, false),
    new ItemData("ひでんましん05", 232, false),
    new ItemData("ひでんましん06", 233, false),
    new ItemData("ひでんましん07", 234, false)];

  static index = Data.makeIndex(ItemData.raw, item => item.name);

  static fromID(id) {
   return ItemData.raw[id];
  }
  static fromName(name) {
    return ItemData.index[Data.normalizeName(name)];
  }
}

class DistPokemon {
  constructor(poke, lv, moves, shiny, old) {
    this.poke = poke;
    this.lv = lv;
    this.moves = moves;
    this.shiny = shiny;
    this.old = old;
  }
  static list = [
    new DistPokemon(147, 15, [36, 87, 240, 246], false, false),

    new DistPokemon(83, 5, [227, 15, 98, 164], false, false),
    new DistPokemon(207, 5, [90, 41, 69, 18], false, false),

    new DistPokemon(1, 5, [34, 46, 247], true, false),
    new DistPokemon(4, 5, [11, 46, 243], true, false),
    new DistPokemon(54, 5, [11, 40, 81], true, false),
    new DistPokemon(152, 5, [34, 46, 81], true, false),
    new DistPokemon(158, 5, [11, 44, 67], true, false),
    new DistPokemon(163, 5, [34, 46, 102], true, false),
    new DistPokemon(172, 5, [85, 205, 147], true, false),
    new DistPokemon(172, 5, [85, 205, 81], true, false),
    new DistPokemon(172, 5, [85, 205, 48], true, false),
    new DistPokemon(173, 5, [2, 205, 228, 81], true, false),
    new DistPokemon(173, 5, [2, 205, 228, 130], true, false),
    new DistPokemon(174, 5, [48, 205, 112, 81], true, false),
    new DistPokemon(194, 5, [56, 40, 188], true, false),
    new DistPokemon(231, 5, [34, 46, 228], true, false),
    new DistPokemon(236, 5, [34, 147], true, false),
    new DistPokemon(238, 5, [2, 123, 119], true, false),
    new DistPokemon(238, 5, [2, 123, 81], true, false),
    new DistPokemon(240, 5, [53, 147], true, false),

    new DistPokemon(22, 25, [46, 44, 32, 7], false, true),
    new DistPokemon(25, 5, [85, 46, 58], false, true),
    new DistPokemon(25, 5, [85, 46, 20], false, true),
    new DistPokemon(78, 40, [53, 84, 24, 7], false, true),
    new DistPokemon(129, 15, [151, 83], false, true),
    new DistPokemon(54, 15, [11, 134], false, true)];
}

DistPokemon.poke = [];

DistPokemon.list.forEach(dist => {
  DistPokemon.poke[dist.poke] = true;
});

class BattleRule {
  constructor(name, enterablePokemons, levelMin, levelMax,
              baseRule = undefined, options = undefined) {
    this.name = name;
    this.enterablePokemons = enterablePokemons;
    this.levelMin = levelMin;
    this.levelMax = levelMax;
    this.baseRule = baseRule;

    if (options) {
      ["description",
       "popularAll",
       "extraPopularPokemons",
       "extension"
      ].forEach(opt => {
        const val = options[opt];
        if (val != null) {
          this[opt] = val === "inherit" ? baseRule[opt] : options[opt];
        }
      });
    }
    ["fullName",
     "lighter"
    ].forEach(opt => {
      this[opt] = (options && options[opt]) ?? name;
    });
    ["forbiddenMoves",
     "forbiddenItems"
    ].forEach(opt => {
      this[opt] = ((options && options[opt]) ?? []).concat(
        this.baseRule ?
          this.baseRule[opt] :
          []
      ).sort((i, j) => i - j);
    });
  }
  static allPokemons = PokeData.raw.map(poke => poke.id);
  static makeFromObject(obj) {
    const baseRule = obj.baseRule && BattleRule.index.get(obj.baseRule);
    const basePokemons = baseRule ?
          baseRule.enterablePokemons :
          BattleRule.allPokemons;
    const baseEntrablePokemons = obj.enterablePokemons ?? basePokemons;
    const enterablePokemons0 = (obj.additionalEntrablePokemons ?? []).concat(
      baseEntrablePokemons);
    const enterablePokemons = obj.forbiddenPokemons ?
          enterablePokemons0.filter(
            id => !obj.forbiddenPokemons.includes(id)) :
          enterablePokemons0;

    enterablePokemons.sort((i, j) => i - j);

    return new BattleRule(obj.name,
                          enterablePokemons,
                          obj.levelMin ?? obj.level ?? baseRule.levelMin ?? 100,
                          obj.levelMax ?? obj.level ?? baseRule.levelMax ?? 100,
                          baseRule,
                          obj);
  }
  static isFinalFormPokemon(id) {
    return PokeData.fromID(id).evList.length === 0;
  }
  isFinalFormPokemon(id) {
    return !PokeData.fromID(id).evList.map(([to, , ]) => to).some(id => this.enterablePokemons.includes(id));
  }
  getPopularPokemons() {
    if (this.popularAll) {
      return this.enterablePokemons;
    }
    else {
      const finalForms = this.enterablePokemons.filter(id => this.isFinalFormPokemon(id));
      return this.extraPopularPokemons ?
        finalForms.concat(this.extraPopularPokemons).sort((i, j) => i - j) :
        finalForms;
    }
  }

  static list = [];
  static index = new Map();

  static fromName(name) {
    return BattleRule.index.get(String(name));
  }
}

{
  const data = [
    {
      "name": "2000!",
      "fullName": "ニンテンドウカップ2000",
      "aliases": ["ニンテンドウカップ2000いちげきあり"],
      "levelMin": 50,
      "levelMax": 55,
      "forbiddenPokemons": [150, 151, 249, 250, 251],
      "extraPopularPokemons": [25, 61, 93, 95, 113, 123, 148]
    },
    {
      "baseRule": "2000!",
      "name": "2000",
      "fullName": "ニンテンドウカップ2000(一撃なし)",
      "aliases": ["ニンテンドウカップ2000"],
      "forbiddenPokemons": [150, 151, 249, 250, 251],
      "extraPopularPokemons": "inherit",
      "forbiddenMoves": [13, 33, 91],
    },
    {
      "baseRule": "2000",
      "name": "minor",
      "fullName": "マイナーカップ",
      "aliases": ["マイナーカップ"],
      "lighter": "マイナー",
      "enterablePokemons": BattleRule.allPokemons.filter(id => !BattleRule.isFinalFormPokemon(id)),
      "additionalEntrablePokemons": [12, 15, 18, 20, 22, 40, 47, 83, 108, 114, 119, 132, 162, 164, 166, 168, 176, 184, 185, 190, 192, 193, 198, 201, 202, 206, 219, 222, 225],
      "forbiddenPokemons": [64, 67, 93, 113, 117, 123, 148],
      "forbiddenMoves": [188],
      "forbiddenItems": [119, 153, 164]
    },
    {
      "baseRule": "minor",
      "name": "middle",
      "fullName": "ミドルカップ(version 0.3.1)",
      "aliases": ["ミドルカップ"],
      "lighter": "ミドル",
      "additionalEntrablePokemons": [24, 26, 38, 45, 49, 53, 55, 67, 78, 82, 85, 87, 93, 97, 99, 101, 107, 110, 113, 117, 122, 127, 136, 141, 148, 178, 182, 186, 189, 195, 203, 208, 210, 211, 213, 215, 224, 226],
      "extraPopularPokemons": [61, 95],
      "forbiddenMoves": [238]
    },
    {
      "baseRule": "2000",
      "name": "2006",
      "extraPopularPokemons": "inherit",
      "extension": {
        "ranks": ["S", "A", "B"],
        "rank": {
          "S": [143],
          "A": [65, 68, 91, 94, 103, 105, 121, 115, 128, 145, 146, 197, 200, 205, 214, 227, 233, 242, 243, 245, 248],
          "B": [3, 6, 9, 25, 26, 31, 34, 36, 57, 59, 62, 64, 71, 73, 76, 80, 82, 89, 93, 101, 110, 112, 113, 123, 124, 125, 126, 130, 131, 134, 135, 139, 142, 144, 149, 154, 157, 160, 169, 171, 181, 186, 189, 195, 196, 199, 208, 212, 213, 217, 221, 229, 230, 232, 235, 241, 244]
        }
      }
    },
    {
      "baseRule": "2000",
      "name": "gsfancy",
      "fullName": "金銀ファンシー",
      "aliases": ["きんぎんファンシー"],
      "levelMin": 25,
      "levelMax": 30,
      "enterablePokemons": [1, 4, 7, 10, 13, 16, 19, 21, 23, 25, 27, 29, 32, 35, 37, 39, 41, 43, 46, 50, 52, 54, 58, 60, 63, 66, 69, 74, 81, 83, 90, 92, 98, 100, 102, 104, 109, 116, 118, 129, 132, 133, 138, 140, 147, 152, 155, 158, 161, 165, 167, 170, 172, 173, 174, 175, 177, 179, 183, 187, 190, 191, 194, 198, 200, 201, 204, 206, 209, 211, 216, 220, 222, 223, 225, 228, 238],
      "forbiddenItems": [119, 164],
    },
    {
      "baseRule": "2000",
      "name": "1000",
      "popularAll": true,
      "forbiddenItems": [119, 164],
      "extension": {
        "cost": poke => poke.id === 235 ? 500 : poke.sum()
      }
    }
  ];
  for (const obj of data) {
    const rule = BattleRule.makeFromObject(obj);
    BattleRule.list.push(rule);
    BattleRule.index.set(rule.name, rule);
    obj.aliases?.forEach(alias => {
      BattleRule.index.set(alias, rule);
    });
  }
}

// --- Roma ---
function roma(str, keepRaw) {
  const re = /(([b-df-hj-mp-tv-z])\2*(?=\2))|((?:[b-df-hj-np-tv-z]|[cw]h|[b-df-hj-npr-tvxz]y|[bdgkmpstz][hw]|ts|)[aiueo]|[-0-9])|(xts?u)|(nn?)/gi;
  function f(sub, gs1, _, s, gs2, sn) {
    if (gs1) {
      if (gs1.length == 1) {
        return "[っッ]";
      }
      else {
        return "[っッ]{" + gs1.length + "}";
      }
    }
    else if (s) {
      return roma.table[s];
    }
    else if (gs2) {
      return "[っッ]";
    }
    else if (sn) {
      return "[んン]";
    }
    else {
      throw new Error("implementation error! " + sub);
    }
  }
  return str.replace(re, keepRaw ? (sub, ...args) => `(?:${sub}|${f(sub, ...args)})` : f);
}

roma.table = {
  a: "[あア]", i: "[いイ]", u: "[うウ]", e: "[えエ]", o: "[おオ]",
  ba: "[ばバ]", bi: "[びビ]", bu: "[ぶブ]", be: "[べベ]", bo: "[ぼボ]",
  bya: "[びビ][ゃャ]", byi: "[びビ][ぃィ]", byu: "[びビ][ゅュ]", bye: "[びビ][ぇェ]", byo: "[びビ][ょョ]",
  bha: "[ばバ][ぁァ]", bhi: "[ばバ][ぃィ]", bhu: "[ばバ][ぅゥ]", bhe: "[ばバ][ぃィ]", bho: "[ばバ][ぃィ]",
  bwa: "[びビ][ゎヮ]", bwi: "[びビ][ぃィ]", bwu: "[びビ][ぅゥ]", bwe: "[びビ][ぇェ]", bwo: "[びビ][ぉォ]",
  ca: "[かカ]", ci: "[しシ]", cu: "[くク]", ce: "[せセ]", co: "[こコ]",
  cya: "[ちチ][ゃャ]", cyi: "[ちチ][ぃィ]", cyu: "[ちチ][ゅュ]", cye: "[ちチ][ぇェ]", cyo: "[ちチ][ょョ]",
  cha: "[ちチ][ゃャ]", chi: "[ちチ]", chu: "[ちチ][ゅュ]", che: "[ちチ][ぇェ]", cho: "[ちチ][ょョ]",
  da: "[だダ]", di: "[ぢヂ]", du: "[づヅ]", de: "[でデ]", "do": "[どド]",
  dya: "[ぢヂ][ゃャ]", dyi: "[ぢヂ][ぃィ]", dyu: "[ぢヂ][ゅュ]", dye: "[ぢヂ][ぇェ]", dyo: "[ぢヂ][ょョ]",
  dha: "[でデ][ゃャ]", dhi: "[でデ][ぃィ]", dhu: "[でデ][ゅュ]", dhe: "[でデ][ぇェ]", dho: "[でデ][ょョ]",
  dwa: "[どド][ぁァ]", dwi: "[どド][ぃィ]", dwu: "[どド][ぅゥ]", dwe: "[どド][ぇェ]", dwo: "[どド][ぉォ]",
  fa: "[ふフ][ぁァ]", fi: "[ふフ][ぃィ]", fu: "[ふフ]", fe: "[ふフ][ぇェ]", fo: "[ふフ][ぉォ]",
  fya: "[ふフ][ゃャ]", fyi: "[ふフ][ぃィ]", fyu: "[ふフ][ゅュ]", fye: "[ふフ][ぇェ]", fyo: "[ふフ][ょョ]",
  ga: "[がガ]", gi: "[ぎギ]", gu: "[ぐグ]", ge: "[げゲ]", go: "[ごゴ]",
  gya: "[ぎギ][ゃャ]", gyi: "[ぎギ][ぃィ]", gyu: "[ぎギ][ゅュ]", gye: "[ぎギ][ぇェ]", gyo: "[ぎギ][ょョ]",
  gha: "[ぐグ][ぁァ]", ghi: "[ぐグ][ぃィ]", ghu: "[ぐグ][ぅゥ]", ghe: "[ぐグ][ぇェ]", gho: "[ぐグ][ぉォ]",
  gwa: "[ぐグ][ぁァ]", gwi: "[ぐグ][ぃィ]", gwu: "[ぐグ][ぅゥ]", gwe: "[ぐグ][ぇェ]", gwo: "[ぐグ][ぉォ]",
  ha: "[はハ]", hi: "[ひヒ]", hu: "[ふフ]", he: "[へヘ]", ho: "[ほホ]",
  hya: "[ひヒ][ゃャ]", hyi: "[ひヒ][ぃィ]", hyu: "[ひヒ][ゅュ]", hye: "[ひヒ][ぇェ]", hyo: "[ひヒ][ょョ]",
  ja: "[じジ][ゃャ]", ji: "[じジ]", ju: "[じジ][ゅュ]", je: "[じジ][ぇェ]", jo: "[じジ][ょョ]",
  jya: "[じジ][ゃャ]", jyi: "[じジ][ぃィ]", jyu: "[じジ][ゅュ]", jye: "[じジ][ぇェ]", jyo: "[じジ][ょョ]",
  ka: "[かカ]", ki: "[きキ]", ku: "[くク]", ke: "[けケ]", ko: "[こコ]",
  kya: "[きキ][ゃャ]", kyi: "[きキ][ぃィ]", kyu: "[きキ][ゅュ]", kye: "[きキ][ぇェ]", kyo: "[きキ][ょョ]",
  kha: "[くク][ぁァ]", khi: "[くク][ぃィ]", khu: "[くク][ぅゥ]", khe: "[くク][ぇェ]", kho: "[くク][ぉォ]",
  kwa: "[くク][ぁァ]", kwi: "[くク][ぃィ]", kwu: "[くク][ぅゥ]", kwe: "[くク][ぇェ]", kwo: "[くク][ぉォ]",
  la: "[らラ]", li: "[りリ]", lu: "[るル]", le: "[れレ]", lo: "[ろロ]",
  lya: "[りリ][ゃャ]", lyi: "[りリ][ぃィ]", lyu: "[りリ][ゅュ]", lye: "[りリ][ぇェ]", lyo: "[りリ][ょョ]",
  ma: "[まマ]", mi: "[みミ]", mu: "[むム]", me: "[めメ]", mo: "[もモ]",
  mya: "[みミ][ゃャ]", myi: "[みミ][ぃィ]", myu: "[みミ][ゅュ]", mye: "[みミ][ぇェ]", myo: "[みミ][ょョ]",
  mha: "[むム][ぁァ]", mhi: "[むム][ぃィ]", mhu: "[むム][ぅゥ]", mhe: "[むム][ぇェ]", mho: "[むム][ぉォ]",
  mwa: "[むム][ゎヮ]", mwi: "[むム][ぃィ]", mwu: "[むム][ぅゥ]", mwe: "[むム][ぇェ]", mwo: "[むム][ぉォ]",
  na: "[なナ]", ni: "[にニ]", nu: "[ぬヌ]", ne: "[ねネ]", no: "[のノ]",
  nya: "[にニ][ゃャ]", nyi: "[にニ][ぃィ]", nyu: "[にニ][ゅュ]", nye: "[にニ][ぇェ]", nyo: "[にニ][ょョ]",
  pa: "[ぱパ]", pi: "[ぴピ]", pu: "[ぷプ]", pe: "[ぺペ]", po: "[ぽポ]",
  pya: "[ぴピ][ゃャ]", pyi: "[ぴピ][ぃィ]", pyu: "[ぴピ][ゅュ]", pye: "[ぴピ][ぇェ]", pyo: "[ぴピ][ょョ]",
  pha: "[ぷプ][ぁァ]", phi: "[ぷプ][ぃィ]", phu: "[ぷプ][ぅゥ]", phe: "[ぷプ][ぇェ]", pho: "[ぷプ][ぉォ]",
  pwa: "[ぷプ][ゎヮ]", pwi: "[ぷプ][ぃィ]", pwu: "[ぷプ][ぅゥ]", pwe: "[ぷプ][ぇェ]", pwo: "[ぷプ][ぉォ]",
  qa: "[くク][ぁァ]", qi: "[くク][ぃィ]", qu: "[くク][ぅゥ]", qe: "[くク][ぇェ]", qo: "[くク][ぉォ]",
  ra: "[らラ]", ri: "[りリ]", ru: "[るル]", re: "[れレ]", ro: "[ろロ]",
  rya: "[りリ][ゃャ]", ryi: "[りリ][ぃィ]", ryu: "[りリ][ゅュ]", rye: "[りリ][ぇェ]", ryo: "[りリ][ょョ]",
  sa: "[さサ]", si: "[しシ]", su: "[すス]", se: "[せセ]", so: "[そソ]",
  sya: "[しシ][ゃャ]", syi: "[しシ][ぃィ]", syu: "[しシ][ゅュ]", sye: "[しシ][ぇェ]", syo: "[しシ][ょョ]",
  sha: "[しシ][ゃャ]", shi: "[しシ]", shu: "[しシ][ゅュ]", she: "[しシ][ぇェ]", sho: "[しシ][ょョ]",
  swa: "[すス][ぁァ]", swi: "[すス][ぃィ]", swu: "[すス][ぅゥ]", swe: "[すス][ぇェ]", swo: "[すス][ぉォ]",
  ta: "[たタ]", ti: "[ちチ]", tu: "[つツ]", te: "[てテ]", to: "[とト]",
  tya: "[ちチ][ゃャ]", tyi: "[ちチ][ぃィ]", tyu: "[ちチ][ゅュ]", tye: "[ちチ][ぇェ]", tyo: "[ちチ][ょョ]",
  tha: "[てテ][ゃャ]", thi: "[てテ][ぃィ]", thu: "[てテ][ゅュ]", the: "[てテ][ぇェ]", tho: "[てテ][ょョ]",
  twa: "[とト][ぁァ]", twi: "[とト][ぃィ]", twu: "[とト][ぅゥ]", twe: "[とト][ぇェ]", two: "[とト][ぉォ]",
  va: "[ゔヴ][ぁァ]", vi: "[ゔヴ][ぃィ]", vu: "[ゔヴ]", ve: "[ゔヴ][ぇェ]", vo: "[ゔヴ][ぉォ]",
  vya: "[ゔヴ][ゃャ]", vyi: "[ゔヴ][ぃィ]", vyu: "[ゔヴ][ゅュ]", vye: "[ゔヴ][ぇェ]", vyo: "[ゔヴ][ょョ]",
  wa: "[わワ]", wi: "[うウ][ぃィ]", wu: "[うウ]", we: "[うウ][ぇェ]", wo: "[をヲ]", wyi: "[ゐヰ]", wye: "[ゑヱ]",
  wha: "[うウ][ぁァ]", whi: "[うウ][ぃィ]", whu: "[うウ]", whe: "[うウ][ぇェ]", who: "[うウ][ぉォ]",
  xa: "[ぁァ]", xi: "[ぃィ]", xu: "[ぅゥ]", xe: "[ぇェ]", xo: "[ぉォ]",
  xya: "[ゃャ]", xyi: "[ぃィ]", xyu: "[ゅュ]", xye: "[ぇェ]", xyo: "[ょョ]",
  ya: "[やヤ]", yi: "[いイ]", yu: "[ゆユ]", ye: "[いイ][ぇェ]", yo: "[よヨ]",
  za: "[ざザ]", zi: "[じジ]", zu: "[ずズ]", ze: "[ぜゼ]", zo: "[ぞゾ]",
  zya: "[じジ][ゃャ]", zyi: "[じジ][ぃィ]", zyu: "[じジ][ゅュ]", zye: "[じジ][ぇェ]", zyo: "[じジ][ょョ]",
  zha: "[ずズ][ぁァ]", zhi: "[ずズ][ぃィ]", zhu: "[ずズ][ぅゥ]", zhe: "[ずズ][ぇェ]", zho: "[ずズ][ぉォ]",
  zwa: "[ずズ][ゎヮ]", zwi: "[ずズ][ぃィ]", zwu: "[ずズ][ぅゥ]", zwe: "[ずズ][ぇェ]", zwo: "[ずズ][ぉォ]",
  tsa: "[つツ][ぁァ]", tsi: "[つツ][ぃィ]", tsu: "[つツ]", tse: "[つツ][ぇェ]", tso: "[つツ][ぉォ]",
  0: "０", 1: "１", 2: "２", 3: "３", 4: "４", 5: "５", 6: "６", 7: "７", 8: "８", 9: "９", "-": "ー"
};

// --- DoubleLinkedHashMap ---
class DoubleLinkedHashMapEntry {
  constructor(value, key, next, prev) {
    this.value = value;
    this.key = key;
    this.next = next || this;
    this.prev = prev || this;
    }
}

class DoubleLinkedHashMap {
  constructor() {
    this.table = Object.create(null);
    this.pos = null;
  }
  noEmpty() {
    if (!this.pos) {
      throw new Error("No empty HashMap");
    }
  }
  next() {
    this.noEmpty();
    return this.pos.next.value;
  }
  previous() {
    this.noEmpty();
    return this.pos.prev.value;
  }
  get(k) {
    const entry = this.table[k];
    return entry && entry.value;
  }
  getHead() {
    this.noEmpty();
    return this.pos.value;
  }
  setHead(k) {
    const entry = this.table[k];
    if (entry) {
      this.pos = entry;
    }
    else {
      throw new Error("Key not found: " + k);
    }
  }
  push(k, v) {
    let entry;
    if (this.table[k]) {
      throw new Error("Already exist key: " + k);
    }
    if (this.pos) {
      entry = new DoubleLinkedHashMapEntry(v, k, this.pos, this.pos.prev);
      entry.next.prev = entry;
      entry.prev.next = entry;
    }
    else {
      entry = new DoubleLinkedHashMapEntry(v, k);
    }
    this.pos = this.table[k] = entry;
  }
  pushBack(k, v) {
    this.push(k, v);
    this.pos = this.pos.next;
  }
  remove(k) {
    const entry = this.table[k];
    if (entry) {
      if (entry.next == entry) {
        this.pos = null;
      }
      else {
        if (this.pos == entry) {
          this.pos = entry.next;
        }
        entry.next.prev = entry.prev;
        entry.prev.next = entry.next;
      }
      delete this.table[k];
    }
    else {
      throw new Error("Key not found: " + k);
    }
  }
  forEach(f) {
    const start = this.pos;
    if (start) {
      let entry = start;
      do {
        f(entry.value, entry.key);
        entry = entry.next;
      } while (!(entry == start));
    }
  }
  some(f) {
    const start = this.pos;
    if (start) {
      let entry = start;
      do {
        if (f(entry.value, entry.key)) {
          return true;
        };
        entry = entry.next;
      } while (!(entry == start));
      return false;
    }
    else {
      return true;
    }
  }
  map(f) {
    const res = [];
    this.forEach(function (v, k) { res.push(f(v, k)); });
    return res;
  }
  toString() {
    return "DoubleLinkedHashMap(" + this.map(function (v, k) { return k + ": " + v; }).join(", ") + ")";
  }
}

// --- Error ---
class XPDError extends Error {
  constructor(message) {
    super(message);
    this.name = this.constructor.name;
  }
}

class ImplementationError extends XPDError {
  constructor(message) {
    super(message);
  }
}

class NoPartyError extends ImplementationError {
  constructor(no) {
    super("party " + no + " doesn't exist");
    this.no = no;
  }
}
/*
function NoBufferError(name) {
    this.name = name;
    ImplementationError.call(this, "buffer " + name + " doesn't exist");
}
NoBufferError.prototype.__proto__ = ImplementationError.prototype;
*/
class UserError extends XPDError {
  constructor(message) {
    super(message);
  }
}

class PartyNotFound extends UserError {
  constructor(no) {
    super( "パーティ " + no + " はありません。");
    this.no = no;
  }
}

class BufferNotFound extends UserError {
  constructor(name) {
    super("バッファ " + name + " はありません。");
    this.name = name;
  }
}

class WrongNumberOfPoke extends UserError {
  constructor() {
    super("ポケモンの数が6匹ではありません");
  }
}

class InvalidInput extends UserError {
  constructor(message) {
    super(message);
  }
}

class InvalidValueOfTextbox extends InvalidInput {
  constructor(message, textbox) {
    super(message);
    this.textbox = textbox;
  }
}

class HTTPError extends XPDError {
  constructor(message) {
    super(message);
  }
}

class BadHTTPResponse extends HTTPError {
  constructor(message, response) {
    super(message + "\nstatus: " + response.status);
    this.response = response;
  }
}

// --- System ---
const initializeHooks = [];

function getNumber() {
  return $f.CBAN.value-0;
}

function setNumber(n) {
  return $f.CBAN.value = n;
}

function getCookie(n) {
  const a = $d.cookie.split(";");
  for (let i = 0; i < a.length; i++) {
    if (new RegExp("PD" + (n - 1) + "=(.+)").exec(a[i])) {
      if (RegExp.$1 == "2") {
        return null;
      }
      return RegExp.$1.slice(4).split("_x_");
    }
  }
  return null;
}

function getCookies() {
  const a = $d.cookie.split(";");
  const ary = new Array(a.length);
  for (let i = 0; i < a.length; i++) {
    if (new RegExp("PD(\\d+)" + "=(.+)").exec(a[i])) {
      if (RegExp.$2 != "2") {
        ary[RegExp.$1] = RegExp.$2.slice(4).split("_x_");
      }
    }
  }
  return ary;
}

function setCookie(name, value) {
  const expires = (new Date).toGMTString().replace(/\d\d\d\d/, function (s) { return parseInt(s) + 5; });
  const val = name + "=" + value + "; expires=" + expires + "; path=/_/; sameSite=lax";
  $d.cookie = val;
}

function deleteCookie(name) {
  $d.cookie = name + "=; expires=" + (new Date((new Date()) - 3600)).toGMTString() + "; path=/_/; sameSite=lax";
}

function extendCookiesDeadline(cookie) {
  const a = (cookie ?? $d.cookie).split(";");
  a.forEach(function (s) {
    const ma = /(.+?)=(.+)/.exec(s);
    setCookie(ma[1], ma[2]);
  });
}

function Poke() {}
/*PDの形式からポケモンオブジェクトを生成する*/
Poke.fromPD = function(pd_str, force) {
  /* format check */
  if(!force && !/^(?:\d{1,3}_){2}(?:[0-9a-f]_){4}(?:\d{1,2}_){5}(?:\d{1,3}_){4}(?:\d{1,2}_){4}(?:[0-3]_){4}\d{1,3}_0?_\d{1,3}$/i.test(pd_str)) {
    throw new ImplementationError("wrong pd format: " + pd_str);
  }
  const a = pd_str.split("_");
  const poke = new Poke();
  poke.no = a[0];
  poke.lv = a[1];
  poke.id = [a[2], a[3], a[4], a[5]];
  poke.ef = [a[6], a[7], a[8], a[9], a[10]];
  poke.mv = [a[11], a[12], a[13], a[14]];
  poke.pp = [a[15], a[16], a[17], a[18]];
  poke.p_up = [a[19], a[20], a[21], a[22]];
  poke.h = a[23];
  poke.item = a[25];
  /* validation check */
  if (!(PokeData.fromID(poke.no) && poke.lv >= 1 && poke.lv <= 100 &&
        poke.ef.every(function (i) { return i >= 0 && i <= 63; }) &&
        poke.mv.every(function (i) { return MoveData.fromID(i); }) &&
        poke.p_up.every(function (i) { return i >= 0 && i <= 3; }) &&
        ItemData.fromID(poke.item))) {
    throw new ImplementationError("wrong pd value: " + pd_str);
  }
  return poke;
};

const consPoke = function (i) { return Poke.fromPD(i); };

function initLoadParty() {
  const pd = $f.PD.value;
  const pd_ary = pd ? pd.split("_x_") : getCookie(getNumber());
  if (pd_ary.length != 6) {
    throw new WrongNumberOfPoke;
  }
  return pd_ary.map(function (pd_str) { return Poke.fromPD(pd_str, true); });
}

function loadParty(i) {
  const pd = $f.PD.value;
  const a = i == null ? (pd ? pd.split("_x_") : getCookie(getNumber())) : getCookie(i);
  if (a == null) {
    throw new NoPartyError(i);
  }
  if (a.length != 6) {
    throw new WrongNumberOfPoke;
  }
  return a.map(consPoke);
}

function loadParties() {
  return getCookies().map(function (i) { return i.map(consPoke); });
}

function partyReflectForm(poke) {
  const len = getPokeNum();
  const form = $f;
  for (let i = 0; i < len; i++) {
    form["POKE" + i].value = PokeData.fromID(poke[i].no).name;
    form["LV" + i].value = poke[i].lv;
    form["KO" + i].value = poke[i].id.join("");
    for (let j = 0; j < 5; j++) {
      form["EF" + i + "_" + j].value = poke[i].ef[j];
    }
    for (let j = 0; j < 4; j++) {
      form["WAZA" + i + "_" + j].value = MoveData.fromID(poke[i].mv[j]).name;
    }
    form["ITEM" + i].value = ItemData.fromID(poke[i].item).name;
  }
  formRefresh();
}

var bufferMap = new DoubleLinkedHashMap;
class Buffer {
  constructor(name, party) {
    this.name = name;     /* 特殊 */

    this.party = party;                  /* バッファローカル */
    this.pref = Object.create(xpd.pref); /* バッファローカル */

    this.pd = "";       /* 退避 */
    this.form = null;   /* 退避 */
  }
  static getTexts() {
    return Array.prototype.filter.call($d.getElementsByTagName("input"),
                                       t => t.type == "text");
  }
  saveForm() {
    const texts = Buffer.getTexts();
    this.form = texts.map(t => t.value);
    this.pd = $f.PD.value;
  }
  restoreForm() {
    setNumber(this.name);
    $f.PD.value = this.pd;

    const form = this.form;
    if (form) {
      const texts = Buffer.getTexts();
      texts.forEach((t, i) => { t.value = form[i]; });
    }
    else {
      partyReflectForm(this.party);
    }
    drawModeLine();
    formRefresh();
  }
  changes() {
    if (this == currentBuffer()) {
      this.saveForm();
    }
    const n = Number(this.name);

    const texts = Buffer.getTexts();
    const pseudoForm = {};
    texts.forEach((t, i) => {
      pseudoForm[t.name] = { value: this.form[i] };
    });
    try {
      setPoke(pseudoForm, this);
      const pd = getPD(this.party);
      return getCookie(n).join("_x_") != pd;
    }
    catch (e) {
      if (e instanceof InvalidValueOfTextbox) {
        return true;
      }
      else {
        throw e;
      }
    }
  }
};

function currentBuffer() {
  return bufferMap.getHead();
}

function getBuffer(name) {
  return bufferMap.get(name);
}

function initialBuffer(name, party) {
  bufferMap.push(name, new Buffer(name, party));
}

function makeBuffer(name, party) {
  let buf = getBuffer(name);
  if (!buf) {
    bufferMap.pushBack(name, buf = new Buffer(name, party));
  }
  return buf;
}

function selectBuffer(buf) {
  const name = buf.name;
  if (getBuffer(name)) {
    currentBuffer().saveForm();
    bufferMap.setHead(name);
    currentBuffer().restoreForm();
  }
  else {
    throw new ImplementationError("Buffer `" + buf.toSource() + "' is not in bufferMap");
  }
}

function killBuffer0(buf) {
  const pos = bufferMap.pos;
  if (pos && pos != pos.next) {
    if (buf == currentBuffer()) {
      selectBuffer(pos.next.value);
    }
    bufferMap.remove(buf.name);
  }
  else {
    throw new UserError("バッファが少なすぎます。");
  }
}

function getPokeNum() {
  return $d.getElementsByTagName('table')[0].rows.length - 1;
}

function calcHP(h, lv, hp_id, hp_ef) {
  return Math.floor(((h + hp_id) * 2 + hp_ef) * lv / 100) + lv + 10;
}

function calcHPId(id) {
  let result = 0;
  for (let i = 0; i < 4; i++) {
    result += (parseInt("0x" + id[i]) % 2) * Math.pow(2, 3 - i);
  }
  return result;
}
function getId(n, form) {
  form = form ?? $f;
  const box = form["KO" + n];
  const ko = box.value;
  if (ko.length != 4 || isNaN(parseInt("0x" + ko))) {
    throw new InvalidValueOfTextbox((parseInt(n) + 1) + "匹目の個体値が不正です。", box);
  }
  return ko.split("");
}

function setPoke(form, buffer) {
  const poke_num = getPokeNum();
  form = form ?? $f;
  const poke = (buffer ?? currentBuffer()).party;
  for (let i = 0; i < poke_num; i++) {
    const lv_box = form["LV" + i];
    const lv = parseInt(lv_box.value);
    if (isNaN(lv) || lv < 1 || lv > 100) {
      throw new InvalidValueOfTextbox((i + 1) + "匹目のレベルが不正です。", lv_box);
    }
    poke[i].lv = lv;
    const no_box = form["POKE" + i];
    const name = no_box.value;
    const spec = PokeData.fromName(name);
    if (!spec) {
      throw new InvalidValueOfTextbox((i + 1) + "匹目の種族名が不正です。", no_box);
    }
    poke[i].no = spec.id;
    for (let j = 0; j < 4; j++) {
      const mv_box = form["WAZA" + i + "_" + j];
      const mv = MoveData.fromName(mv_box.value);
      if (!mv) {
        throw new InvalidValueOfTextbox((i + 1) + "匹目の技" + (j + 1) + "が不正です。", mv_box);
      }
      poke[i].mv[j] = mv.id;
      poke[i].pp[j] = Math.floor(mv.pp * (5 + Number(poke[i].p_up[j])) / 5);
    }
    poke[i].id = getId(i, form);
    for (let j = 0; j < 5; j++) {
      const ef_box = form["EF" + i + "_" + j];
      const ef = Number(ef_box.value);
      if (isNaN(ef) || ef < 0 || ef > 63) {
        throw new InvalidValueOfTextbox((i + 1) + "匹目の努力値が不正です。", ef_box);
      }
      poke[i].ef[j] = ef;
    }
    const item_box = form["ITEM" + i];
    const item = ItemData.fromName(item_box.value);
    if (!item) {
      throw new InvalidValueOfTextbox((i + 1) + "匹目のアイテム名が不正です。", item_box);
    }
    poke[i].item = item.id;
    poke[i].h = calcHP(spec.h, lv, calcHPId(poke[i].id), parseInt(poke[i].ef[0]));
  }
}

/*pokeの状態からPDに値をget*/
function getPD(party) {
  party = party ?? currentBuffer().party;
  function join(ary) {
    return ary.join("_");
  }
  const poke_num = getPokeNum();
  const ary = new Array(poke_num);
  for (let i = 0; i < poke_num; i++) {
    ary[i] = join([party[i].no,
                   party[i].lv,
                   join(party[i].id),
                   join(party[i].ef),
                   join(party[i].mv),
                   join(party[i].pp),
                   join(party[i].p_up),
                   party[i].h,
                   0,
                   party[i].item]);
  }
  return ary.join("_x_");
}

/*pokeの状態からPDに値をset*/
function setPD() {
  $f.PD.value = getPD();
}

// --- DOM ---
function makeElement(tag, attr = undefined, ...args) {
  const node = $d.createElement(tag);
  if (attr) {
    for (const i in attr) {
      if (attr[i] != undefined) {
        node[i] = attr[i];
      }
    }
  }
  for (const e of args) {
    node.appendChild(e instanceof Node ? e : document.createTextNode(e));
  }
  return node;
}

function createInput(attr, style) {
  const input = getWrappedJSObject($d.createElement("input"));
  for (const i in attr) {
    if (/^on/.test(i)) {
      input[i] = attr[i];
    }
    else {
      input.setAttribute(i, attr[i]);
    }
  }
  if (style) {
    for (const i in style) {
      input.style[i] = style[i];
    }
  }
  return input;
}

// --- StyleSheet ---
xpd.styleSheet = (() => {
  const element = $d.createElement('style');
  $d.querySelector('head').appendChild(element);
  return element.sheet;
})();

// --- Echo Area ---
function createEchoArea() {
  const buf = $d.createElement("div");
  buf.id = "echo-area";
  buf.setAttribute("style", "margin-left: 2em; background-color: inherit");
  $d.body.appendChild(buf);
  return true;
}

function message(...objs) {
  const echoArea = $d.getElementById("echo-area");
  echoArea.innerHTML = "";
  objs.forEach(obj => {
    echoArea.appendChild(obj instanceof getWrappedJSObject(Node) ? obj : $d.createTextNode(obj));
  });
}

function messageHTML(str) {
  $d.getElementById("echo-area").innerHTML = str;
}

function messageText(str) {
  $d.getElementById("echo-area").innerHTML = str.replace("\n", "<br />");
}

function messageRawText(str) {
  const pre = $d.createElement("pre");
  pre.textContent = str;
  message(pre);
}

function getMessage() {
  return $d.getElementById("echo-area").innerHTML;
}

function messageWithTextbox(str) {
  messageHTML('<input id="message-textbox" type="text" size="64"/>');
  const box = $d.getElementById("message-textbox");
  box.value = str;
  box.select();
}

// --- Error Handler ---
function maybeBug(mes, stack) {
  messageRawText([mes,
                  "これはxpdのバグかもしれません。",
                  ,
                  "version: " + xpd.version,
                  "platform: " + xpd.platform,
                  "browser: " + xpd.browser,
                  "stack trace:"].concat(stack).join("\n"));
}

function handleInteractiveError(er) {
  if (er instanceof Error) {
    if (er instanceof XPDError && !(er instanceof ImplementationError)) {
      messageText(er.message);
    }
    else {
      maybeBug(er, er.stack);
    }
  }
  else {
    maybeBug(er);
  }
}

// --- Keymap.js ---
const AsyncFunction = (async () => {}).constructor;

const Key = {
  translationKeytable: {
    "¥": "\\"
  },
  isModifierKey(ev) {
    return /^(?:Alt|Control|Meta|Shift)$/.test(ev.key);
  },
  isToggleKey(ev) {
    return /Lock$/.test(ev.key);
  },
  isArrowKey(ev) {
    return /^Arrow/.test(ev.key);
  },
  isFunctionKey(ev) {
    return /^F[0-9]+$/.test(ev.key);
  },
  isSpecialKey(ev) {
    return Key.isArrowKey(ev) ||
      Key.isFunctionKey(ev) ||
      /^(?: | |Escape|Tab|Backspace|Delete|Enter|Lang[12]|Home|End|Page(?:Up|Down)|Insert|Pause)$/.test(ev.key);
  },
  isProcessKey(ev) {
    return ev.key === "Process";
  },
  guessAlnum(ev) {
    const code = ev.code;
    let ma;
    if ((ma = /^Key(.)$/.exec(code))) {
      return ev.shiftKey ? ma[1] : ma[1].toLowerCase();
    }
    else if ((ma = /^(?:Digit|Numpad)([0-9])$/.exec(code))) {
      return ma[1];
    }
    else {
      return null;
    }
  },
  guess(ev) {
    const code = ev.code;

    const key = Key.guessAlnum(ev);
    if (key != null) {
      return key;
    }
    else if (/^(?:LEFT|RIGHT)$/.test(ev.location)) {
      return ev.key;
    }
    else if (Key.isSpecialKey(ev)) {
      return code;
    }
    else {
      console.log("can't guess key:", ev);
      return "Unknown";
    }
  },
  needsToGuessForStringify(ev) {
    return false;
  },
  stringifyEvent(ev) {
    const key = Key.needsToGuessForStringify(ev) ?
          Key.guess(ev) :
          ev.key;
    return (ev.ctrlKey ? "C-" : "") +
      (ev.metaKey ? "M-" : "") +
      (ev.altKey ? "A-" : "") +
      ((ev.shiftKey && Key.isSpecialKey(ev)) ? "S-" : "") +
      (Key.translationKeytable[key] ??
       ((key === " " || key === "Enter") ? ev.code : key));
  },
  stringifyEventSequence(seq) {
    return seq.map(pair => Key.stringify(pair[0])).join(" ");
  },
  stringify(obj) {
    return obj instanceof EventSequence ?
      Key.stringifyEventSequence(obj) :
      obj instanceof Event ?
      Key.stringifyEvent(obj) :
      (() => {
        throw TypeError(`Event or EventSequence required, but got ${obj}`);
      })();
  },
  symbol: Object.create(null),
  defineSymbol(name) {
    Key.symbol[name] = Symbol("Key.symbol." + name);
  },
  parse(str) {
    const re = /((?:C-)?(?:M-)?(?:A-)?(?:S-)?(?:[A-Z][a-z]+|[^ ]))(?: |($))/gy;
    const result = [];
    let last;
    for (let ma; ma = re.exec(str);) {
      result.push(ma[1]);
      last = ma[2];
    }
    if (last !== "") {
      throw Error(`bad key string: "${str}"`);
    }
    return result;
  }
};

Key.defineSymbol("commandMissing");
Key.defineSymbol("prefixKeyHandled");

Object.seal(Key);

if (xpd.platform === "Mac OS X") {
  Key.needsToGuessForStringify = function (ev) {
    return ev.altKey;
  };
}

class EventSequence extends Array {
  constructor(...args) {
    super(...args);
  }
  add(ev, keymap) {
    this.push([ev, keymap]);
  }
  get last() {
    if (this.length === 0) {
      throw Error("empty EventSequence");
    }
    else {
      return this[this.length - 1];
    }
  }
  get lastEvent() {
    return this.last[0];
  }
  get lastKeymap() {
    return this.last[1];
  }
}

function stopEvent(ev) {
  ev.stopImmediatePropagation();
  ev.preventDefault();
}

class KeymapObserver {
  constructor(keymap, type, target) {
    this.type = type;
    this.target = target;
    this.active = false;
    this.listener = exportUnsafe(this.dispatch.bind(this));
    this.rootMap = keymap;
    this.resetEventSequence();
  }
  resetEventSequence() {
    this.currentMap = this.rootMap;
    this.eventSequence = new EventSequence;
  }
  isActive() {
    return this.active;
  }
  activate() {
    if (this.active) {
      throw Error("already activated");
    }
    this.target.addEventListener(this.type, this.listener, false);
    this.active = true;
  }
  deactivate() {
    if (!this.active) {
      throw Error("does not activated");
    }
    this.target.removeEventListener(this.type, this.listener, false);
    this.active = false;
  }
  runKeymapHooks(type) {
    const seq = this.eventSequence;
    for (let i = seq.length; i--;) {
      let [_, keymap] = seq[i];
      let hook = keymap[type];
      if (hook && !hook(seq)) {
        // 偽値なら終了、真値なら伝播
        break;
      }
    }
  }
  dispatch(ev) {
    const keymap = this.currentMap;

    if (keymap.ignoresKey(ev)) {
      // console.log("ignore:", ev);
      return;
    }

    const key = Key.stringify(ev);
    const value = keymap.get(key);

    this.eventSequence.add(ev, keymap);
    // console.log("dispatch event:", ev, "as key:", key, "to:", value);
    if (!value) {
      try {
        if (keymap !== this.rootMap) {
          stopEvent(ev);
        }
        this.runKeymapHooks(Key.symbol.commandMissing);
      }
      finally {
        this.resetEventSequence();
      }
    }
    else if (value instanceof KeymapEventListener) {
      try {
        value.run(this.eventSequence);
      }
      finally {
        this.resetEventSequence();
      }
    }
    else if (value instanceof Keymap) {
      this.currentMap = value;
      stopEvent(ev);
      this.runKeymapHooks(Key.symbol.prefixKeyHandled);
    }
    else {
      throw TypeError(`wrong value in keymap: ${value}`);
    }
  }
}

class KeymapValue {}

class Keymap extends KeymapValue {
  constructor(name, parent) {
    super();
    this.name = name;
    this.parent = parent;
    this.table = new Map();
  }
  [Symbol.iterator]() {
    return this.table[Symbol.iterator]();
  }
  get(key) {
    return this.table.get(key) ?? (this.parent ? this.parent.get(key) : undefined);
  }
  add(key, value) {
    this.table.set(key, value);
  }
  define_keyseq(keyseq, value) {
    const [key, ...rest] = keyseq;
    if (rest.length === 0) {
      this.add(key, value);
    }
    else {
      let keymap = this.get(key);
      if (!(keymap instanceof Keymap)) {
        this.add(key, keymap = new this.constructor(key));
      }
      keymap.define_keyseq(rest, value);
    }
  }
  define(str, value) {
    if (value instanceof KeymapValue) {
      this.define_keyseq(Key.parse(str), value);
    }
    else if (typeof(value) === "function") {
      this.define(str, xpd.commandFromFunction.get(value) ?? new Command(value));
    }
    else {
      throw TypeError(`wrong argument: ${value}`);
    }
  }
  undef(key) {
    this.table.delete(key);
  }
  defineKeys(obj) {
    for (const key in obj) {
      this.define(key, obj[key]);
    }
  }
  makeSubKeymap(key, name, parent) {
    const sub = new Keymap(name ?? key, parent);
    this.table.set(key, sub);
    return sub;
  }
  observe(type, target) {
    const observer = new KeymapObserver(this, type, target);
    observer.activate();
    return observer;
  }
  ignoresKey(ev) {
    return Key.isModifierKey(ev) || Key.isToggleKey(ev) || Key.isProcessKey(ev);
  }
  toString() {
    return `[Keymap ${this.name}]`;
  }
}

class KeymapEventListener extends KeymapValue {
  static camelCaseToKebabCase(name) {
    const re_str = "([A-Z]+(?:(?=[A-Z][a-z])|$)|[A-Z][a-z]*)";
    const re0 = RegExp("^" + re_str, "y");
    const re1 = RegExp(re_str, "g");
    const ma = re0.exec(name);
    const sub = s => s.replace(re1, "-$1");
    return (ma ?
            ma[1] + sub(name.substring(re0.lastIndex)) :
            sub(name)
           ).toLowerCase();
  }
  // option
  //   document: String
  //   argument: 'event-sequence' |'last-event'
  //   name: String
  constructor(origFunc, options = {}) {
    super();
    // const acceptOptions = ["document", "argument", "name"];
    // for (const opt in options) {
    //   if (!acceptOptions.includes(opt)) {
    //     throw Error(`unknown option: ${opt}`);
    //   }
    // }

    this.options = Object.freeze(options);
    this.name = (options.name != null) ? options.name :
      origFunc.name ? KeymapEventListener.camelCaseToKebabCase(origFunc.name) :
      (() => { throw new Error("anonymous function is invalid"); })();
    this.origFunc = origFunc;

    let func;

    switch (options.argument) {
    case "last-event":
    case undefined:
    case null:
      func = seq => origFunc(seq.lastEvent);
      break;
    case "event-sequence":
      func = origFunc;
      break;
    default:
      throw Error(`unknown value for option.argument: ${options.argument}`);
    }
    this.body = func;

    if (options.document != null) {
      this.document = options.document;
    }
  }
  run(evs) {
    const body = this.body;
    return body(evs);
  }
  isAsync() {
    return this.origFunc instanceof AsyncFunction;
  }
}

// --- Command System ---
var previousCommand;

class Command extends KeymapEventListener {
  constructor(origFunc, options = {}) {
    super(origFunc, options);
    this.scope = options.scope ?? "document";
    if (!["document", "form"/*, "line"*/].includes(this.scope)) {
      throw new ImplementationError(`bad value for Command options.scope: ${this.scope}`);
    }
  }
  run(evs) {
    const ev = evs.lastEvent;
    if (ev instanceof Event) {
      stopEvent(ev);
    }
    try {
      message();
      return super.run(evs);
    }
    catch (er) {
      handleInteractiveError(er);
      return false;
    }
    finally {
      previousCommand = this;
    }
  }
  exec(ev) {
    return this.run(new EventSequence([ev]));
  }
}

function prefixKeyHandler(evs) {
  message(Key.stringify(evs));
}
Keymap.prototype[Key.symbol.prefixKeyHandled] = prefixKeyHandler;

function commandMissingHandler(evs) {
  if (evs.length > 1) {
    message(`${Key.stringify(evs)} is undefined`);
  }
}
Keymap.prototype[Key.symbol.commandMissing] = commandMissingHandler;

xpd.command = new Map();
xpd.commandFromFunction = new Map();

function interactive(f, document, scope, options = {}) {
  const command = new Command(f, {document, scope, ...options});

  xpd.command.set(command.name, command);
  xpd.commandFromFunction.set(f, command);

  return command;
}

function commandExists(command) {
  return xpd.command.has(command);
}

function defaultAsyncHandler(command) {
  return er => message(`error in async command \`${command.name}\': ${er}`);
}

function callInteractively(commandName, ev) {
  if (commandExists(commandName)) {
    let command = xpd.command.get(commandName);
    if (command.isAsync()) {
      command.exec(ev).catch(defaultAsyncHandler(command));
      return undefined;
    }
    else {
      return command.exec(ev);
    }
  }
  else {
    throw new XPDError("command `" + commandName + "' is not defined");
  }
}

function isTheForm(obj) {
  return obj && getWrappedJSObject(obj) === $f;
}

function isInnerEvent(e) {
  return isTheForm(e.target.form);
}

function getFontSize() {
  const style = $w.getComputedStyle($d.documentElement).fontSize;

  if (!/px$/.test(style)) {
    console.warn("font-sizeにpx以外の単位が使われています: %s", style);
  }

  return parseFloat(style);
}
xpd.fontSize = getFontSize();

function createModeLine() {
  const height = getFontSize();
  const base = $d.createElement("div");
  base.id = "mode-line-background";
  base.setAttribute("style", "position: fixed; z-index: -1; width: 100%; left: 0em; bottom: 1em; white-space: pre");
  base.style.fontFamily = "Monaco, monospace";
  base.style.backgroundColor = "#d0d0d0";
  base.title = "パーティ番号、有効になっているモードの略称が表示されます";
  base.style.lineHeight = height + 2 + "px";
  const div = $d.createElement("span");
  div.id = "mode-line";
  div.setAttribute("style", "margin-left: 3em");
  base.appendChild(div);
  $d.body.appendChild(base);
}

const modeTable = {};
function defineMode(f, lighter, doc) {
  const isFunc = typeof(f) === "function";
  const name = isFunc ? f.name.slice(1) : f;
  const commandName = KeymapEventListener.camelCaseToKebabCase(name);
  modeTable[name] = lighter;
  const init = function () {
    const pref = currentBuffer().pref;
    isFunc && f(pref[name]);
  };
  const modeFunc = function (on) {
    const pref = currentBuffer().pref;
    pref[name] = on == null ? !pref[name] : Boolean(on);
    init();
    drawModeLine();
  };
  const commandFunc = function () {
    const pref = currentBuffer().pref;
    modeFunc();
    message(commandName + " " + (pref[name] ? "enabled" : "disabled"));
  };
  initializeHooks.push(init);
  interactive(commandFunc, doc, null, {name: commandName});
  return modeFunc;
}


xpd.pref.modeLineMode = true;
function _modeLineMode(on) {
  $d.getElementById("mode-line").style.display = on ? "" : "none";
}
const modeLineMode = defineMode(_modeLineMode, null, "モード行を表示するモード");

function drawModeLine() {
  if (currentBuffer().pref.modeLineMode) {
    const ary = [];
    const pref = currentBuffer().pref;
    for (const name in modeTable) {
      const lighter = modeTable[name];
      if (lighter && pref[name]) {
        ary.push(lighter);
      }
    }
    $d.getElementById("mode-line").textContent = "No." + getNumber() + "    (" + ary.reverse().join(" ") + ")";
  }
}

// --- Command Input Command ---
var isMinibuffer;

function createMiniBuffer() {
  const p = makeElement("span", {id: "mini-buffer-prompt"});
  p.style.fontFamily = "monospace";
  p.style.marginLeft = "1em";
  $f.appendChild(p);

  const mini = createInput({id: "mini-buffer", name: "minibuffer", type: "text", size: 32});
  isMinibuffer = function(obj) { return getWrappedJSObject(obj) === mini; };
  mini.style.display = "none";
  $f.appendChild(mini);
  xpd.styleSheet.insertRule("#mini-buffer{margin-left: 1em}", 0);
}

// minibufferCompletion :: "command"
//                       | {exists: (string) -> boolean,
//                          getIterator: () -> Iterator}
var minibufferContinuation = null;
var minibufferCompletion = null;
function readMinibuffer(cont, completion,
                        promptStr = undefined, defaultValue = "") {
  if (promptStr) {
    const p = $d.getElementById("mini-buffer-prompt");
    p.textContent = promptStr;
  }
  const mini = $d.getElementById("mini-buffer");
  mini.value = defaultValue;
  mini.style.display = "";
  mini.focus();
  minibufferContinuation = cont;
  minibufferCompletion = completion;
}

function cleanupMinibuffer() {
  const p = $d.getElementById("mini-buffer-prompt");
  p.textContent = "";

  const mini = $d.getElementById("mini-buffer");
  mini.style.display = "none";
  minibufferContinuation = null;
  minibufferCompletion = null;
}

function callMinibufferContinuation(e) {
  const cont = minibufferContinuation;
  cleanupMinibuffer();
  cont($d.getElementById("mini-buffer").value);
}

function executeCommandCont(value) {
  const event = {target: commandTarget};
  commandTarget.focus();
  callInteractively(value, event);
  blurIfHtmlElement(commandTarget);
  commandTarget = null;
}

var commandTarget = null;
function executeCommand(e) {
  commandTarget = e.target;
  readMinibuffer(executeCommandCont, "command", "コマンド:");
}

function blurIfHtmlElement(element) {
  if (element == document.documentElement) {
    element.blur();
  }
}

function quitCommand(e) {
  if (commandTarget) {
    commandTarget.focus();
    blurIfHtmlElement(commandTarget);
    commandTarget = null;
  }
  cleanupMinibuffer();
  message("Quit");
}

function enterCommand(e) {
  const target = e.target;
  if (isMinibuffer(target)) {
    if (finishesCompeletion(target)) {
      callMinibufferContinuation(e);
    }
    else {
      const candidates = complete(e, true);
      if (candidates == null || candidates.length == 1) {
        callMinibufferContinuation(e);
      }
    }
  }
}

const documentKeymap = new Keymap("document");
const formKeymap = new Keymap("form", documentKeymap);
var documentKeymapObserver;
var formKeymapObserver;

// --- SearchMovesCompatibility ---
function takeWhile(ary, f) {
  const r = [];
  for (const e of ary) {
    if (f(e)) {
      r.push(e);
    }
    else {
      break;
    }
  }
  return r;
}

class SearchState {
  constructor(pokemon, level, description, request, learned = [], timeTraveling = false, timeTraveled = timeTraveling, prev = null) {
    this.pokemon = pokemon; // PokeData
    this.level = level;
    this.description = description;
    this.request = request; // [id]
    this.learned = learned; // [(id, description)]
    this.prev = prev;
    this.timeTraveling = timeTraveling;
    this.timeTraveled = timeTraveled;
  }
  derive(pokemon, level, description,
         request = this.request, learned = [],
         timeTraveling = this.timeTraveling,
         timeTraveled = timeTraveling || this.timeTraveled) {
    return new this.constructor(pokemon, level, description, request, learned,
                                timeTraveling, timeTraveled, this);
  }
  satisfied() {
    return this.request.length === 0;
  }
  toString() {
    const cur = `${this.pokemon.name} Lv ${this.level}, ${this.description}, learned: ${this.learned.map(([move, desc]) => `${MoveData.fromID(move).name}/${desc}` )} request: ${this.request.map(id => MoveData.fromID(id).name)}`;
    const traveling = this.timeTraveling ? " (traveling)" : "" ;
    const traveled = this.timeTraveled ? " (traveled)" : "" ;
    const pre = this.prev ? ` <- ${this.prev.toString()}` : "";

    return `[SearchState ${cur}${traveling}${traveled}${pre}]`;
  }
}

// 進化後のポケモンから進化前のポケモンの進化レベルを返す
// 進化しないポケモンは 0 任意進化は 1
function inspectEvolvement(poke) {
  if (poke.evFrom) {
    const [to, evType, value] = poke.evFromPoke().evList.find(([id, , ]) => id === poke.id);
    return (evType === 1) ? value :
      (evType === 4 || evType === 5) ? 6 :
      1;
  }
  else {
    return 0;
  }
}

// NB: ニドリーナニドクインは未発見
function breedableEggGroups(poke) {
  const eggDragon = 12;
  const eggUndiscovered = 15;
  const egs = poke.eggGroup;
  if (egs[0] === eggUndiscovered) {
    // ベビィポケモン
    if (poke.evList.length > 0) {
      return breedableEggGroups(PokeData.fromID(poke.evList[0][0]));
    }
    else {
      return [];
    }
  }
  return poke.eggGroup.filter(g => g <= eggDragon);
}

function maleExists(poke) {
  const female = poke.female;
  return female != null && (female < 16);
}

function learn(request, description, pred) {
  const left = [], right = [];
  request.forEach(e => {
    if (pred(e)) {
      right.push([e, description]);
    }
    else {
      left.push(e);
    }
  });
  return [left, right];
}

function useTMs(state) {
  const {pokemon: poke, level, request, learned, timeTraveling} = state;
  const [learnings, extraLearnings, tms, desc] = timeTraveling ?
        [poke.pikaLearnings, [], poke.oldTMMoves, "わざマシン(ピ)"] :
        [poke.crystalLearnings, poke.gsLearnings ?? [], poke.TMMoves, "わざマシン(ク)"];
  const getMoves = alist => takeWhile(alist,
                                      ([lv, ]) => lv <= level
                                     ).map(([, move]) => move);
  const levelMoves = getMoves(learnings);
  const extraLevelMoves = getMoves(extraLearnings);

  const [r1, l1] = learn(request, "スーパーわざマシン",
                         move => levelMoves.includes(move));
  const [r2, l2] = learn(r1, "スーパーわざマシン(金銀)",
                         move => extraLevelMoves.includes(move));
  const [r3, l3] = learn(r2, desc,
                         move => tms.includes(move));
  const [r4, l4] = poke.name === "ドーブル" ?
        learn(r3, "スケッチ",
              move => !MoveData.cantSketch.includes(move)) :
        [r3, []];

  return l1.length + l2.length + l3.length + l4.length > 0 ?
    state.derive(poke, level, "わざマシン等", r4, l1.concat(l2, l3, l4)) :
    state;
}

class SearchFound {
  constructor(state) {
    this.state = state;
  }
}

function searchLearning(initState) {
  const track = new Array(256);
  const queue = [];

  function advances(s, t) {
    return s.level < t.level ||
      s.timeTraveled < t.timeTraveled ||
      s.timeTraveling < t.timeTraveling ||
      t.request.some(move => !s.request.includes(move));
  }
  const push = s0 => {
    const s = useTMs(s0);

    if (s.satisfied()) {
      throw new SearchFound(s);
    }

    const id = s.pokemon.id;
    if (track[id]) {
      if (track[id].every(s1 => advances(s, s1))) {
        track[id].push(s);
        queue.push(s);
      }
    }
    else {
      track[id] = [s];
      queue.push(s);
    }
  };
  push(initState);
  for (let counter = 0; queue.length; counter++) {
    if (counter > 10000) {
      throw new UserError("探索数が上限に達しました");
    }
    const state = queue.shift();
    const {pokemon: poke, level, request, learned, timeTraveling} = state;

    if (DistPokemon.poke[poke.id]) {
      for (const dist of DistPokemon.list) {
        if (poke.id === dist.poke && level >= dist.lv && request.every(m => dist.moves.includes(m))) {
          const [r, l] = learn(request, "配布初期技", _ => true);
          return state.derive(poke, level, "配布ポケモンを受け取る", r, l);
        }
      }
    }

    const evolvement = inspectEvolvement(poke);

    if (evolvement) {
      const beforeEvolvement = poke.evFromPoke();
      if (!(timeTraveling && !beforeEvolvement.isOld()) &&
          evolvement <= level) {
        const requiresLevelUp = evolvement > 1;

        if (requiresLevelUp) {
          // NB: このレベルアップで覚える技
          push(state.derive(beforeEvolvement, level - 1, "レベルアップ進化"));
        }
        else {
          push(state.derive(beforeEvolvement, level, "レベルまま進化"));
        }

      }
    }
    else if (!timeTraveling) {
      const egs = breedableEggGroups(poke);
      const ems = poke.eggMoves;

      const breed = (lms, desc) => {
        if (request.every(move => ems.includes(move) || lms.includes(move))) {
        const pokes = PokeData.raw.filter(
          poke => egs.some(
            eggGroup => poke.eggGroup.includes(eggGroup)));
        egs.forEach(eg => {
          pokes.forEach(partner => {
            if (maleExists(partner)) {
              push(state.derive(partner, 100, desc));
            }
          });
        });
      }
      };

      breed(poke.crystalLearnings.map(([, move]) => move), "タマゴ");
      if (poke.gsLearnings) {
        breed(poke.gsLearnings.map(([, move]) => move), "タマゴ(金銀)");
      }

    }

    if (timeTraveling) {
      push(state.derive(poke, level, "第二世代へ送る", request, [], false));
    }
    else if (poke.isOld() &&
             request.every(MoveData.isOld)) {
      push(state.derive(poke, level, "第一世代へ送る", request, [], true));
    }

  }
  return null;
}

function pokeCanLearnMovesCompatibly(poke, lv, moves) {
  try {
    return searchLearning(new SearchState(poke, lv, "init", moves));
  }
  catch (e) {
    if (e instanceof SearchFound) {
      return e.state;
    }
    else {
      throw e;
    }
  }
}

function checkPoke(poke) {
  return pokeCanLearnMovesCompatibly(PokeData.fromID(poke.no),
                                     poke.lv,
                                     poke.mv.filter(mv => mv));
}

function checkParty(ev) {
  setPoke();
  const poke = currentBuffer().party;
  const stats = poke.map(checkPoke);
  if (stats.every(s => s)) {
    messageRawText("両立チェック OK");
  }
  else {
    const buf = ["両立チェック NG"];
    stats.forEach((state, i) => {
      if (!state) {
        buf.push(`${PokeData.fromID(poke[i].no).name}: 不可`);
      }
    });
    messageRawText(buf.join("\n"));
  }
}
interactive(checkParty, "パーティをチェック");

// --- GUI Hooks ---
function setHP() {
  for (let i = 0; i < 6; i++) {
    const spec = PokeData.fromName($f["POKE" + i].value);
    let hp;
    if (spec) {
      const lv = parseInt($f["LV" + i].value, 10);
      const ef = parseInt($f["EF" + i + "_" + 0].value, 10);
      if (isNaN(lv) || lv < 1 || lv > 100 || isNaN(ef)) {
        hp = "";
      }
      else {
        hp = calcHP(spec.h, lv, calcHPId(getId(i)), ef);
        if (currentBuffer().pref.highlightFormMode &&
            hp % 4 === 0 &&
            getMoves(i).some(s => s == "みがわり")) {
          hp = '<span style="color: orangered; font-weight: bold">' + hp + '</span>';
        }
      }
    }
    else {
      hp = "";
    }
    $d.getElementById("hp" + i).innerHTML = hp;
  }
}

function setSex() {
  const form = $f;
  for (let i = 0; i < 6; i++) {
    let str;
    try {
      const female = PokeData.fromName(form["POKE" + i].value).female;
      if (female == null) {
        str = "　";
      }
      else if (female > Number("0x" + form["KO" + i].value.slice(0, 1))) {
        str = "♀";
      }
      else {
        str = "♂";
      }
    }
    catch (e) {
      str = "　";
    }
    $d.getElementById("sex" + i).innerHTML = str;
  }
}

function getMove(i, j) {
  return $f["WAZA" + i + "_" + j].value;
}

function getMoves(i) {
  const ary = new Array(4);
  for (let j = 0; j < ary.length; j++) {
    ary[j] = getMove(i, j);
  }
  return ary;
}

xpd.pref.hiddenpowerColorfulMode = true;
xpd.pref.hiddenpowerNames = ["格","飛","毒","地","岩","虫","霊","鋼","炎","水","草","電","エ","氷","竜","悪"];
xpd.pref.hiddenpowerColors = ["#d0a0a0", "#d0ffd0", "#c080ff", "#f0a060", "#d0d0a0", "#80d080", "#b0a0e0", "#e0e0e0", "#ffa0a0", "#a0a0ff", "#a0ffa0", "#ffffa0", "#ffa0ff", "#c0c0ff", "#ffa060", "#909090"];
function setHiddenpower() {
  const pref = currentBuffer().pref;
  for (let i = 0; i < 6; i++) {
    let str = "　";
    let color = "e0e0e0";
    try {
      if (getMoves(i).map(MoveData.fromName).some(function (move) { return move?.id === 238; })) {
        /* 個体値から計算 */
        const ary = getId(i);
        str = pref.hiddenpowerNames[parseInt(ary[0], 16) % 4 * 4 + parseInt(ary[1], 16) % 4];
        if (pref.hiddenpowerColorfulMode) {
          color = pref.hiddenpowerColors[parseInt(ary[0], 16) % 4 * 4 + parseInt(ary[1], 16) % 4];
        }
      }
    }
    catch (e) {
      handleInteractiveError(e);
    }
    const hid = $d.getElementById("hiddenpower" + i);
    hid.innerHTML = str;
    hid.bgColor = color;
  }
}

function _hiddenpowerColorfulMode(on) {
  setHiddenpower();
}
const hiddenpowerColorfulMode = defineMode(_hiddenpowerColorfulMode, "HC", "めざめるパワーを色で強調");

function setStatus() {
  try {
    setSex();
    setHP();
  }
  catch (e) {
    handleInteractiveError(e);
  }
}

function setBackgroundColor() {
  for (let n = 0; n < 6; n++) {
    setStatusBackgroundColor($f["KO" + n]);
    for (let i = 0; i < 5; i++) {
      setStatusBackgroundColor($f["EF" + n + "_" + i]);
    }
  }
}

function formRefresh() {
  setStatus();
  setHiddenpower();
  setBackgroundColor();
}

function change() {
  try {
    setPoke();
    setPD();
  } catch (e) {
    handleInteractiveError(e);
    return false;
  }
  return true;
}

/*
 * cookieの上限は8192ぐらい
 *  一つのパーティが占めるcookieの長さの最大は487
 * 2000のパなら481
 * 削除されたパで6
 * 通常は460程度
 */

function newPartyButton() {
  if ($d.cookie.length > 7700) {
    message("パーティが多すぎます");
    return;
  }
  if (change()) {
    let i;
    for (i = 1; getCookie(i); i++);
    setCookie("PD" + (i - 1), "1_x_" + getPD());
    message("Saved No." + i);
  }
}

/*
function saveSomeBuffers() {

}*/

function save() {
  if (change()) {
    setCookie("PD" + (getNumber() - 1), "1_x_" + getPD());
    message("Saved No." + getNumber());
  }
  return false;
}

// --- GUI Hooks:Rearrenge ---
function swapValue(a, b) {
  const temp = a.value;
  a.value = b.value;
  b.value = temp;
}

function swapPoke() {
  const ary = [];
  for (let i = 0; i < 6; i++) {
    if ($f["swap" + i].checked) ary.push(i);
  }
  if (ary.length == 2) {
    const attrs = ["LV", "POKE", "ITEM", "KO"];
    for (let i = 0; i < attrs.length; i++) {
      swapValue($f[attrs[i] + ary[0]], $f[attrs[i] + ary[1]]);
    }
    for (let i = 0; i < 4; i++) {
      swapValue($f["WAZA" + ary[0] + "_" + i], $f["WAZA" + ary[1] + "_" + i]);
    }
    for (let i = 0; i < 5; i++) {
      swapValue($f["EF" + ary[0] + "_" + i], $f["EF" + ary[1] + "_" + i]);
    }
    formRefresh();
    for (let i = 0; i < 6; i++) {
      $f["swap" + i].checked = false;
    }
  }
}

// --- GUI ---
function getTable() {
  return $d.getElementsByTagName('table')[0];
}

const formPokeWidth = (xpd.fontSize - 1) * 5;
function createPokeInput(text, no){
  const input = $d.createElement('input');
  input.value = text;
  input.style.width = formPokeWidth;
  input.setAttribute("name", "POKE" + no);
  return input;
}

function setInputs() {
  const table = getTable();
  for (let i = 1; i < 7; i++) {
    const row = table.rows[i].cells;
    const cell = table.rows[i].cells[1];
    cell.replaceChild(createPokeInput(cell.innerHTML, i - 1), cell.firstChild);
  }
}

function setButtonAttr(b, fn, value, title) {
  b = getWrappedJSObject(b);
  b.onclick = exportUnsafe(fn);
  if (value) {
    b.value = value;
  }
  b.title = title ?? "undocumented";
}

function setButtons() {
  const b = $d.getElementsByName("submit");
  b[0].type = "button";
  setButtonAttr(b[0], change);
  b[1].type = "button";
  b[2].type = "button";
  setButtonAttr(b[1], save, "上書保存", "パーティを保存します。");
  setButtonAttr(b[2], newPartyButton, "新規保存", "新規保存");
  $f.appendChild(createInput({type: "hidden", name: "C", value: ""}));
}

function addEventListenerUnsafe(dom, evname, listener) {
  return getWrappedJSObject(dom).addEventListener(evname, exportUnsafe(listener), false);
}

xpd.pref.formLowStatusStyle = "#C0FFC0";
xpd.pref.formVeryLowStatusStyle = "#A0FFFF";
function setStatusBackgroundColor(ev) {
  const target = ev.target ?? ev;
  const value = target.value;
  const name = target.name;
  const max = /^KO/.test(name) ? "FFFF" : (/^EF/.test(name)) ? "63" : null;
  if (currentBuffer().pref.highlightFormMode && max && value != max) {
    target.style.backgroundColor = (value.length == 4 ? /[0-7]/ : /^0$/).test(value) ? xpd.pref.formVeryLowStatusStyle : xpd.pref.formLowStatusStyle;
  }
  else {
    target.style.backgroundColor = "";
  }
}

xpd.pref.highlightFormMode = true;
const setStatusBGUnsafe = exportUnsafe(setStatusBackgroundColor);
function _highlightFormMode(on) {
  const m = on ? "addEventListener" : "removeEventListener";
  const refresh = on ? setStatusBGUnsafe : function(obj) { obj.style.backgroundColor = ""; };
  function f(obj) {
    getWrappedJSObject(obj)[m]("change", setStatusBGUnsafe);
    refresh(obj);
  }
  for (let i = 0; i < 6; i++) {
    f($f["KO" + i]);
    for (let j = 0; j < 5; j++) {
      f($f["EF" + i + "_" + j]);
    }
  }
  setHP();
};
const highlightFormMode = defineMode(_highlightFormMode, "HF", "テキストボックスを強調表示するモード");

function wheelListener(ev) {
  let target = ev.target;
  let name = target.name;
  let [min, max] = /^LV/.test(name) ? [1, 100] : [0, 63];
  target.value = Math.max(min,
                          Math.min(max,
                                   Number(target.value) - Math.round(ev.deltaY / 5)));
  setStatusBackgroundColor(target);
  if (/^(?:LV|EF.*0$)/.test(name)) {
    setHP();
  }
  ev.preventDefault();
}

function setOnChange() {
  for (let i = 0; i < 6; i++) {
    addEventListenerUnsafe($f["POKE" + i], "blur", setStatus);
    addEventListenerUnsafe($f["KO" + i], "blur", formRefresh);
    addEventListenerUnsafe($f["LV" + i], "blur", setHP);
    addEventListenerUnsafe($f["LV" + i], "wheel", wheelListener);
    addEventListenerUnsafe($f["EF" + i + "_0"], "blur", setHP);
    for (let j = 0; j < 4; j++) {
      addEventListenerUnsafe($f["WAZA" + i + "_" + j], "blur", setHiddenpower);
    }

    const ko = $f["KO" + i];
    setStatusBackgroundColor(ko);
    for (let j = 0; j < 5; j++) {
      const ef = $f["EF" + i + "_" + j];
      addEventListenerUnsafe(ef, "wheel", wheelListener);
      setStatusBackgroundColor(ef);
    }
  }
}

const formEffortWidth = xpd.fontSize * 2;
function createEffortColumn() {
  const table = getTable();
  table.rows[0].insertCell(-1);
  table.rows[0].cells[8].innerHTML = "HPこぼすと";
  for (let i = 0; i < 6; i++) {
    const row = table.rows[i + 1];
    row.insertCell(8);
    for (let j = 0; j < 5; j++) {
      row.cells[8].appendChild(createInput(
        {
          value: currentBuffer().party[i].ef[j],
          name: "EF" + i + "_" + j,
          maxLength: 2
        },
        {
          width: formEffortWidth
        }));
    }
  }
}

function createHiddenpowerColumn() {
  const table = getTable();
  table.rows[0].insertCell(7);
  table.rows[0].cells[7].innerHTML = "め";
  for (let i = 1; i < 7; i++) {
    const row = table.rows[i];
    row.insertCell(7);
    row.cells[7].id = "hiddenpower" + (i - 1);
    row.cells[7].bgColor = "e0e0e0";
  }
}

function createHPColumn() {
  const table = getTable();
  table.rows[0].insertCell(7);
  table.rows[0].cells[7].innerHTML = "HP";
  for (let i = 1; i < 7; i++) {
    const row = table.rows[i];
    row.insertCell(7);
    row.cells[7].id = "hp" + (i - 1);
    row.cells[7].bgColor = "e0e0e0";
  }
}

function createSexColumn() {
  const table = getTable();
  table.rows[0].insertCell(2);
  table.rows[0].cells[2].innerHTML = "　";
  for (let i = 1; i < 7; i++) {
    const row = table.rows[i];
    row.insertCell(2);
    row.cells[2].id = "sex" + (i - 1);
    row.cells[2].bgColor = "e0e0e0";
  }
}

function createSwapCheckBox() {
  const table = getTable();
  table.rows[0].insertCell(0);
  table.rows[0].cells[0].innerHTML = "";
  table.rows[0].cells[0].bgColor = "snow";

  for (let i = 0; i < 6; i++) {
    const row = table.rows[i + 1];
    row.insertCell(0);
    const attr = {
      type: "checkbox",
      name: "swap" + i,
      onchange: exportUnsafe(swapPoke)
    };
    attr.title = "2つチェックすると、それらの行を入れ替えます。";
    row.cells[0].appendChild(createInput(attr));
    table.rows[i + 1].cells[0].bgColor = "snow";
  }
}

function stripTableHeader() {
  const table = getTable();
  for (let k = 1; k < 7; k++) {
    const cell = table.rows[0].cells[k];
    cell.innerHTML = cell.innerHTML.replace(/　/g, "");
  }
}

const formLvWidth = (xpd.fontSize * 3 / 4) * 3;
function fixLvSize() {
  for (let i = 0; i < 6; i++) {
    $f["LV" + i].style.width = formLvWidth;
  }
}

const formKoWidth = (xpd.fontSize * 3 / 4) * 4;
function fixKoSize() {
  for (let i = 0; i < 6; i++) {
    $f["KO" + i].style.width = formKoWidth;
  }
}

const formItemWidth = (xpd.fontSize - 1) * 8;
function fixItemSize() {
  for (let i = 0; i < 6; i++) {
    $f["ITEM" + i].style.width = formItemWidth;
  }
}

const formMoveWidth = (xpd.fontSize - 1) * 7;
function fixMoveSize() {
  for (let i = 0; i < 6; i++) {
    for (let j = 0; j < 4; j++) {
      $f["WAZA" + i + "_" + j].style.width = formMoveWidth;
    }
  }
}

function fixFormSizes() {
  fixLvSize();
  fixKoSize();
  fixItemSize();
  fixMoveSize();
}

function setTableStyleNowrap() {
  const element = $d.createElement('style');
  element.appendChild($d.createTextNode(''));
  $d.getElementsByTagName('head')[0].appendChild(element);
  element.sheet.insertRule("td{white-space:nowrap;}", 0);
}

// --- Command ---
function getLineNumber(input) {
  const n = /\d/.exec(input.name);
  if (n === null) {
    throw new ImplementationError("wrong argument: " + input + "(" + input.name + ")");
  }
  else {
    return Number(n[0]);
  }
}

// --- Command:System ---
function version() {
  message(`${xpd.version} (${xpd.browser}, ${xpd.platform})`);
}
interactive(version, "バージョンを表示");

var backButton;
function back() {
  backButton && backButton.click();
  return false;
}
interactive(back, "前画面へ戻る");

function initializeBackButton() {
  const buttons = $d.getElementsByName("submit");
  for (let i = 0; i < buttons.length; i++) {
    if (buttons[i].value == "戻る") {
      backButton = buttons[i];
      return;
    }
  }
  console.warn("戻るボタンが見つかりません");
  backButton = null;
}

interactive(save, "保存");

function quit() {
  if (bufferMap.some(function (buf) { return buf.changes(); })) {
    if (!confirm("編集されています。終了しますか？")) {
      return false;
    }
  }
  $d.location = "http://psense.lib.net/_/PDINPUT.cgi";
  return false;
}
interactive(quit, "パーティ一覧に戻る");

function newParty() {
  const b = $d.getElementsByName("submit")[2];
  if (b.value != "再現") {
    throw new ImplementationError("再現ボタンがみつかりません(value=\"" + b.value + "\")");
  }
  b.click();
  return false;
}
interactive(newParty, "新規保存");

function deleteAllParties() {
  if (confirm("パーティを全て削除します。よろしいですか？\n(No.1のパーティは残されます。対応するバッファも削除されます))")) {
    findParty0(1);
    getCookies().forEach(function(_, i) {
      if (i > 0) {
        const name = i + 1;
        getBuffer(name) && bufferMap.remove(name);
        deleteCookie("PD" + i);
      }
    });
  }
}
interactive(deleteAllParties, "全てのパーティを削除");

function revert() {
  if (confirm("編集を破棄して保存時の状態を復帰します。よろしいですか？")) {
    partyReflectForm(loadParty(getNumber()));
  }
}
interactive(revert, "保存時の状態を復帰");

/*export*/
function exportPD() {
  setPoke();
  messageWithTextbox(getPD());
}
interactive(exportPD, "PD値を書き出す");

/*import*/
function pdToParty(pd) {
  const poke = new Array(getPokeNum());
  const ary = pd.split("_x_");
  for (let i = 0; i < poke.length; i++) {
    poke[i] = Poke.fromPD(ary[i]);
  }
  return poke;
}
function importPD() {
  let pd = prompt("PD-string");
  if (pd) {
    let ma;
    if ((ma = /^1_x_(.*)$/.exec(pd))) {
      pd = ma[1];
    }
    if (!/^1(?:_x_(?:\d{1,3}_){2}(?:[0-9a-f]_){4}(?:\d{1,2}_){5}(?:\d{1,3}_){4}(?:\d{1,2}_){4}(?:[0-3]_){4}\d{1,3}_0_\d{1,3}){6}/i.exec("1_x_" + pd)) {
      throw new InvalidInput("PD値が正しくありません");
    }
    partyReflectForm(pdToParty(pd));
  }
}
interactive(importPD, "PD値を読み込む");

function partiesToTable(parties) {
  function tr(s) { return '<tr>' + s + "</tr>"; }
  function td(s) { return "<td>" + s + "</td>"; }
  return '<table border="1" style="font-size: smaller">' +
      parties.map(function (party, i) {
        return tr(td("No." + (i + 1)) +
                  party.map(function (poke) {
                    return td(poke.lv + " " + PokeData.fromID(poke.no).name);
                  }).join(" "));
      }).join("") + "</table>";
}

function listParties() {
  messageHTML(partiesToTable(loadParties()));
}
interactive(listParties, "パーティ一覧を表示");

function findParty0(num) {
  if (num) {
    let buf;
    try {
      buf = getBuffer(num) ?? makeBuffer(num, loadParty(num));
    }
    catch (e) {
      if (e instanceof NoPartyError) {
        throw new PartyNotFound(num);
      }
      else {
        throw e;
      }
    }
    selectBuffer(buf);
  }
}

function findParty() {
  const num = parseInt(prompt("party number"));
  if (isNaN(num)) {
    message("数字で入力して下さい");
  }
  else {
    findParty0(num);
  }
}
interactive(findParty, "パーティを開く");

function findAlternateParty() {
  const old = currentBuffer();
  if (old.changes() && !confirm("編集されています。閉じますか？")) {
    return;
  }
  const num = prompt("party number")-0;
  if (num) {
    let buf;
    if ((buf = getBuffer(num))) {
      if (currentBuffer() != buf) {
        selectBuffer(buf);
        killBuffer0(old);
      }
    }
    else {
      try {
        selectBuffer(makeBuffer(num, loadParty(num)));
        killBuffer0(old);
      }
      catch (e) {
        if (e instanceof NoPartyError) {
          throw new PartyNotFound(num);
        }
        else {
          throw e;
        }
      }
    }
  }
}
interactive(findAlternateParty, "現在のバッファを破棄してパーティを開く");

function writeParty() {
  setPoke();
  const max = $d.cookie.split(";").length;
  const name = prompt("保存先(1-" + max + "):");
  if (name === "") {
    return;
  }
  const no = parseInt(name);
  if (isNaN(no) || no < 1 || no > max) {
    throw new UserError("1から" + max + "の番号を入力してください。");
  }
  const oldpd = getCookie(name);
  if (oldpd == null || confirm(name + "を上書きします。よろしいですか？")) {
    const oldbuf = currentBuffer();
    const buf = getBuffer(name);
    if (oldbuf === buf) {
      save();
    }
    else {
      const pd = getPD();
      setCookie("PD" + (no - 1), "1_x_" + pd);
      if (buf) {
        selectBuffer(buf);
        partyReflectForm(pdToParty(pd));
      }
      else {
        selectBuffer(makeBuffer(no, pdToParty(pd)));
      }
      killBuffer0(oldbuf);
      message("Saved No." + no);
    }
  }
}
interactive(writeParty, "上書き保存");

function withBuffer(name, f) {
  const buf = getBuffer(name);
  if (buf) {
    return f(buf);
  }
  else {
    throw new BufferNotFound(name);
  }
}

function withBufferReadBufferName(f) {
  const name = prompt("buffer: ");
  return name ? withBuffer(name, f) : null;
}

function switchToBuffer() {
  withBufferReadBufferName(selectBuffer);
}
interactive(switchToBuffer, "バッファを切り替える");

function listBuffers() {
  const obj = {};
  obj.map = function (f) { return bufferMap.map(function (buf, no) { return f(buf.party, no - 1); }); };
  messageHTML(partiesToTable(obj));
}
interactive(listBuffers, "バッファ一覧を表示");

function killBuffer() {
  withBufferReadBufferName(function (buf) {
    if (!(buf.changes() && !confirm("編集されています。閉じますか？"))) {
      killBuffer0(buf);
    }
  });
}
interactive(killBuffer, "指定したバッファを閉じる");

function killCurrentBuffer() {
  const buf = currentBuffer();
  if (!(buf.changes() && !confirm("編集されています。閉じますか？"))) {
    killBuffer0(buf);
  }
}
interactive(killCurrentBuffer, "現在のバッファを閉じる");

function nextBuffer() {
  selectBuffer(bufferMap.next());
}
interactive(nextBuffer, "次のバッファへ移動");

function previousBuffer() {
  selectBuffer(bufferMap.previous());
}
interactive(previousBuffer, "前のバッファへ移動");

// --- Command:Completion ---
function min(x, y) {
  return x < y ? x : y;
}

xpd.pref.smartCompletionMode = true;
const smartCompletionMode = defineMode("smartCompletionMode", "SC", "効果のないアイテムを補完しないモード");

function commonPrefix(s, t) {
  const len = min(s.length, t.length);
  let i;
  for (i = 0; i < len && s[i] == t[i]; i++);
  return s.substring(0, i);
}

roma.suffixes = ["a", "i", "u", "e", "o", "ya", "yi", "yu", "ye", "yo", "ha", "hi", "hu", "he", "ho", "wa", "wi", "wu", "we", "wo"];

function regexpQuote(str){
  return str.replace(/[$(-+.?\[-^{-}]/g, "\\$&");
};

function makeCompleteRegAryWithSuffix(base, sufs, flag, len) {
  base = regexpQuote(base.toString());
  const regary = flag ? [roma(base).toString()] : [];
  len = len ?? sufs.length;
  for (let i = 0; i < len; i++) {
    const temp = roma(base + sufs[i]).toString();
    if (temp[0] == "[" && temp[temp.length - 1] == "]") {
      regary.push(temp);
    }
  }
  return regary;
}

function makeCompleteRegExp(str, keepRaw) {
  let regbase;
  let regary;
  let ma;
  str = Data.normalizeName(str);

  if (/[^n]n$/.test(str)) {
    regbase = str.slice(0, -1);
    regary = makeCompleteRegAryWithSuffix("n", roma.suffixes, true, 10);
    if (keepRaw) {
      regary.push("n");
    }
  }
  else if (!/nn$/.test(str) && (ma = /[b-df-hj-np-tv-z]+$/.exec(str))) {
    if (/[^b-df-hj-np-tv-z][b-df-hj-np-tv-z]$/.test(str)) {
      regbase = str.slice(0, -1);
      regary = makeCompleteRegAryWithSuffix(ma, roma.suffixes).concat(
        makeCompleteRegAryWithSuffix(ma + ma, roma.suffixes));
    }
    else {
      const leftContext = RegExp.leftContext;
      if (/([b-df-hj-np-tv-z])\1$/.test(str)) {
        regbase = leftContext;
        regary = makeCompleteRegAryWithSuffix(ma, roma.suffixes);
      }
      else {
        regbase = str.slice(0, -1);
        regary = makeCompleteRegAryWithSuffix(ma, roma.suffixes).concat(
          makeCompleteRegAryWithSuffix(ma + ma, roma.suffixes));
      }
    }
    regary.push(str.substr(-1, 1)); /* 最後の文字そのもの */

    /* ポケモン用 最後の♂♀をmfで入力 */
    if ("m" == str[str.length - 1]) {
      regary.push(roma(regexpQuote(ma.toString().slice(0, -1))).toString() + "♂");
    }
    else if ("f" == str[str.length - 1]) {
      regary.push(roma(regexpQuote(ma.toString().slice(0, -1))).toString() + "♀");
    }
  }
  else {
    return new RegExp("^" + roma(regexpQuote(str), keepRaw).toString());
  }
  return new RegExp("^" + roma(regexpQuote(regbase), keepRaw).toString() + "(?:" + regary.join("|") + ")");
}

function completeFromDataArray(data, node) {
  const re = makeCompleteRegExp(node.value);
  const ary = [];
  for (const i in data) {
    if (re.test(data[i].name)) {
      ary.push(data[i].name);
    }
  }
  return ary;
}

function completeFromPoke(node) {
  return completeFromDataArray(PokeData.raw, node);
}

function completeFromMove(node) {
  // hack
  const ju_re = /^j(?:u(?:u(?:m(?:a(?:nn?(?:b(?:o(?:[rl](?:u(?:to?)?)?)?)?)?)?)?)?)?)?$/;
  const ary = completeFromDataArray(MoveData.raw, node);
  if (ju_re.test(node.value)) {
    ary.push("１０まんボルト");
  }
  return ary;
}

const effectiveItems = ItemData.raw.filter(item => item.effective);
function completeFromItem(node) {
  return completeFromDataArray(currentBuffer().pref.smartCompletionMode ? effectiveItems : ItemData.raw, node);
}

function makeRegexp(str) {
  return RegExp("^" + regexpQuote(str));
}

function makeMinibufferCompleteRegexp(str) {
  if (minibufferCompletion === "command") {
    return makeRegexp(str);
  }
  else {
    return makeCompleteRegExp(str, true);
  }
}

function completeFromCommand(node) {
  const re = makeRegexp(node.value);
  const ary = [];
  const insideFormFlag = isTheForm(commandTarget.form) && /\d/.test(commandTarget.name);
  for (const [name, command] of xpd.command) {
    if (command.scope === "document" || insideFormFlag) {
      if (re.test(name)) {
        ary.push(name);
      }
    }
  }
  return ary;
}

function completeMinibuffer(node) {
  if (minibufferCompletion === "command") {
    return completeFromCommand(node);
  }
  else {
    const {getIterator} = minibufferCompletion;
    const result = [];
    const re = makeMinibufferCompleteRegexp(node.value);
    for (const e of getIterator()) {
      if (re.test(e)) {
        result.push(e);
      }
    }
    return result;
  }
}

function nodeKind(node) {
  return node.name.substring(0, 4);
}

function finishesCompeletion(node) {
  const kind = nodeKind(node);
  const source = {
    POKE: PokeData.fromName,
    WAZA: MoveData.fromName,
    ITEM: ItemData.fromName,
    mini: str => {
      if (minibufferCompletion === "command") {
        return xpd.command.has(str);
      }
      else if (minibufferCompletion){
        const {exists} = minibufferCompletion;
        return exists(str);
      }
      return true;
    }
  };
  return source[kind](node.value);
}

function defaultCompleter(node) {
  return isMinibuffer(node) ?
    completeMinibuffer :
    defaultCompleter.sourceTable[nodeKind(node)];
}

defaultCompleter.sourceTable = {
  POKE: completeFromPoke,
  WAZA: completeFromMove,
  ITEM: completeFromItem
};

/* modestly: 真なら"かみなり"等のとき補完しない(C-n等で移動時の自動補完用)。 */
function completeGetCandidates(node, modestly, completer) {
  completer = completer ?? defaultCompleter(node);

  if (completer && !(modestly && finishesCompeletion(node))) {
    return completer(node).sort();
  }
  else {
    return null;
  }
}

xpd.pref.completeListingMax = 100;
function createCandidatesMessage(target, cand) {
  const completeByMessage = exportUnsafe(ev => void(target.value = ev.target.textContent));
  if (cand.length <= currentBuffer().pref.completeListingMax) {
    let p = $d.createElement("p");
    p.style.columnCount = "auto";
    p.style.width = document.getElementsByTagName("table")[0].clientWidth;
    p.style.wordBreak = "keep-all";
    let maxlen = 0;
    cand.forEach(function (mes) {
      if (mes.length > maxlen) {
        maxlen = mes.length;
      }
      let text = $d.createElement("a");
      text.textContent = mes;
      text.addEventListener("click",
                            completeByMessage,
                            false),
      p.appendChild(text),
      p.appendChild($d.createElement("br"));
    });

    // 段組み分からないので ad-hoc 対応
    p.style.columnWidth = maxlen <= 8 ? "10em" : "16em";
    return p;
  }
  else {
    return "[" + cand.length.toString() + " possibilities]";
  }
}

function complete(e, modestly) {
  const node = e.target;
  const ary = completeGetCandidates(node, modestly);
  if (ary != null) {
    let r = ary[0];
    if (ary.length > 1) {
      for (let i = 1; i < ary.length; i++) {
        r = commonPrefix(r, ary[i]);
        if (r == "") {
          break;
        }
      }
      /* kir で キ にしてしまわないように(キrとはならない) */
      if ((isMinibuffer(node) ? makeMinibufferCompleteRegexp : makeCompleteRegExp)(node.value).test(r)) {
        node.value = r;
      }
    }
    else if (ary.length == 1) {
      node.value = ary[0];
    }
    message(ary.length == 0 ? "[No match]" :
            ary.length == 1 ? "[Sole completion]" :
            createCandidatesMessage(e.target, ary));
  }
  return ary;
}

function completeCommand(e) {
  complete(e, false);
  return false;
}

// --- Command:Movement ---
function nextLine(e) {
  complete(e, true);
  const target = e.target;
  if (isMinibuffer(target)) {
    return false;
  }
  const n = Number(/\d/.exec(target.name)[0]);
  $f[RegExp.leftContext + (n + 1) % 6 + RegExp.rightContext].select();
  return false;
}
interactive(nextLine, "次の行へ移動", "form");

function previousLine(e) {
  complete(e, true);
  const target = e.target;
  if (isMinibuffer(target)) {
    return false;
  }
  const n = Number(/\d/.exec(target.name)[0]);
  $f[RegExp.leftContext + (n + 5) % 6 + RegExp.rightContext].select();
  return false;
}
interactive(previousLine, "前の行へ移動", "form");

const textboxIndexes = {};
const textboxes = [];

function initializeTextboxIndexes() {
  const t = $d.getElementsByTagName("input");
  for (let i = 0; i < t.length; i++) {
    if (t[i].type == "text") {
      textboxIndexes[t[i].name] = textboxes.length;
      textboxes.push(t[i]);
    }
  }
  textboxes[-1] = textboxes[textboxes.length - 1];
  textboxes[textboxes.length] = textboxes[0];
}

function forwardTextbox(e) {
  complete(e, true);
  const target = e.target;
  if (isMinibuffer(target)) {
    return false;
  }
  textboxes[textboxIndexes[target.name] + 1].select();
  return false;
}
interactive(forwardTextbox, "前方のテキストボックスへ移動", "form");

function backwardTextbox(e) {
  complete(e, true);
  const target = e.target;
  if (isMinibuffer(target)) {
    return false;
  }
  textboxes[textboxIndexes[target.name] - 1].select();
  return false;
}
interactive(backwardTextbox, "後方のテキストボックスへ移動", "form");

const lineWidth = 13;
xpd.pref.blockStartIndexes = [1, 2, 7];

function findIndexN(ary, f) {
  let i;
  for (i = 0; i < ary.length; i++) {
    if (f(ary[i], i, ary)) {
      return i;
    }
  }
  return i;
}

function currentBlockIndex(name) {
  const indexes = currentBuffer().pref.blockStartIndexes;
  const k = textboxIndexes[name] % lineWidth;
  return findIndexN(indexes, function(i) {
    return k < i;
  }) - 1;
}

function switchBlock(e) {
  complete(e, true);
  const target = e.target;
  const name = target.name;
  if (isMinibuffer(target)) {
    return false;
  }
  const index = textboxIndexes[name];
  const blockIndex = currentBlockIndex(name);
  const blockIndexes = currentBuffer().pref.blockStartIndexes;
  const len = blockIndexes.length;

  const base = index - index % lineWidth;
  const newBlockIndex = blockIndex == len - 1 ? 0 : blockIndex + 1;

  textboxes[base + blockIndexes[newBlockIndex]].select();
  return false;
}
interactive(switchBlock, "ブロック単位で移動", "form");

function getBeginningOfLine(textbox) {
  const index = textboxIndexes[textbox.name];
  const base = index - index % lineWidth;
  return textboxes[base];
}

function beginningOfLine(e) {
  complete(e, true);
  const target = e.target;
  if (isMinibuffer(target)) {
    return false;
  }
  getBeginningOfLine(target).select();
  return false;
}
interactive(beginningOfLine, "行頭へ移動", "form");

// --- Command:TabCommand ---
function isTabKey(e) {
  return e.key === "Tab";
}

/*
 * 補完と移動の二つの役割をTABキーに持たせるコマンド。
 * ユーザが補完してほしいのか移動してほしいのかを状況から推測する。
 */
function completeForTabCommand0(e) {
  if (!defaultCompleter(e.target)) {
    return true;
  }
  else if (isMinibuffer(e.target)) {
    complete(e);
    return false;
  }
  else {
    if (!e.target.value) {
      return true;
    }
    const candidates = complete(e, true);
    if (candidates == null || candidates.length == 1) {
      return true;
    }
    else {
      return false;
    }
  }
}

function completeForTabCommand(e, back) {
  if (completeForTabCommand0(e)) {
    if (back) {
      return backwardTextbox(e);
    }
    else {
      return forwardTextbox(e);
    }
  }
  else {
    return false;
  }
}

function completeForTabCommand2(e) {
  return completeForTabCommand(e, true);
}

function beginningOfNextLine(e) {
  const target = e.target;
  if (isMinibuffer(target)) {
    enterCommand(e);
  }
  else {
    if (completeForTabCommand0(e)) {
      getWrappedJSObject(target.form)["POKE" + (getLineNumber(target) + 7) % 6].select();
    }
  }
  return false;
}
interactive(beginningOfNextLine, "次の行の種族へ移動", "form");

// --- Command:AutoCompletion ---
function autoMessageCandidates(e) {
  if (e.target.value) {
    const ary = completeGetCandidates(e.target);
    if (ary != null) {
      message(ary.length == 0 ? "[No match]" :
              ary.length == 1 ? ary[0] :
              createCandidatesMessage(e.target, ary));
    }
  }
  else {
    message();
  }
}

function initializeAutoCompleteMode() {
  addEventListenerUnsafe($f, "input", autoMessageCandidates);
}

// --- Command:Edit ---
function transposeMoves(e) {
  const src = e.target;
  let ma;
  if ((ma = /^(WAZA\d_)(\d)/.exec(src.name)) == null) {
    return;
  }
  const dest = $f[ma[1] + (Number(ma[2]) + 1 & 3)];
  const temp = src.value;
  src.value = dest.value;
  dest.value = temp;
  dest.select();
}
interactive(transposeMoves, "技の並び替え", "form");

// TODO: ルールを参照すべき
const defaultLevel = 50;
const killLineKillPP = true;
function killLineN(n) {
  const pref = currentBuffer().pref;
  $f["LV" + n].value = pref.defaultLevel;
  $f["POKE" + n].value = "";
  for (let i = 0; i < 4; i++) {
    $f["WAZA" + n + "_" + i].value = "";
  }
  $f["ITEM" + n].value = "";
  $f["KO" + n].value = "FFFF";
  for (let i = 0; i < 5; i++) {
    $f["EF" + n + "_" + i].value = "63";
  }
  if (pref.killLineKillPP) {
    currentBuffer().party[n].p_up = [3, 3, 3, 3];
  }
}

function killLine(e) {
  const target = e.target;
  if (isMinibuffer(target)) {
    return false;
  }
  killLineN(getLineNumber(target));
  formRefresh();
  return false;
}
interactive(killLine, "一行削除", "form");

function clearAll() {
  for (let i = 0; i < 6; i++) {
    killLineN(i);
  }
  formRefresh();
}
interactive(clearAll, "全て削除");

// --- Command:Edit:Level ---
const setLevels = [50, 51, 52, 53, 54, 55, 5, 100, 50, 50];

function setLevelN(n, lv) {
  $f["LV" + n].value = lv;
}

function getLevelFromEvent(ev) {
  const ch = ev.key && Key.stringifyEvent(ev);
  return ch && /^[0-9]$/.test(ch) && setLevels[ch];
}

function setLevelFromPrompt(ev) {
  const lv = parseInt(prompt("レベル 1-100"), 10);
  if (isNaN(lv) || lv < 1 || lv > 100) {
    throw new InvalidInput("1-100の数値を入力して下さい");
  }
  else {
    setLevelN(getLineNumber(ev.target), lv);
    return false;
  }
}
interactive(setLevelFromPrompt, "ダイアログでレベルを入力");

function setLevel(e) {
  const target = e.target;
  const lv = getLevelFromEvent(e);
  if (lv) {
    setLevelN(getLineNumber(target), lv);
    setHP();
  }
  else {
    setLevelFromPrompt(e);
  }
  return false;
}
interactive(setLevel, "レベルを入力", "form");

function setLevelAll0(lv) {
  for (let i = 0; i < 6; i++) {
    setLevelN(i, lv);
  }
  setHP();
}

function setLevelAllFromPrompt(ev) {
  const lv = parseInt(prompt("レベル 1-100"), 10);;
  if (isNaN(lv) || lv < 1 || lv > 100) {
    throw new InvalidInput("1-100の数値を入力して下さい");
  }
  else {
    setLevelAll0(lv);
    return false;
  }
}
interactive(setLevelAllFromPrompt, "ダイアログでレベル一括入力");

function setLevelAll(e) {
  const lv = getLevelFromEvent(e);
  if (lv) {
    setLevelAll0(lv);
  }
  else {
    setLevelAllFromPrompt(e);
  }
  return false;
}
interactive(setLevelAll, "レベル一括入力");

xpd.pref.toggleLevelTable = {
  50: 51,
  51: 50,
  53: 55,
  55: 53
};
function toggleLevelAll(e) {
  const form = $f;
  const table = currentBuffer().pref.toggleLevelTable;
  for (let i = 0; i < 6; i++) {
    const box = form["LV" + i];
    box.value = table[box.value];
  }
  return false;
}
interactive(toggleLevelAll, "55-50編成と53-51編成をトグル");

// --- Command:Utilities ---
// --- Command:Utilities:SpeedTable ---
function eachPokeInRule(f) {
  const poke = BattleRule.fromName("2000").getPopularPokemons();
  poke.forEach(p => f(PokeData.fromID(p)));
}

function makeSpeedTableBases() {
  const speedList = [];
  const speed2pokes = {}; /* spd -> array of pokedata */

  eachPokeInRule(function (poke) {
    const spd = poke.s;
    if (speed2pokes[spd]) {
      speed2pokes[spd].push(poke);
    }
    else {
      speed2pokes[spd] = [poke];
      speedList.push(spd);
    }
  });
  speedList.sort(function (x, y) {return x - y;});
  return [speedList, speed2pokes];
}

function calcSpeed(lv, spd, ko, ef) {
  return Math.floor(((spd + (ko == undefined ? 15 : ko)) * 2 + (ef == undefined ? 63 : ef)) * lv / 100) + 5;
}

var speedTable;
xpd.pref.speedTableBorder = 1;
xpd.pref.speedTableDetailed = true;
function createSpeedTable() {
  const pref = currentBuffer().pref;
  const [speedList, speed2pokes] = makeSpeedTableBases();
  speedTable = $d.createElement("table");
  speedTable.border = pref.speedTableBorder;
  speedTable.setAttribute("style", "empty-cells: show; float: left; background-color: inherit");
  for (let i = 0; i < speedList.length; i++) {
    const row = speedTable.insertRow(0);
    row.className = "speed-table-row" + speedList[i];
    const cell0 = row.insertCell(0);
    cell0.className = "number-cell";
    cell0.innerHTML = speedList[i];
    for (let lv = 50; lv <= 55; lv++) {
      const cell = row.insertCell(-1);
      const speed = calcSpeed(lv, speedList[i]);
      cell.className = "number-cell speed-table" + speed;
      cell.innerHTML = speed;
    }
    if (pref.speedTableDetailed) {
      const last_cell = row.insertCell(-1);
      const ary = speed2pokes[speedList[i]].map(function (x) { return x.name; });
      if (ary.length > 10) {
        last_cell.style.fontSize = "xx-small";
      }
      else if (ary.length > 10) {
        last_cell.style.fontSize = "x-small";
      }
      else if (ary.length > 8) {
        last_cell.style.fontSize = "small";
      }
      else {
        last_cell.style.fontSize = "smaller";
      }
      last_cell.innerHTML = ary.join(",");
    }
  }
  const hrow = speedTable.insertRow(0);
  hrow.appendChild($d.createElement("th"));
  for (let i = 50; i <= 55; i++) {
    let th = $d.createElement("th");
    th.innerHTML = i;
    hrow.appendChild(th);
  }
  if (pref.speedTableDetailed) {
    let th = $d.createElement("th");
    hrow.appendChild(th);
  }
}

const speedTableSheet =
    (function () {
      const element = $d.createElement('style');
      $d.getElementsByTagName('head')[0].appendChild(element);
      element.sheet.insertRule(".number-cell{text-align: right}", 0);
      return element.sheet;
    })();

function displaySpeedTable0(speed) {
  const echo = $d.getElementById("echo-area");
  echo.innerHTML = "";
  if (speed) {
    const div = $d.createElement("div");
    div.innerHTML = speed;
    div.setAttribute("style", "float: left; width: 2.5em");
    echo.appendChild(div);
  }
  echo.appendChild(speedTable);
}

xpd.pref.sameSpeedCellStyle = "color: orangered; font-weight: bold";
xpd.pref.sameSpeedRowStyle = "background-color: #ffe4e4";
function displaySpeedTable(e) {
  if (isMinibuffer(e.target)) {
    return;
  }
  const number = /\d/.exec(e.target.name)[0];
  const form = getWrappedJSObject(e.target.form);
  const box = form["POKE" + number];
  const poke = PokeData.fromName(box.value);
  if (!poke) {
    throw new InvalidValueOfTextbox("種族名が不正です", box);
  }

  const lv_box = form["LV" + box.name.slice(-1)];
  const lv = parseInt(lv_box.value, 10);
  if (isNaN(lv) || lv < 1 || lv > 100) {
    throw new InvalidValueOfTextbox("Lvが不正です", lv_box);
  }
  const ko = parseInt(getId(number)[2], 16);
  const ef_box = form["EF" + number + "_3"];
  const ef = parseInt(ef_box.value, 10);
  if (isNaN(ef) || ef < 0 || ef > 63) {
    throw new InvalidValueOfTextbox("努力値が不正です", ef_box);
  }
  const speed = calcSpeed(lv, poke.s, ko, ef);
  const speedMax = calcSpeed(55, poke.s, ko, ef);
  const speedMin = calcSpeed(50, poke.s, ko, ef);
  const rows = speedTable.rows;
  const partialFlag = previousCommand === xpd.commandFromFunction.get(displaySpeedTable) && displaySpeedTable.partial && displaySpeedTable.previousNumber == number;
  for (let i = 1; i < rows.length; i++) {
    const row = rows[i];
    const spd = Number(row.cells[0].innerHTML);
    if (partialFlag || calcSpeed(50, spd) <= speedMax && calcSpeed(55, spd) >= speedMin) {
      row.style.display = "";
    }
    else {
      row.style.display = "none";
    }
  }
  displaySpeedTable.partial = !partialFlag;
  displaySpeedTable.previousNumber = number;

  while (speedTableSheet.cssRules[displaySpeedTable.csslen]) {
    speedTableSheet.deleteRule(displaySpeedTable.csslen);
  }
  const pref = currentBuffer().pref;
  if (pref.sameSpeedCellStyle) {
    speedTableSheet.insertRule(`.speed-table${speed}{${pref.sameSpeedCellStyle}}`, displaySpeedTable.csslen);
  }
  if (pref.sameSpeedRowStyle) {
    speedTableSheet.insertRule(`.speed-table-row${poke.s}{${pref.sameSpeedRowStyle}}`, displaySpeedTable.csslen);
  }

  displaySpeedTable0(speed);
}
displaySpeedTable.partial = false;
displaySpeedTable.previousNumber = null;
displaySpeedTable.csslen = speedTableSheet.cssRules.length;
interactive(displaySpeedTable, "素早さ表を表示", "form");

function globalDisplaySpeedTable(ev) {
  const rows = speedTable.rows;
  for (let i = 1; i < rows.length; i++) {
    rows[i].style.display = "";
  }
  while (speedTableSheet.cssRules[displaySpeedTable.csslen]) {
    speedTableSheet.deleteRule(displaySpeedTable.csslen);
  }
  displaySpeedTable0();
}
interactive(globalDisplaySpeedTable, "素早さ表を表示");

// --- Command:Utilities:Describe ---
function keys(obj) {
  const ary = [];
  for (const i in obj) {
    ary.push(i);
  }
  return ary;
}

function commands(pred) {
  const ary = Array.from(xpd.command.keys());
  if (pred) {
    function f(i) {
      return pred(xpd.command.get(i));
    }
    ary = ary.filter(f);
  }
  return ary.sort();
}

function makeTable(ary, header) {
  const table = $d.createElement("table");
  const th = table.createTHead();
  table.border = 1;
  table.setAttribute("style", "empty-cells: show; float: left; background-color: inherit");
  if (header) {
    const row = th.insertRow(0);
    header.forEach(function (i) {
      const cell = row.insertCell(-1);
      cell.innerHTML = i[0];
      if (i[1]) {
        cell.title = i[1];
      }
    });
  }
  ary.forEach(function (a) {
    const row = table.insertRow(-1);
    a.forEach(function (i) {
      row.insertCell(-1).innerHTML = i;
    });
  });
  return table;
}

var command2keybind = null;
var keybind2command = null;
function updateKeybindCache() {
  command2keybind = {};
  keybind2command = {};
  function f(keymap, prefix) {
    for (let [key, val] of keymap) {
      if (val instanceof Keymap) {
        f(val, prefix + " " + key);
      }
      else {
        if (!val.name) {
          throw new ImplementationError(key + ": " + val);
        }
        if (!command2keybind[val.name]) {
          command2keybind[val.name] = [];
        }
        const keyString = prefix + " " + key;
        keybind2command[keyString] = val.name;
        command2keybind[val.name].push(keyString);
      }
    }
  }
  f(formKeymap, "");
  f(documentKeymap, "");
}

function commandToKeybind(i) {
  return command2keybind[i];
}

function keybindToCommand(i) {
  return keybind2command[i];
}

const describeFormats = {
  commandName: [["コマンド名"], function (name, _) { return name; }],
  document: [["説明", "詳細は xpd wiki を参照してください"], function (_, command) { return command.document ?? "<small style=\"color: gray\">(undocumented)</small>"; }],
  keybind: [["キーバインド", "キーバインドがあるコマンドは、キーでコマンドを実行することができます"], function (_, command) {
    const a = commandToKeybind(command.name);
    return a ? (a.length > 4 ? a.slice(0, 4).concat("...") : a).join(", ") : "";
  }],
  global: [["Global", "Global Command はフォームの外でも実行することができます"], function (_, command) { return command.scope === "document" ? "○" : ""; }]
};

function describeCommand0(format_ary, pred) {
  const format = [];
  const header = [];
  updateKeybindCache();
  format_ary.forEach(function (i) {
    const s = describeFormats[i];
    format.push(s[1]);
    header.push(s[0]);
  });
  message(makeTable(commands(pred).map(function (name) {
    const res = [];
    for (const f of format) {
      res.push(f(name, xpd.command.get(name)));
    }
    return res;
  }),
                    header));
}

function describeAllCommand(e) {
  describeCommand0(keys(describeFormats));
}
interactive(describeAllCommand, "コマンド一覧を表示");

// --- Command:Rules ---
const ruleCompletion = {exists: s => BattleRule.index.has(s),
                        getIterator: () => BattleRule.index.keys()};
function describeRule(ev) {
  readMinibuffer(name => {
    const rule = BattleRule.fromName(name);
    messageHTML([
      ["ルール名",
       rule.fullName],
      ["参加可能ポケモン",
       rule.enterablePokemons.map(id => PokeData.fromID(id).name).join()],
      ["人気のポケモン",
       rule.getPopularPokemons().map(id => PokeData.fromID(id).name).join()],
      ["レベル",
      rule.levelMin === rule.levelMax ?
       rule.levelMin :
       `${rule.levelMin} - ${rule.levelMax}`],
      ["禁止技",
       rule.forbiddenMoves.map(id => MoveData.fromID(id).name).join()],
      ["禁止アイテム",
       rule.forbiddenItems.map(id => ItemData.fromID(id).name).join()],
      ...rule.name === "2006" ?
        rule.extension.ranks.map(rank =>
          [`ランク${rank}`,
           rule.extension.rank[rank].map(id => PokeData.fromID(id).name).join()])
         :
        []
    ].filter(
      ([k, v]) => v
    ).map(([k, v]) => `<dt>${k}</dt><dd>${v}</dd>`).join(""));
  }, ruleCompletion, "ルール:");
}
interactive(describeRule);


// --- Command:Utilities:Snapshots ---

const snapshotPrefix = "xpd-snapshot-";
const snapshotNamesKey = "xpd-snapshots";

async function snapshot() {
  const name = prompt("snapshot: snapshot name");
  if (!name) {
    return;
  }
  const fullName = snapshotPrefix + name;
  if (await GM.getValue(fullName)) {
    if (!confirm("上書きしますか？")) {
      return;
    }
  }
  const a = (await GM.getValue(snapshotNamesKey, "")).split("\n");
  a.push(name);
  await GM.setValue(snapshotNamesKey, a.sort().join("\n"));
  await GM.setValue(fullName, $d.cookie);
  message("snapshot `" + name + "'");
}

interactive(snapshot, "スナップショットをとる");

async function restoreSnapshot() {
  const name = prompt("restore-snapshot: snapshot name");
  if (!name) {
    return;
  }
  const fullName = snapshotPrefix + name;
  const value = await GM.getValue(fullName);
  if (value) {
    extendCookiesDeadline(value);
    quit();
  }
  else {
    message("snapshot `" + name + "' doesn't exist");
  }
}

interactive(restoreSnapshot, "スナップショットを復元");

async function removeSnapshot() {
  const name = prompt("delete-snapshot: snapshot name");
  if (!name) {
    return;
  }
  const fullName = snapshotPrefix + name;
  const snapshotNames = (await GM.getValue(snapshotNamesKey, "")).split("\n");
  const index = snapshotNames.indexOf(name);
  if (index >= 0) {
    snapshotNames.splice(index, 1);
    await GM.setValue(snapshotNamesKey, snapshotNames.join("\n"));
    await GM.setValue(snapshotPrefix + name, "");
    message("delete snapshot `" + name + "'");
  }
  else {
    message("snapshot `" + name + "' doesn't exist");
  }
}

interactive(removeSnapshot, "スナップショットを削除");

async function listSnapshots() {
  const names = await GM.getValue(snapshotNamesKey);
  if (names) {
    messageHTML(names.split("\n").join("<br />"));
  }
  else {
    message("no snapshots");
  }
}
interactive(listSnapshots, "スナップショット一覧");

// --- Command:Utilities:Others ---

const generateId = (
  function () {
    const base = "generatedId";
    let seed = 0;
    return function () {
      return base + (seed++);
    };
  })();

const partyBoxURL = "http://www.q9con.net/pokemon/PartyBox/convert.php";
function openInPartyBox() {
  setPoke();
  $w.open(partyBoxURL + "?pd=1_x_" + getPD(), "partybox_" + generateId());
}
interactive(openInPartyBox, "パーティをParty Boxで開く");

function showRebuildForm() {
  setPoke();
  messageWithTextbox('<form action="http://psense.lib.net/_/PDINPUT.cgi" method="post"><input type="hidden" name="ACTION" value="RECEPT"><input type="hidden" name="C" value="1_x_' + getPD() + '"><input type="submit" value="再現"></form>');
}
interactive(showRebuildForm, "HTMLの再現フォームを表示");

function showRebuildJSCode() {
  setPoke();
  messageWithTextbox('javascript:void(document.forms[0].PD.value="' + getPD() + '");');
}
interactive(showRebuildJSCode);

function markSwapingCheckbox(e) {
  if (isMinibuffer(e.target)) {
    return true;
  }
  else {
    getWrappedJSObject(e.target.form)["swap" + getLineNumber(e.target)].click();
    return false;
  }
}
interactive(markSwapingCheckbox, "ポケモンの並び替え", "form");

/*unfocus*/
function unfocus(e) {
  e.target.blur();
}
interactive(unfocus, "フォーカスを外す");

/*help*/
function help(e) {
  messageHTML(help.string);
}
help.string = '<p><a href="http://o-s.sub.jp/xpd/" target="_blank">xpd wiki</a></p>';
interactive(help);

// --- Utilities ---
// --- Utilities:Version

const versionFormat = /^(\d+)\.(\d+)\.(\d+)(?:-([A-Za-z].*))?/;
function versionLessThan(v1, v2) {
  const [ma1, ma2] = [v1, v2].map(v => versionFormat.exec(v));

  for (let i = 1; i < 4; i++) {
    if (ma1[i] < ma2[i]) {
      return true;
    }
    else if (ma1[i] > ma2[i]) {
      return false;
    }
  }
  if (ma1[4] != undefined) {
    if (ma2[4] == undefined) {
      return true;
    }
    else {
      return ma1[4] < ma2[4];
    }
  }
  else {
    return false;
  }
}

const latestVersionURL = "http://o-s.sub.jp/xpd/index.php?plugin=attach&pcmd=open&file=latest-version.txt&refer=misc";
function checkLatestVersion() {
  message("最新バージョン情報を取得しています...");
  GM.xmlHttpRequest(
    {
      method: "GET",
      url: latestVersionURL,
      onload: function (response) {
        const ma = versionFormat.exec(response.responseText);
        if (ma && response.status == 200) {
          if (versionLessThan(xpd.version, ma[0])) {
            message(
              makeElement("p", null,
                          `xpd ${ma[0]} がリリースされています。現在お使いのバージョンは ${xpd.version} です。`),
              makeElement("p", null,
                          "ダウンロードはこちら: ",
                          makeElement("a", {"href": "http://o-s.sub.jp/xpd/",
                                            "target": "_blank"},
                                      'xpd wiki')));
          }
          else {
            message();
          }
        }
        else {
          handleInteractiveError(new BadHTTPResponse("最新バージョン情報の取得に失敗しました", response));
        }
      }
    }
  );
}

// --- Aggressive Keybind Mode ---
var systemCommandMap = new Keymap("C-x");
xpd.pref.aggressiveKeybindMode = true;
function _aggressiveKeybindMode(on) {
  const k = systemCommandMap.name;
  on ? documentKeymap.define(k, systemCommandMap) : documentKeymap.remove(k);
}
const aggressiveKeybindMode = defineMode(_aggressiveKeybindMode, "AK");

// --- Keymap Definition ---
function initializeKeymap() {
  formKeymap.define("Tab", completeForTabCommand);
  formKeymap.define("S-Tab", completeForTabCommand2);
  formKeymap.define("Space", completeCommand);
  formKeymap.define("C-i", completeForTabCommand);
  formKeymap.define("C-n", nextLine);
  formKeymap.define("C-p", previousLine);
  formKeymap.define("A-k", killLine);
  formKeymap.define("A-f", forwardTextbox);
  formKeymap.define("A-b", backwardTextbox);
  formKeymap.define("A-t", transposeMoves);
  formKeymap.define("C-o", switchBlock);
  formKeymap.define("A-a", beginningOfLine);
  formKeymap.define("C-j", beginningOfNextLine);
  formKeymap.define("C-I", completeForTabCommand2);
  formKeymap.define("@", markSwapingCheckbox);

  documentKeymap.define("C-,", previousBuffer);
  documentKeymap.define("C-.", nextBuffer);

  const globalSetLevelMap = documentKeymap.makeSubKeymap("C-l", "global-set-level");

  globalSetLevelMap.define("C-t", toggleLevelAll);

  const setLevelMap = formKeymap.makeSubKeymap("C-l", "local-set-level", globalSetLevelMap);
  const setLevelAllMap = globalSetLevelMap.makeSubKeymap("C-a", "set-level-globally");
  for (let i = 0; i < 10; i++) {
    setLevelMap.define(String(i), setLevel);
    setLevelAllMap.define(String(i), setLevelAll);
  }
  setLevelMap.define("-", setLevelFromPrompt);
  setLevelAllMap.define("-", setLevelAllFromPrompt);

  documentKeymap.define("A-x", executeCommand);
  documentKeymap.define("C-g", quitCommand);

  formKeymap.define("C-m", enterCommand);
  formKeymap.define("Enter", enterCommand);

  formKeymap.define("C-s", displaySpeedTable);
  documentKeymap.define("C-s", globalDisplaySpeedTable);

  systemCommandMap.define("C-s", save);
  systemCommandMap.define("C-c", quit);
  systemCommandMap.define("C-k", clearAll);
  systemCommandMap.define("C-n", newParty);
  systemCommandMap.define("C-w", writeParty);
  systemCommandMap.define("C-u", unfocus);
  systemCommandMap.define("C-f", findParty);
  systemCommandMap.define("C-v", findAlternateParty);
  systemCommandMap.define("C-d", listParties);
  systemCommandMap.define("b", switchToBuffer);
  systemCommandMap.define("C-b", listBuffers);
  systemCommandMap.define("k", killCurrentBuffer);
  systemCommandMap.define("C-r", revert);
  systemCommandMap.define("i", importPD);
  systemCommandMap.define("e", exportPD);
}

// --- Initialize ---

function initialize() {
  try {
    createEchoArea();
  }
  catch (e) {
    alert("初期化中にエラーが発生しました\n" + e);
    return;
  }
  try {
    initialBuffer(getNumber(), initLoadParty());

    stripTableHeader();
    fixFormSizes();
    setTableStyleNowrap();

    documentKeymapObserver = documentKeymap.observe("keydown", $d);
    formKeymapObserver = formKeymap.observe("keydown", $f);

    setInputs();
    setButtons();

    createEffortColumn();
    createHiddenpowerColumn();
    createHPColumn();
    createSexColumn();
    createSwapCheckBox();
    initializeTextboxIndexes();

    createMiniBuffer();
    createModeLine();

    setOnChange();
    setStatus();
    setHiddenpower();

    createSpeedTable();
    initializeKeymap();
    initializeAutoCompleteMode();

    initializeBackButton();

    extendCookiesDeadline();

    for (const f of initializeHooks) {
      f();
    }
    drawModeLine();
    checkLatestVersion();
  } catch (e) {
    alert("初期化中にエラーが発生しました");
    handleInteractiveError(e);
  }
}

initialize();
